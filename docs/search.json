[
  {
    "objectID": "slides-12-01.html#announcements",
    "href": "slides-12-01.html#announcements",
    "title": "data structures – review (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nCheck grades on D2L and gradescope\nMidterm 3 is on April 24\nFinal exam on May 3"
  },
  {
    "objectID": "slides-12-01.html#data-structures-in-python",
    "href": "slides-12-01.html#data-structures-in-python",
    "title": "data structures – review (class slides)",
    "section": "Data Structures in Python",
    "text": "Data Structures in Python\n\nlists (mutable)\ndictionaries (mutable)\ntuples (immutable)"
  },
  {
    "objectID": "slides-12-01.html#lists",
    "href": "slides-12-01.html#lists",
    "title": "data structures – review (class slides)",
    "section": "Lists",
    "text": "Lists\n\nstore:\n\nordered items\nelements of different types\n\nuse square brackets ([]) syntax for creating a list\nallow indexing (integers starting at 0) with square brackets ([]) as well\nare mutable"
  },
  {
    "objectID": "slides-12-01.html#lists-1",
    "href": "slides-12-01.html#lists-1",
    "title": "data structures – review (class slides)",
    "section": "Lists",
    "text": "Lists\nIndexing to retrieve values:\n\nmy_list = [\"a\", 1, \"b\", 2]\nmy_list[0]\n\n'a'\n\n\nIndexing to mutate values:\n\nmy_list[0] = 5\nmy_list\n\n[5, 1, 'b', 2]"
  },
  {
    "objectID": "slides-12-01.html#list-methods",
    "href": "slides-12-01.html#list-methods",
    "title": "data structures – review (class slides)",
    "section": "List methods",
    "text": "List methods\n\n.append(value)\n.insert(index, value)\n.pop(index)\n.remove(value)"
  },
  {
    "objectID": "slides-12-01.html#tuples",
    "href": "slides-12-01.html#tuples",
    "title": "data structures – review (class slides)",
    "section": "Tuples",
    "text": "Tuples\n\nstore:\n\nordered items\nelements of different types\n\nuse parentheses (()) syntax for creating a tuple\nallow indexing (integers starting at 0) with square brackets ([])\nare immutable"
  },
  {
    "objectID": "slides-12-01.html#tuples-1",
    "href": "slides-12-01.html#tuples-1",
    "title": "data structures – review (class slides)",
    "section": "Tuples",
    "text": "Tuples\nIndexing to retrieve values:\n\nmy_tuple = (\"a\", 1, \"b\", 2)\nmy_tuple[0]\n\n'a'\n\n\nNot possible to mutate/change values in tuples\nNo methods to change it (because tuples are immutable)"
  },
  {
    "objectID": "slides-12-01.html#dictionaries",
    "href": "slides-12-01.html#dictionaries",
    "title": "data structures – review (class slides)",
    "section": "Dictionaries",
    "text": "Dictionaries\n\nstore pairs of items key: value\nuse curly brackets ({}) with key and value separated by colon (:)\nallow value retrieval through key with square brackets ([])\nare mutable"
  },
  {
    "objectID": "slides-12-01.html#dictionaries-1",
    "href": "slides-12-01.html#dictionaries-1",
    "title": "data structures – review (class slides)",
    "section": "Dictionaries",
    "text": "Dictionaries\nUse key to retrieve values:\n\nmy_dict = {\"banana\": 10, \"apple\": 3, \"orange\": 40}\nmy_dict[\"banana\"]\n\n10\n\n\nUse key to add key: value pairs:\n\nmy_dict[\"pear\"] = 5\nmy_dict\n\n{'banana': 10, 'apple': 3, 'orange': 40, 'pear': 5}\n\n\nUse key to mutate value associated with key:\n\nmy_dict[\"pear\"] += 5\nmy_dict\n\n{'banana': 10, 'apple': 3, 'orange': 40, 'pear': 10}"
  },
  {
    "objectID": "slides-12-01.html#dictionary-methods",
    "href": "slides-12-01.html#dictionary-methods",
    "title": "data structures – review (class slides)",
    "section": "Dictionary methods",
    "text": "Dictionary methods\n\n.values()\n.items()\n.pop()"
  },
  {
    "objectID": "slides-12-01.html#evaluate-the-code",
    "href": "slides-12-01.html#evaluate-the-code",
    "title": "data structures – review (class slides)",
    "section": "Evaluate the code",
    "text": "Evaluate the code\nIndicate when errors are thrown\n\nmy_list = [2, 3, 1, 2]\nmy_list.append(3)\nmy_list.insert(0, 1)\nmy_list[3] = 4\nmy_list # evaluate what this list holds at this point\n\nmy_list[6] = 10\n\nmy_tupple = (3, 4, 1)\nmy_tupple.append(3)\nmy_tupple # evaluate what this tuple holds at this point\n\nmy_dictionary = {3: 4, 1: 2, 5: 4}\nmy_dictionary[5] = 10\nmy_dictionary # evaluate what this dictionary holds at this point\n\nmy_dictionary.append(4: 5)\nmy_dictionary # evaluate what this dictionary holds at this point"
  },
  {
    "objectID": "slides-12-01.html#evaluate-the-code-1",
    "href": "slides-12-01.html#evaluate-the-code-1",
    "title": "data structures – review (class slides)",
    "section": "Evaluate the code",
    "text": "Evaluate the code\nIndicate when errors are thrown\n\nmy_list = [2, 3, 1, 2]\nmy_list.append(3)\nmy_list.insert(0, 1)\nmy_list[3] = 4\nmy_list # evaluate what this list holds at this point\n\n[1, 2, 3, 4, 2, 3]\n\n\n\n# error --- my_list[6] = 10\n\nmy_tupple = (3, 4, 1)\n# error --- my_tupple.append(3)\nmy_tupple # evaluate what this tuple holds at this point\n\n(3, 4, 1)\n\n\n\nmy_dictionary = {3: 4, 1: 2, 5: 4}\nmy_dictionary[5] = 10\nmy_dictionary # evaluate what this dictionary holds at this point\n\n{3: 4, 1: 2, 5: 10}\n\n\n\n# error --- my_dictionary.append(4: 5)\nmy_dictionary # evaluate what this dictionary holds at this point\n\n{3: 4, 1: 2, 5: 10}"
  },
  {
    "objectID": "slides-12-01.html#iterating-over-data-structures",
    "href": "slides-12-01.html#iterating-over-data-structures",
    "title": "data structures – review (class slides)",
    "section": "Iterating over data structures",
    "text": "Iterating over data structures\nUse for x in data_structure to retrieve values/keys (cannot make changes with this type of loop)\n\nmy_list = [3, 5, 5]\nfor value in my_list:\n  print(value)\n\n3\n5\n5\n\n\n\nmy_tuple = (3, 5, 5)\nfor value in my_tuple:\n  print(value)\n\n3\n5\n5"
  },
  {
    "objectID": "slides-12-01.html#iterating-over-dictionaries",
    "href": "slides-12-01.html#iterating-over-dictionaries",
    "title": "data structures – review (class slides)",
    "section": "Iterating over dictionaries",
    "text": "Iterating over dictionaries\n\nmy_dictionary = {3: \"a\", 5: \"b\"}\nfor key in my_dictionary:\n  print(key)\n\n3\n5\n\n\nYou can change values in a dictionary with for key in dictionary\n\nmy_dictionary = {\"a\": 2, \"b\": 3}\nfor key in my_dictionary:\n  my_dictionary[key] += 1\nmy_dictionary\n\n{'a': 3, 'b': 4}"
  },
  {
    "objectID": "slides-12-01.html#iterating-over-dictionaries-1",
    "href": "slides-12-01.html#iterating-over-dictionaries-1",
    "title": "data structures – review (class slides)",
    "section": "Iterating over dictionaries",
    "text": "Iterating over dictionaries\nUse for x in data_structure.method() for dictionaries\n\nmy_dictionary = {3: \"a\", 5: \"b\"}\nfor value in my_dictionary.values():\n  print(value)\n\na\nb\n\n\n\nmy_dictionary = {3: \"a\", 5: \"b\"}\nfor key, value in my_dictionary.items():\n  print(value)\n  print(key)\n\na\n3\nb\n5"
  },
  {
    "objectID": "slides-12-01.html#cannot-change-size-of-data-structure",
    "href": "slides-12-01.html#cannot-change-size-of-data-structure",
    "title": "data structures – review (class slides)",
    "section": "Cannot change size of data structure",
    "text": "Cannot change size of data structure\nIt is not possible to remove or add items to a list or a dictionary inside a for x in data_structure loop. This is what happens when you try to do so:\nWeird behavior:\n\nmy_list = [2, 3, 1, 2]\nfor value in my_list:\n  my_list.remove(value)\nmy_list\n\n[3, 2]\n\n\nInfinite loop:\n\nmy_list = [2, 3, 1, 2]\nfor value in my_list:\n  my_list.append(value + 1) # this causes an infinite loop"
  },
  {
    "objectID": "slides-12-01.html#cannot-change-size-of-data-structure-1",
    "href": "slides-12-01.html#cannot-change-size-of-data-structure-1",
    "title": "data structures – review (class slides)",
    "section": "Cannot change size of data structure",
    "text": "Cannot change size of data structure\nIt is not possible to remove or add items to a list or a dictionary inside a for x in data_structure loop. This is what happens when you try to do so:\nError:\n\nmy_dict = {2: 0, 3: 1, 1: 0, 2: 0}\nfor key in my_dict:\n  my_dict.pop(key) # this causes an error"
  },
  {
    "objectID": "slides-12-01.html#write-a-function",
    "href": "slides-12-01.html#write-a-function",
    "title": "data structures – review (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is count_names\nIt opens in read mode a file that contains a name per line, with repeated names\nIt counts how many unique names there are in the file\nIt returns an integer with the count\nUse a list for this\n\n\nassert count_names(\"names.txt\") == 11"
  },
  {
    "objectID": "slides-12-01.html#write-a-function-solution",
    "href": "slides-12-01.html#write-a-function-solution",
    "title": "data structures – review (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef count_names(file_name):\n  f = open(file_name, \"r\")\n  name_list = []\n  for line in f:\n    name = line.strip()\n    if name not in name_list:\n      name_list.append(name)\n  f.close()\n  return len(name_list)\n\ndef main():\n  assert count_names(\"names.txt\") == 11\n  \nmain()"
  },
  {
    "objectID": "slides-12-01.html#write-a-function-1",
    "href": "slides-12-01.html#write-a-function-1",
    "title": "data structures – review (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is count_names\nIt opens in read mode a file that contains a name per line, with repeated names\nIt counts how many unique names there are in the file\nIt returns an integer with the count\nUse a dictionary for this\n\n\nassert count_names(\"names.txt\") == 11"
  },
  {
    "objectID": "slides-12-01.html#write-a-functionn-solution",
    "href": "slides-12-01.html#write-a-functionn-solution",
    "title": "data structures – review (class slides)",
    "section": "Write a functionn – solution",
    "text": "Write a functionn – solution\n\ndef count_names(file_name):\n  f = open(file_name, \"r\")\n  name_dict = {}\n  for line in f:\n    name = line.strip()\n    if name not in name_dict:\n      name_dict[name] = \"\"\n  f.close()\n  return len(name_dict)\n\ndef main():\n  assert count_names(\"names.txt\") == 11\n  \nmain()"
  },
  {
    "objectID": "gradescope-errors.html",
    "href": "gradescope-errors.html",
    "title": "Common Gradescope Errors",
    "section": "",
    "text": "You might find that your code runs in your computer but it you get errors on Gradescope. Often the problem is not Gradescope, but your code.\nHere’s some of these common problems and how to solve them:\n\nMismatch in file name\nModuleNotFoundError: No module named 'misspeled file name'\nCheck the instructions and the error message for the right file name spelling. Remember that capitalization matters: Hello.py is different from hello.py\n\n\nMismatch in function name\nTest Failed: name 'farenheit' is not defined\nCheck the instructions for the correct function name. In the example above, the autograder is trying to call fahrenheit() and the function was written without the h after a.\n\n\nConversion function error\nTest Failed: invalid literal for int() with base 10: '3.5'\nThe autograder is providing the string “3.5” as an argument, and your code is trying to convert “3.5” to an integer using int(). You should convert the argument to a float instead.\n\n\nEOF error\nEOF Error: EOF when reading a line\nYou are calling input() or a function that calls input() – remove all function calls outside functions. For example, if you are calling main(), delete it.\n\n\nInfinite loop\nYour submission timed out. It took longer than 600 seconds to run.\nYour code has an infinite loop, so the autograder ran until it timed out. Make sure you are updating your index inside your while loop so that you eventually get out of that while loop."
  },
  {
    "objectID": "videos.html",
    "href": "videos.html",
    "title": "Video Lessons",
    "section": "",
    "text": "Module 3:\n\nHypotenuse\n\nModule 4:\n\nOdd function\nString method .isnumeric()\nFizz Buzz problem (if conditionals)\n\nModule 5:\n\nString manipulation\nIntroduction to while loops\n\nModule 6:\n\nReview while loops and strings\nWhile loops and lists"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "This course is scheduled to be an in-person course, meeting in-person three times a week. Your meeting time should be:\n\nGittings Room 129b, 1:00-1:50pm, MWF\nGittings Room 129b, 2:00-2:50pm, MWF\n\nThis is a four-unit course, meeting in the lecture room three times a week (MWF). The weekly in-person lab sessions are flexible, meaning students have a number of time slots to choose from. To schedule your lab session go to the weekly lab session spreadsheet.\nAttendance is expected and required.\nIf you need an exception due to a medical or visa issue, please reach out to the DRC or instructor."
  },
  {
    "objectID": "syllabus.html#administrative-drops",
    "href": "syllabus.html#administrative-drops",
    "title": "Syllabus",
    "section": "Administrative Drops",
    "text": "Administrative Drops\nEvery semester, students enroll in introductory CS classes but do not submit any work, resulting in a grade of E at the end of the term. To prevent this, at the end of the second week (Sep 6), all students who have not submitted/completed three or more of the following will be administratively dropped:\n\nAugust 28 quiz\nClass presence on August 30\nSeptember 4 quiz\nModule 1 Programming Problem 1\nModule 1 Programming Problem 2\nClass presence on September 6\n\nIn addition, to ensure your success in this course, and that you are on top of the work that is due every week, administrative drops will be in place throughout the semester. Students who miss coursework for two weeks or more often get an E at the end of the term in this course. After the second week of class, at any point during the semester if you fail to attend class and submit assignments for two consecutive weeks you will be administratively dropped."
  },
  {
    "objectID": "syllabus.html#illnesses-and-emergencies",
    "href": "syllabus.html#illnesses-and-emergencies",
    "title": "Syllabus",
    "section": "Illnesses and Emergencies",
    "text": "Illnesses and Emergencies\n\nIf you feel sick, or may have been in contact with someone who is infectious, stay home. Except for seeking medical care, avoid contact with others and do not travel.\nNotify your instructor if you will be missing up to one week of course meetings and/or assignment deadlines.\nIf you must miss the equivalent of more than one week of class and have an emergency, the Dean of Students is the proper office to contact (DOS-deanofstudents@email.arizona.edu). The Dean of Students considers the following as qualified emergencies: the birth of a child, mental health hospitalization, domestic violence matter, house fire, hospitalization for physical health (concussion/emergency surgery/coma/COVID-19 complications/ICU), death of immediate family, Title IX matters, etc.\nPlease understand that there is no guarantee of an extension when you are absent from class and/or miss a deadline.\n\nStatement on compliance with COVID-19 mitigation guidelines: As we enter the semester, our health and safety remain the university’s highest priority. To protect the health of everyone in this class, students are required to follow the university guidelines on COVID-19 mitigation. Please visit www.covid19.arizona.edu."
  },
  {
    "objectID": "syllabus.html#late-work",
    "href": "syllabus.html#late-work",
    "title": "Syllabus",
    "section": "Late Work",
    "text": "Late Work\nFor programming problems and projects, late work is NOT accepted"
  },
  {
    "objectID": "syllabus.html#extra-credit",
    "href": "syllabus.html#extra-credit",
    "title": "Syllabus",
    "section": "Extra Credit",
    "text": "Extra Credit\nUp to 1 point of extra credit will be awarded to students who come to office hours in person. Check our office hours schedule on the website https://xinchenyu.github.io/csc110-fall2024/tas.html and ask the TA or instructor to submit your points to gradescope.\nYou are required to ask a question and/or work on an assignment or practice problem with the TA or instructor to receive 0.5 points for each office hour attendance. It is your responsibility to ensure the TA or instructor enter your 0.5 points on gradescope during the session. Instructors will not award you these points at a later date, do not email instructors about getting points at a later date (for example, if you forget to ask the TA to enter your office hour points on gradescope).\nYour first TA office visit should take place before the Midterm 1 date, and the second visit should take place before the Midterm 2 date."
  },
  {
    "objectID": "syllabus.html#final-examination",
    "href": "syllabus.html#final-examination",
    "title": "Syllabus",
    "section": "Final Examination",
    "text": "Final Examination\nThe final exam is worth 15%.\nThe final exam will be on:\n\nFri, Dec 13 – 6:00pm - 8:00pm.\n\nYou must keep this time available. Do not schedule any flights, travel plans, or other conflicts with these exams.\nCommon final exam room in S SCI 100.\nSee also Final Exam Regulations and Schedule: https://registrar.arizona.edu/finals"
  },
  {
    "objectID": "syllabus.html#incomplete-i-or-withdrawal-w",
    "href": "syllabus.html#incomplete-i-or-withdrawal-w",
    "title": "Syllabus",
    "section": "Incomplete (I) or Withdrawal (W):",
    "text": "Incomplete (I) or Withdrawal (W):\nRequests for incomplete (I) or withdrawal (W) must be made in accordance with University policies, which are available at https://catalog.arizona.edu/policy/courses-credit/grading/grading-system."
  },
  {
    "objectID": "syllabus.html#holidays",
    "href": "syllabus.html#holidays",
    "title": "Syllabus",
    "section": "Holidays",
    "text": "Holidays\nWe won’t have classes due to university-wide holidays on the following dates:\n\n\n\n\n\nWeek\nDate\nHoliday\n\n\n\n\n2\nMon, Sep 02\nLabor Day\n\n\n12\nMon, Nov 11\nVeterans Day\n\n\n14\nThu, Nov 28\nThanksgiving Recess"
  },
  {
    "objectID": "syllabus.html#assignment-due-dates",
    "href": "syllabus.html#assignment-due-dates",
    "title": "Syllabus",
    "section": "Assignment due dates",
    "text": "Assignment due dates\n\n\n\n\n\n\n\n\n\n\nAssessment\nDate\nTime/Location\n\n\n\n\nQuiz 01\nWednesday, August 28, 2024\nin class\n\n\nModule 1 Programming Problems\nTuesday, September 03, 2024\n9pm\n\n\nQuiz 02\nWednesday, September 04, 2024\nin class\n\n\nModule 2 Programming Problems\nTuesday, September 10, 2024\n9pm\n\n\nShort Programming Project 1\nTuesday, September 10, 2024\n9pm\n\n\nQuiz 03\nWednesday, September 11, 2024\nin class\n\n\nProgramming Project 1\nThursday, September 12, 2024\n9pm\n\n\nModule 3 Programming Problems\nTuesday, September 17, 2024\n9pm\n\n\nShort Programming Project 2\nTuesday, September 17, 2024\n9pm\n\n\nQuiz 04\nWednesday, September 18, 2024\nin class\n\n\nProgramming Project 2\nThursday, September 19, 2024\n9pm\n\n\nModule 4 Programming Problems\nTuesday, September 24, 2024\n9pm\n\n\nShort Programming Project 3\nTuesday, September 24, 2024\n9pm\n\n\nQuiz 05\nWednesday, September 25, 2024\nin class\n\n\nProgramming Project 3\nThursday, September 26, 2024\n9pm\n\n\nMidterm 1\nWednesday, October 02, 2024\nin class\n\n\nModule 5 Programming Problems\nFriday, October 04, 2024\n9pm\n\n\nShort Programming Project 4\nFriday, October 04, 2024\n9pm\n\n\nProgramming Project 4\nMonday, October 07, 2024\n9pm\n\n\nModule 6 Programming Problems\nTuesday, October 08, 2024\n9pm\n\n\nShort Programming Project 5\nTuesday, October 08, 2024\n9pm\n\n\nQuiz 06\nWednesday, October 09, 2024\nin class\n\n\nProgramming Project 5\nThursday, October 10, 2024\n9pm\n\n\nModule 7 Programming Problems\nTuesday, October 15, 2024\n9pm\n\n\nShort Programming Project 6\nTuesday, October 15, 2024\n9pm\n\n\nQuiz 07\nWednesday, October 16, 2024\nin class\n\n\nProgramming Project 6\nThursday, October 17, 2024\n9pm\n\n\nMidterm 2\nWednesday, October 23, 2024\nin class\n\n\nModule 8 Programming Problems\nFriday, October 25, 2024\n9pm\n\n\nModule 9 Programming Problems\nTuesday, October 29, 2024\n9pm\n\n\nShort Programming Project 7\nTuesday, October 29, 2024\n9pm\n\n\nQuiz 08\nWednesday, October 30, 2024\nin class\n\n\nProgramming Project 7\nThursday, October 31, 2024\n9pm\n\n\nModule 10 Programming Problems\nTuesday, November 05, 2024\n9pm\n\n\nShort Programming Project 8\nTuesday, November 05, 2024\n9pm\n\n\nQuiz 09\nWednesday, November 06, 2024\nin class\n\n\nProgramming Project 8\nThursday, November 07, 2024\n9pm\n\n\nModule 11 Programming Problems\nTuesday, November 12, 2024\n9pm\n\n\nShort Programming Project 9\nTuesday, November 12, 2024\n9pm\n\n\nQuiz 10\nWednesday, November 13, 2024\nin class\n\n\nProgramming Project 9\nThursday, November 14, 2024\n9pm\n\n\nMidterm 3\nWednesday, November 20, 2024\nin class\n\n\nModule 12 Programming Problems\nFriday, November 22, 2024\n9pm\n\n\nShort Programming Project 10\nTuesday, November 26, 2024\n9pm\n\n\nModule 13 Programming Problems\nTuesday, November 26, 2024\n9pm\n\n\nQuiz 11\nWednesday, December 04, 2024\nin class\n\n\nProgramming Project 10\nThursday, December 05, 2024\n9pm\n\n\nModule 14 Programming Problems\nTuesday, December 10, 2024\n9pm\n\n\nShort Programming Project 11\nTuesday, December 10, 2024\n9pm\n\n\nQuiz 12\nWednesday, December 11, 2024\nin class\n\n\nProgramming Project 11\nWednesday, December 11, 2024\n9pm\n\n\nFinal Exam\nFriday, December 13, 2024\n6pm S SCI 100"
  },
  {
    "objectID": "syllabus.html#threatening-behavior-policy",
    "href": "syllabus.html#threatening-behavior-policy",
    "title": "Syllabus",
    "section": "Threatening Behavior Policy",
    "text": "Threatening Behavior Policy\nThe UA Threatening Behavior by Students Policy prohibits threats of physical harm to any member of the University community, including to oneself. See http://policy.arizona.edu/education-and-student-affairs/threatening-behavior-students."
  },
  {
    "objectID": "syllabus.html#campus-health",
    "href": "syllabus.html#campus-health",
    "title": "Syllabus",
    "section": "Campus Health",
    "text": "Campus Health\nhttp://www.health.arizona.edu/\nCampus Health provides quality medical and mental health care services through virtual and in-person care. Voluntary, free, and convenient COVID-19 testing is available for students on Main Campus. COVID-19 vaccine is available for all students at Campus Health.\nPhone: 520-621-9202"
  },
  {
    "objectID": "syllabus.html#counseling-and-psych-services-caps",
    "href": "syllabus.html#counseling-and-psych-services-caps",
    "title": "Syllabus",
    "section": "Counseling and Psych Services (CAPS)",
    "text": "Counseling and Psych Services (CAPS)\nhttps://health.arizona.edu/counseling-psych-services\nCAPS provides mental health care, including short-term counseling services.\nPhone: 520-621-3334"
  },
  {
    "objectID": "syllabus.html#the-dean-of-students-offices-student-assistance-program",
    "href": "syllabus.html#the-dean-of-students-offices-student-assistance-program",
    "title": "Syllabus",
    "section": "The Dean of Students Office’s Student Assistance Program",
    "text": "The Dean of Students Office’s Student Assistance Program\nhttps://deanofstudents.arizona.edu/support/student-assistance\nStudent Assistance helps students manage crises, life traumas, and other barriers that impede success. The staff addresses the needs of students who experience issues related to social adjustment, academic challenges, psychological health, physical health, victimization, and relationship issues, through a variety of interventions, referrals, and follow up services.\nEmail: DOS-deanofstudents@email.arizona.edu Phone: 520-621-7057"
  },
  {
    "objectID": "syllabus.html#survivor-advocacy-program",
    "href": "syllabus.html#survivor-advocacy-program",
    "title": "Syllabus",
    "section": "Survivor Advocacy Program",
    "text": "Survivor Advocacy Program\nhttps://survivoradvocacy.arizona.edu/\nThe Survivor Advocacy Program provides confidential support and advocacy services to student survivors of sexual and gender-based violence. The Program can also advise students about relevant non-UA resources available within the local community for support.\nEmail: survivoradvocacy@email.arizona.edu Phone: 520-621-5767"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Weekly quizzes will always be on Wednesday (when there’s no other evaluations) in class (pencil and paper format).\nMidterm (individual) exams (pencil and paper format):\n\nMidterm Exam 1 - Wednesday, October 02, 2024\nMidterm Exam 2 - Wednesday, October 23, 2024\nMidterm Exam 3 - Wednesday, November 20, 2024\n\nThe final exam (pencil and paper format) for all sections will be on:\n\nFriday, December 13, 2024 – 6:00pm - 8:00pm\n\nThe final exam room is in S SCI 100.\nAll assignments that are submitted on Gradescope are due at 9pm (Tuesdays for programming problems, short projects and Thursdays for programming projects).\nIf a week has a midterm (on Wednesday), programming problems and short projects are put off from Tuesday to Friday, programming projects are put off from Thursday to next Monday."
  },
  {
    "objectID": "schedule.html#quiz-01-wednesday-august-28-2024",
    "href": "schedule.html#quiz-01-wednesday-august-28-2024",
    "title": "Schedule",
    "section": "Quiz 01 (Wednesday, August 28, 2024)",
    "text": "Quiz 01 (Wednesday, August 28, 2024)"
  },
  {
    "objectID": "schedule.html#readings",
    "href": "schedule.html#readings",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings\n\nHello World!\nConstants, Variables, and comments"
  },
  {
    "objectID": "schedule.html#class-slides",
    "href": "schedule.html#class-slides",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\nCourse Introduction\nPython Basics"
  },
  {
    "objectID": "schedule.html#assignments",
    "href": "schedule.html#assignments",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 1 Programming Problems – Due date: Tuesday, September 03, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#quiz-02-wednesday-september-04-2024",
    "href": "schedule.html#quiz-02-wednesday-september-04-2024",
    "title": "Schedule",
    "section": "Quiz 02 (Wednesday, September 04, 2024)",
    "text": "Quiz 02 (Wednesday, September 04, 2024)"
  },
  {
    "objectID": "schedule.html#readings-1",
    "href": "schedule.html#readings-1",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings\n\nIntro to Functions\nOperators and Expressions"
  },
  {
    "objectID": "schedule.html#class-slides-1",
    "href": "schedule.html#class-slides-1",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\nFunctions\nMath in Python"
  },
  {
    "objectID": "schedule.html#assignments-1",
    "href": "schedule.html#assignments-1",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 2 Programming Problems – Due date: Tuesday, September 10, 2024 at 9pm\nShort Project 1 – Due date: Tuesday, September 10, 2024 at 9pm\nProgramming Project 1 – Due date: Thursday, September 12, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#quiz-03-wednesday-september-11-2024",
    "href": "schedule.html#quiz-03-wednesday-september-11-2024",
    "title": "Schedule",
    "section": "Quiz 03 (Wednesday, September 11, 2024)",
    "text": "Quiz 03 (Wednesday, September 11, 2024)"
  },
  {
    "objectID": "schedule.html#readings-2",
    "href": "schedule.html#readings-2",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings\n\nMore on Functions\nInput from user"
  },
  {
    "objectID": "schedule.html#class-slides-2",
    "href": "schedule.html#class-slides-2",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\nMore on Functions\nBuilt-in Python Functions"
  },
  {
    "objectID": "schedule.html#assignments-2",
    "href": "schedule.html#assignments-2",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 3 Programming Problems – Due date: Tuesday, September 17, 2024 at 9pm\nShort Project 2 – Due date: Tuesday, September 17, 2024 at 9pm\nProgramming Project 2 – Due date: Thursday, September 19, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#quiz-04-wednesday-september-18-2024",
    "href": "schedule.html#quiz-04-wednesday-september-18-2024",
    "title": "Schedule",
    "section": "Quiz 04 (Wednesday, September 18, 2024)",
    "text": "Quiz 04 (Wednesday, September 18, 2024)"
  },
  {
    "objectID": "schedule.html#readingsvideo",
    "href": "schedule.html#readingsvideo",
    "title": "Schedule",
    "section": "Readings/Video",
    "text": "Readings/Video\n\nMore on Operators and Expressions\nIf statements\nFizzBuzz problem"
  },
  {
    "objectID": "schedule.html#class-slides-3",
    "href": "schedule.html#class-slides-3",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\nMore expressions\nIf statements\nif elif else"
  },
  {
    "objectID": "schedule.html#assignments-3",
    "href": "schedule.html#assignments-3",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 4 Programming Problems – Due date: Tuesday, September 24, 2024 at 9pm\nShort Project 3 – Due date: Tuesday, September 24, 2024 at 9pm\nProgramming Project 3 – Due date: Thursday, September 26, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#quiz-05-wednesday-september-25-2024",
    "href": "schedule.html#quiz-05-wednesday-september-25-2024",
    "title": "Schedule",
    "section": "Quiz 05 (Wednesday, September 25, 2024)",
    "text": "Quiz 05 (Wednesday, September 25, 2024)"
  },
  {
    "objectID": "schedule.html#readings-3",
    "href": "schedule.html#readings-3",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings\n\nString Manipulations\nWhile loops"
  },
  {
    "objectID": "schedule.html#class-slides-4",
    "href": "schedule.html#class-slides-4",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\nstring manipulation\nwhile loops\nwhile loop aggregation"
  },
  {
    "objectID": "schedule.html#assignments-4",
    "href": "schedule.html#assignments-4",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 5 Programming Problems – Due date: Friday, October 04, 2024 at 9pm\nShort Project 4 – Due date: Friday, October 04, 2024 at 9pm\nProgramming Project 4 – Due date: Monday, October 07, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#midterm-1-wednesday-october-02-2024",
    "href": "schedule.html#midterm-1-wednesday-october-02-2024",
    "title": "Schedule",
    "section": "Midterm 1 (Wednesday, October 02, 2024)",
    "text": "Midterm 1 (Wednesday, October 02, 2024)"
  },
  {
    "objectID": "schedule.html#readings-4",
    "href": "schedule.html#readings-4",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings\n\nLists"
  },
  {
    "objectID": "schedule.html#class-slides-5",
    "href": "schedule.html#class-slides-5",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\nLists\nLists + while loops"
  },
  {
    "objectID": "schedule.html#assignments-5",
    "href": "schedule.html#assignments-5",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 6 Programming Problems – Due date: Tuesday, October 08, 2024 at 9pm\nShort Project 5 – Due date: Tuesday, October 08, 2024 at 9pm\nProgramming Project 5 – Due date: Thursday, October 10, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#quiz-06-wednesday-october-09-2024",
    "href": "schedule.html#quiz-06-wednesday-october-09-2024",
    "title": "Schedule",
    "section": "Quiz 06 (Wednesday, October 09, 2024)",
    "text": "Quiz 06 (Wednesday, October 09, 2024)"
  },
  {
    "objectID": "schedule.html#readings-5",
    "href": "schedule.html#readings-5",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings\n\nMutability\nFor loops"
  },
  {
    "objectID": "schedule.html#class-slides-6",
    "href": "schedule.html#class-slides-6",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\nmutability\nfor loops with range\nmodule random"
  },
  {
    "objectID": "schedule.html#assignments-6",
    "href": "schedule.html#assignments-6",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 7 Programming Problems – Due date: Tuesday, October 15, 2024 at 9pm\nShort Project 6 – Due date: Tuesday, October 15, 2024 at 9pm\nProgramming Project 6 – Due date: Thursday, October 17, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#quiz-07-wednesday-october-16-2024",
    "href": "schedule.html#quiz-07-wednesday-october-16-2024",
    "title": "Schedule",
    "section": "Quiz 07 (Wednesday, October 16, 2024)",
    "text": "Quiz 07 (Wednesday, October 16, 2024)"
  },
  {
    "objectID": "schedule.html#readings-6",
    "href": "schedule.html#readings-6",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings\n\nDictionaries"
  },
  {
    "objectID": "schedule.html#class-slides-7",
    "href": "schedule.html#class-slides-7",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\nintro to dictionaries\nfor x in list loops"
  },
  {
    "objectID": "schedule.html#assignments-7",
    "href": "schedule.html#assignments-7",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 8 Programming Problems – Due date: Friday, October 25, 2024 at 9pm\nShort Project 7 – Due date: Tuesday, October 29, 2024 at 9pm\nProgramming Project 7 – Due date: Thursday, October 31, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#midterm-2-wednesday-october-23-2024",
    "href": "schedule.html#midterm-2-wednesday-october-23-2024",
    "title": "Schedule",
    "section": "Midterm 2 (Wednesday, October 23, 2024)",
    "text": "Midterm 2 (Wednesday, October 23, 2024)"
  },
  {
    "objectID": "schedule.html#readings-7",
    "href": "schedule.html#readings-7",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings\n\nFile Reading and Writing"
  },
  {
    "objectID": "schedule.html#class-slides-8",
    "href": "schedule.html#class-slides-8",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\nfiles\nfiles and strings"
  },
  {
    "objectID": "schedule.html#assignments-8",
    "href": "schedule.html#assignments-8",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 9 Programming Problems – Due date: Tuesday, October 29, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#quiz-08-wednesday-october-30-2024",
    "href": "schedule.html#quiz-08-wednesday-october-30-2024",
    "title": "Schedule",
    "section": "Quiz 08 (Wednesday, October 30, 2024)",
    "text": "Quiz 08 (Wednesday, October 30, 2024)"
  },
  {
    "objectID": "schedule.html#readings-8",
    "href": "schedule.html#readings-8",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings\n\nTuples"
  },
  {
    "objectID": "schedule.html#class-slides-9",
    "href": "schedule.html#class-slides-9",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\nreturning tuples\ntuple as argument"
  },
  {
    "objectID": "schedule.html#assignments-9",
    "href": "schedule.html#assignments-9",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 10 Programming Problems – Due date: Tuesday, November 05, 2024 at 9pm\nShort Project 8 – Due date: Tuesday, November 05, 2024 at 9pm\nProgramming Project 8 – Due date: Thursday, November 07, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#quiz-09-wednesday-november-06-2024",
    "href": "schedule.html#quiz-09-wednesday-november-06-2024",
    "title": "Schedule",
    "section": "Quiz 09 (Wednesday, November 06, 2024)",
    "text": "Quiz 09 (Wednesday, November 06, 2024)"
  },
  {
    "objectID": "schedule.html#readings-9",
    "href": "schedule.html#readings-9",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings"
  },
  {
    "objectID": "schedule.html#class-slides-10",
    "href": "schedule.html#class-slides-10",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\n2D lists and nested for loops\nnested for loops"
  },
  {
    "objectID": "schedule.html#assignments-10",
    "href": "schedule.html#assignments-10",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 11 Programming Problems – Due date: Tuesday, November 12, 2024 at 9pm\nShort Project 9 – Due date: Tuesday, November 12, 2024 at 9pm\nProgramming Project 9 – Due date: Thursday, November 14, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#quiz-10-wednesday-november-13-2024",
    "href": "schedule.html#quiz-10-wednesday-november-13-2024",
    "title": "Schedule",
    "section": "Quiz 10 (Wednesday, November 13, 2024)",
    "text": "Quiz 10 (Wednesday, November 13, 2024)"
  },
  {
    "objectID": "schedule.html#readings-10",
    "href": "schedule.html#readings-10",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings\n\nSets"
  },
  {
    "objectID": "schedule.html#class-slides-11",
    "href": "schedule.html#class-slides-11",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\ndata structures – review\nintro to sets\nsets"
  },
  {
    "objectID": "schedule.html#assignments-11",
    "href": "schedule.html#assignments-11",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 12 Programming Problems – Due date: Friday, November 22, 2024 at 9pm\nShort Project 10 – Due date: Tuesday, November 26, 2024 at 9pm\nProgramming Project 10 – Due date: Thursday, December 05, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#midterm-3-wednesday-november-20-2024",
    "href": "schedule.html#midterm-3-wednesday-november-20-2024",
    "title": "Schedule",
    "section": "Midterm 3 (Wednesday, November 20, 2024)",
    "text": "Midterm 3 (Wednesday, November 20, 2024)"
  },
  {
    "objectID": "schedule.html#readings-11",
    "href": "schedule.html#readings-11",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings\n\nReview of Data Structures"
  },
  {
    "objectID": "schedule.html#class-slides-12",
    "href": "schedule.html#class-slides-12",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\nmutating lists\nmutating dictionaries"
  },
  {
    "objectID": "schedule.html#assignments-12",
    "href": "schedule.html#assignments-12",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 13 Programming Problems – Due date: Tuesday, November 26, 2024 at 9pm\nShort Project 11 – Due date: Tuesday, December 10, 2024 at 9pm\nProgramming Project 11 – Due date: Wednesday, December 11, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#quiz-11-wednesday-december-04-2024",
    "href": "schedule.html#quiz-11-wednesday-december-04-2024",
    "title": "Schedule",
    "section": "Quiz 11 (Wednesday, December 04, 2024)",
    "text": "Quiz 11 (Wednesday, December 04, 2024)"
  },
  {
    "objectID": "schedule.html#class-slides-13",
    "href": "schedule.html#class-slides-13",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\ncombining data structures\nsorting\nreview"
  },
  {
    "objectID": "schedule.html#assignments-13",
    "href": "schedule.html#assignments-13",
    "title": "Schedule",
    "section": "Assignments",
    "text": "Assignments\n\nModule 14 Programming Problems – Due date: Tuesday, December 10, 2024 at 9pm"
  },
  {
    "objectID": "schedule.html#quiz-12-wednesday-december-11-2024",
    "href": "schedule.html#quiz-12-wednesday-december-11-2024",
    "title": "Schedule",
    "section": "Quiz 12 (Wednesday, December 11, 2024)",
    "text": "Quiz 12 (Wednesday, December 11, 2024)"
  },
  {
    "objectID": "schedule.html#readings-12",
    "href": "schedule.html#readings-12",
    "title": "Schedule",
    "section": "Readings",
    "text": "Readings\n\nHandling Exceptions"
  },
  {
    "objectID": "schedule.html#class-slides-14",
    "href": "schedule.html#class-slides-14",
    "title": "Schedule",
    "section": "Class slides",
    "text": "Class slides\n\nhandling exceptions"
  },
  {
    "objectID": "slides-12-02.html#data-structures-in-python",
    "href": "slides-12-02.html#data-structures-in-python",
    "title": "intro to sets (class slides)",
    "section": "Data Structures in Python",
    "text": "Data Structures in Python\n\nlists (mutable)\ndictionaries (mutable)\ntuples (immutable)\nsets (mutable)"
  },
  {
    "objectID": "slides-12-02.html#lists",
    "href": "slides-12-02.html#lists",
    "title": "intro to sets (class slides)",
    "section": "Lists",
    "text": "Lists\n\nstore:\n\nordered items (it keeps the original order)\nelements of different types\nrepeated elements\n\nuse square brackets ([]) syntax for creating a list\nallow indexing (integers starting at 0) with square brackets ([]) as well\nare mutable"
  },
  {
    "objectID": "slides-12-02.html#tuples",
    "href": "slides-12-02.html#tuples",
    "title": "intro to sets (class slides)",
    "section": "Tuples",
    "text": "Tuples\n\nstore:\n\nordered items (it keeps the original order)\nelements of different types\nrepeated elements\n\nuse parentheses (()) syntax for creating a tuple\nallow indexing (integers starting at 0) with square brackets ([])\nare immutable"
  },
  {
    "objectID": "slides-12-02.html#dictionaries",
    "href": "slides-12-02.html#dictionaries",
    "title": "intro to sets (class slides)",
    "section": "Dictionaries",
    "text": "Dictionaries\n\nstore pairs of items key: value\nkeys have to be unique (no repeated keys allowed)\nuse curly brackets ({}) with key and value separated by colon (:)\nallow value retrieval through key with square brackets ([])\nare mutable"
  },
  {
    "objectID": "slides-12-02.html#sets",
    "href": "slides-12-02.html#sets",
    "title": "intro to sets (class slides)",
    "section": "Sets",
    "text": "Sets\n\nA set is (another) data structure\nHelpful ways of thinking about it\n\nA dictionary without the values\nA “bag” of elements"
  },
  {
    "objectID": "slides-12-02.html#sets-1",
    "href": "slides-12-02.html#sets-1",
    "title": "intro to sets (class slides)",
    "section": "Sets",
    "text": "Sets\n\nDo not store items in the order you created them\nDo not allow repeated items to be stored\nCannot use square brackets to retrieve an item\nUse set() to initiate an empty set\nUse len() to get number of items\nUse for x in set to iterate over the elements in a set"
  },
  {
    "objectID": "slides-12-02.html#set-methods",
    "href": "slides-12-02.html#set-methods",
    "title": "intro to sets (class slides)",
    "section": "Set methods",
    "text": "Set methods\n\n.add(value) adds an element to the set\n.discard(value) discards the specified value\n\nYou can also use the operator in and the function len() with sets\nUse the function set() to convert a list to a set, and list() to convert a set into a list"
  },
  {
    "objectID": "slides-12-02.html#evaluate-the-code",
    "href": "slides-12-02.html#evaluate-the-code",
    "title": "intro to sets (class slides)",
    "section": "Evaluate the code",
    "text": "Evaluate the code\n\nnumbers = {5, 7, 10, 5, 3, 5, 9, 8, 20, 5}\nnumbers  # evaluate what this set holds at this point\n\nnumbers.add(30)\nnumbers  # evaluate what this set holds at this point\n\nnumbers.discard(10)\nnumbers  # evaluate what this set holds at this point"
  },
  {
    "objectID": "slides-12-02.html#evaluate-the-code-1",
    "href": "slides-12-02.html#evaluate-the-code-1",
    "title": "intro to sets (class slides)",
    "section": "Evaluate the code",
    "text": "Evaluate the code\n\nnumbers = {5, 7, 10, 5, 3, 5, 9, 8, 20, 5}\nnumbers\n\n{3, 5, 7, 8, 9, 10, 20}\n\n\n\nnumbers.add(30)\nnumbers\n\n{3, 5, 7, 8, 9, 10, 20, 30}\n\n\n\nnumbers.discard(10)\nnumbers\n\n{3, 5, 7, 8, 9, 20, 30}"
  },
  {
    "objectID": "slides-12-02.html#evaluate-the-code-2",
    "href": "slides-12-02.html#evaluate-the-code-2",
    "title": "intro to sets (class slides)",
    "section": "Evaluate the code",
    "text": "Evaluate the code\n\nnumbers_list = [2, 1, 2, 1, 3, 4, 1]\nnumbers_list # evaluate this line\n\nnumbers_set = set(numbers_list)\nnumbers_set # evaluate this line\n\nnumbers_set.add(1)\nnumbers_set.add(2)\nnumbers_set # evaluate this line\n\nnumbers_set.add(5)\nnumbers_set # evaluate this line\n\nnumbers_set.discard(6)\nnumbers_set.discard(1)\nnumbers_set # evaluate this line"
  },
  {
    "objectID": "slides-12-02.html#evaluate-the-code-3",
    "href": "slides-12-02.html#evaluate-the-code-3",
    "title": "intro to sets (class slides)",
    "section": "Evaluate the code",
    "text": "Evaluate the code\n\nnumbers_list = [2, 1, 2, 1, 3, 4, 1]\nnumbers_list # evaluate this line\n\n[2, 1, 2, 1, 3, 4, 1]\n\n\n\nnumbers_set = set(numbers_list)\nnumbers_set # evaluate this line\n\n{1, 2, 3, 4}\n\n\n\nnumbers_set.add(1)\nnumbers_set.add(2)\nnumbers_set # evaluate this line\n\n{1, 2, 3, 4}\n\n\n\nnumbers_set.add(5)\nnumbers_set # evaluate this line\n\n{1, 2, 3, 4, 5}\n\n\n\nnumbers_set.discard(6)\nnumbers_set.discard(1)\nnumbers_set # evaluate this line\n\n{2, 3, 4, 5}"
  },
  {
    "objectID": "slides-12-02.html#write-a-function",
    "href": "slides-12-02.html#write-a-function",
    "title": "intro to sets (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is count_names\nIt opens in read mode a file that contains a name per line, with repeated names\nIt counts how many unique names there are in the file\nIt returns an integer with the count\nUse a set for this\n\n\nassert count_names(\"names.txt\") == 11"
  },
  {
    "objectID": "slides-12-02.html#write-a-function-solution",
    "href": "slides-12-02.html#write-a-function-solution",
    "title": "intro to sets (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef count_names(file_name):\n  f = open(file_name, \"r\")\n  name_set = set()\n  for line in f:\n    name_set.add(line.strip())\n  f.close()\n  return len(name_set)\n\ndef main():\n  assert count_names(\"names.txt\") == 11\n  \nmain()"
  },
  {
    "objectID": "slides-12-02.html#write-a-function-1",
    "href": "slides-12-02.html#write-a-function-1",
    "title": "intro to sets (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is has_duplicates\nIt takes a variable number of arguments: *values\nIt returns True if there are repeated elements in values, False otherwise\n\n\nassert has_duplicates(3, 2, 1, 2, 3) == True\nassert has_duplicates(3, 20, 1, 2, 13) == False"
  },
  {
    "objectID": "slides-12-02.html#write-a-function-solution-1",
    "href": "slides-12-02.html#write-a-function-solution-1",
    "title": "intro to sets (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef has_duplicates(*values):\n  unique_values = set()\n  for v in values:\n    if v not in unique_values:\n      unique_values.add(v)\n    else:\n      return True\n  return False\n\ndef main():\n  assert has_duplicates(3, 2, 1, 2, 3) == True\n  assert has_duplicates(3, 20, 1, 2, 13) == False\n  \nmain()"
  },
  {
    "objectID": "slides-12-02.html#write-a-function-solution-2",
    "href": "slides-12-02.html#write-a-function-solution-2",
    "title": "intro to sets (class slides)",
    "section": "Write a function – solution 2",
    "text": "Write a function – solution 2\n\ndef has_duplicates(*values):\n  values_set = set(values)\n  return len(values) &gt; len(values_set)\n\ndef main():\n  assert has_duplicates(3, 2, 1, 2, 3) == True\n  assert has_duplicates(3, 20, 1, 2, 13) == False\n  \nmain()"
  },
  {
    "objectID": "final-review.html",
    "href": "final-review.html",
    "title": "Mock Final Exam",
    "section": "",
    "text": "Mock Final Exam\nAnswers for mock final exam"
  },
  {
    "objectID": "assignments-03.html",
    "href": "assignments-03.html",
    "title": "Module 3 Assignments",
    "section": "",
    "text": "Due date: Tuesday, September 17, 2024 at 9pm\nShort Programming projects are submitted during our weekly 45-minute in-person lab sessions. Each lab sessions is guided by two TAs. The instructions for the short project will be available only during the lab sessions. To schedule your lab session go to the weekly lab session spreadsheet in Short Project Dates and Instructions."
  },
  {
    "objectID": "assignments-03.html#programming-problem-5",
    "href": "assignments-03.html#programming-problem-5",
    "title": "Module 3 Assignments",
    "section": "Programming Problem 5",
    "text": "Programming Problem 5\nDue date: Tuesday, September 17, 2024 at 9pm\nWrite two python functions. The first function does the following:\n\nIts name is kg_to_lbs.\nThe function prompts the user to enter a value in kilos (use the input() function) – your function should take no arguments\nIt converts the kilos entered to pounds (by multiplying kilos by 2.205)\nIt returns the converted weight in pounds with two decimals of precision\n\nThe second function does the following:\n\nIts name is liters_to_gallons\nThe function prompts the user to enter a value in liters (use the input() function) – your function should take no arguments\nIt converts the liters entered to gallons (divide the quantity in liters by 3.785)\nIt returns the converted volume in gallons with two decimals of precision\n\nName the program conversions.py. Make sure that gradescope gives you the points for passing the test cases.\nDevelopment test cases:\n\nprint(\"Enter 1:\")\nprint( kg_to_lbs() ) # 2.21 \n\nprint(\"Enter 6:\")\nprint( kg_to_lbs() ) # 13.23\n\nprint(\"Enter 120:\")\nprint( kg_to_lbs() ) # 264.6 \n\nprint(\"Enter 1:\")\nprint( liters_to_gallons() ) # 0.26 \n\nprint(\"Enter 3:\")\nprint( liters_to_gallons() ) # 0.79\n\nprint(\"Enter 6:\")\nprint( liters_to_gallons() ) # 1.59 \n\nYou can also download the ready-to-run script to test your solution."
  },
  {
    "objectID": "assignments-03.html#programming-problem-6",
    "href": "assignments-03.html#programming-problem-6",
    "title": "Module 3 Assignments",
    "section": "Programming Problem 6",
    "text": "Programming Problem 6\nDue date: Tuesday, September 17, 2024 at 9pm\nWrite a python function that does the following:\n\nIts name is is_even\nIt takes an input number from the user\nIt returns True if the number entered is even, False if number is odd\n\nRemember that the modulus operator (%) returns the remainder of an integer division. Also, 0 is interpreted as False and 1 as True.\nName the program even.py. Make sure that gradescope gives you the points for passing the test cases.\nDevelopment test cases:\n\nprint(\"Enter 0:\")\nprint( is_even() ) # True \n\nprint(\"Enter 1:\")\nprint( is_even()) # False \n\nprint(\"Enter 2:\")\nprint( is_even()) # True \n\nprint(\"Enter -2:\")\nprint( is_even()) # True \n\nYou can also download the ready-to-run script to test your solution."
  },
  {
    "objectID": "data_structures_dict.html",
    "href": "data_structures_dict.html",
    "title": "Dictionary (Data Structures)",
    "section": "",
    "text": "Dictionary (Data Structures)\nData structures are basically just that - they are structures which can hold some data together. In other words, they are used to store a collection of related data. In this module we will be working with dictionaries.\nA dictionary is like an address-book where you can find the address or contact details of a person by knowing only his/her name i.e. we associate keys (name) with values (details). Note that the key must be unique just like you cannot find out the correct information if you have two persons with the exact same name.\nNote that you can use only immutable objects (like strings) for the keys of a dictionary but you can use either immutable or mutable objects for the values of the dictionary. This basically translates to say that you should use only simple objects for keys.\nPairs of keys and values are specified in a dictionary by using the notation d = {key1 : value1, key2 : value2 }. Notice that the key-value pairs are separated by a colon and the pairs are separated themselves by commas and all this is enclosed in a pair of curly braces.\nRemember that key-value pairs in a dictionary are not ordered in any manner. If you want a particular order, then you will have to sort them yourself before using it.\nThe dictionaries that you will be using are instances/objects of the dict class.\nExample:\n# 'ab' is short for 'a'ddress'b'ook\n\nab = {\n    'Swaroop': 'swaroop@swaroopch.com',\n    'Larry': 'larry@wall.org',\n    'Matsumoto': 'matz@ruby-lang.org',\n    'Spammer': 'spammer@hotmail.com'\n}\n\nprint(\"Swaroop's address is\", ab['Swaroop'])\n\n# Deleting a key-value pair\ndel ab['Spammer']\n\nprint('There are', len(ab), 'contacts in the address-book')\n\n# Adding a key-value pair\nab['Guido'] = 'guido@python.org'\n\nif 'Guido' in ab:\n    print(\"\\nGuido's address is\", ab['Guido'])\nOutput:\n\nSwaroop's address is swaroop@swaroopch.com\nThere are 3 contacts in the address-book\n\nGuido's address is guido@python.org\n\nHow It Works\nWe create the dictionary ab using the notation already discussed. We then access key-value pairs by specifying the key using the indexing operator as discussed in the context of lists and tuples. Observe the simple syntax.\nWe can delete key-value pairs using our old friend - the del statement. We simply specify the dictionary and the indexing operator for the key to be removed and pass it to the del statement. There is no need to know the value corresponding to the key for this operation.\nWe can add new key-value pairs by simply using the indexing operator to access a key and assign that value, as we have done for Guido in the above case.\nWe can check if a key-value pair exists using the in operator.\nFor the list of methods of the dict class, see help(dict).\n\nKeyword Arguments and Dictionaries\nIf you have used keyword arguments in your functions, you have already used dictionaries! Just think about it - the key-value pair is specified by you in the parameter list of the function definition and when you access variables within your function, it is just a key access of a dictionary (which is called the symbol table in compiler design terminology)."
  },
  {
    "objectID": "short-projects.html",
    "href": "short-projects.html",
    "title": "Short Projects Dates and Instructions",
    "section": "",
    "text": "Short programming projects are due on the same day as programming problems. While the instructions for programming problems are on the website, instructions for short projects will be available only during our weekly 50-minute in-person lab sessions.\nThe lowest grade for short programming projects will be dropped at the end of the semester. There will be two lab sessions (the weeks of October 15 and November 13) for you to work on a maximum of two short programming project submissions you have missed.\nTo schedule your lab session go to the weekly lab session spreadsheet.\n\nLab Schedule\nThis is for information only. You need to sign up for a specific lab session to be able to attend it.\n\nLab 01: September 3 to September 9 (slides)\nLab 02: September 10 to September 16 (slides)\nLab 03: September 17 to September 23 (slides)\nLab 04: September 24 to September 30 (slides)\nLab 05: October 01 to October 07 (slides)\nLab 06: October 08 to October 14\nCATCH UP WEEK: October 15 to October 21\nLab 07: October 22 to October 28\nLab 08: October 29 to November 04\nLab 09: November 05 to November 12\nCATCH UP WEEK: November 13 to November 19\nLab 10: November 20 to November 26\nLab 11: December 02 to December 06"
  },
  {
    "objectID": "op_exp.html",
    "href": "op_exp.html",
    "title": "More Operators and Expressions",
    "section": "",
    "text": "Here is a quick overview of more operators:\n\n&lt; (less than)\n\nReturns whether x is less than y. All comparison operators return True or False. Note the capitalization of these names.\n5 &lt; 3 gives False and 3 &lt; 5 gives True.\nComparisons can be chained arbitrarily: 3 &lt; 5 &lt; 7 gives True.\n\n&gt; (greater than)\n\nReturns whether x is greater than y\n5 &gt; 3 returns True. If both operands are numbers, they are first converted to a common type. Otherwise, it always returns False.\n\n&lt;= (less than or equal to)\n\nReturns whether x is less than or equal to y\nx = 3; y = 6; x &lt;= y returns True\n\n&gt;= (greater than or equal to)\n\nReturns whether x is greater than or equal to y\nx = 4; y = 3; x &gt;= 3 returns True\n\n== (equal to)\n\nCompares if the objects are equal\nx = 2; y = 2; x == y returns True\nx = 'str'; y = 'stR'; x == y returns False\nx = 'str'; y = 'str'; x == y returns True\n\n!= (not equal to)\n\nCompares if the objects are not equal\nx = 2; y = 3; x != y returns True\n\nnot (boolean NOT)\n\nIf x is True, it returns False. If x is False, it returns True.\nx = True; not x returns False.\n\nand (boolean AND)\n\nx and y returns False if x is False, else it returns evaluation of y\nx = False; y = True; x and y returns False since x is False. In this case, Python will not evaluate y since it knows that the left hand side of the ‘and’ expression is False which implies that the whole expression will be False irrespective of the other values. This is called short-circuit evaluation.\n\nor (boolean OR)\n\nIf x is True, it returns True, else it returns evaluation of y\nx = True; y = False; x or y returns True. Short-circuit evaluation applies here as well.\n\n\n\n\nHere’s the updated table with the evaluation order, from the highest precedence to the lowest precedence. This means that in a given expression, Python will first evaluate the operators and expressions first in the table before the ones listed last in the table. It is far better to use parentheses to group operators and operands appropriately in order to explicitly specify the precedence. This makes the program more readable.\n\n(expressions...)\n** : Exponentiation\n*, /, //, % : Multiplication, Division, Floor Division and Remainder\n+, - : Addition and subtraction\n&lt;, &lt;=, &gt;, &gt;=, !=, == : Comparisons, including membership tests and identity tests\nnot x : Boolean NOT\nand : Boolean AND\nor : Boolean OR\n\nThe operators which we have not already come across will be explained in later chapters.\nOperators with the same precedence are listed in the same row in the above table. For example, + and - have the same precedence.\n\n\n\nExample:\ndef is_larger(x, y):\n  '''\n  Given two values, it returns a bool indicating whether\n  x is larger than y.\n  Parameters: x and y can be any type\n  It returns a bool\n  '''\n  return x &gt; y\n\na = 10\nb = 15\nresult = is_larger(a, b)\nprint(\"Is\", a, \"larger than\", str(b) + \"?\", result)\nOutput:\n\nIs 10 larger than 15? False\n\nHow It Works\nTwo integers are first stored as global variables as a and b. The function is_larger() is called with a and b as arguments. The function returns False because 10 is not larger than 15. The returned value, False, is stored in a global variable called result. We then print it using the print function.\nAlso, notice how Python pretty-prints the output, with spaces between Is and 10 and larger than. We don’t want a space after 15 and ?, so + concatenation is used instead – then the integer stored in b needs to be converted to a string type, which is done with the str() function.\n\n\n\nWe have seen how to use operators, operands and expressions - these are the basic building blocks of any program. Next, we will see how to make use of these in our programs using statements."
  },
  {
    "objectID": "op_exp.html#evaluation-order",
    "href": "op_exp.html#evaluation-order",
    "title": "More Operators and Expressions",
    "section": "",
    "text": "Here’s the updated table with the evaluation order, from the highest precedence to the lowest precedence. This means that in a given expression, Python will first evaluate the operators and expressions first in the table before the ones listed last in the table. It is far better to use parentheses to group operators and operands appropriately in order to explicitly specify the precedence. This makes the program more readable.\n\n(expressions...)\n** : Exponentiation\n*, /, //, % : Multiplication, Division, Floor Division and Remainder\n+, - : Addition and subtraction\n&lt;, &lt;=, &gt;, &gt;=, !=, == : Comparisons, including membership tests and identity tests\nnot x : Boolean NOT\nand : Boolean AND\nor : Boolean OR\n\nThe operators which we have not already come across will be explained in later chapters.\nOperators with the same precedence are listed in the same row in the above table. For example, + and - have the same precedence."
  },
  {
    "objectID": "op_exp.html#expressions",
    "href": "op_exp.html#expressions",
    "title": "More Operators and Expressions",
    "section": "",
    "text": "Example:\ndef is_larger(x, y):\n  '''\n  Given two values, it returns a bool indicating whether\n  x is larger than y.\n  Parameters: x and y can be any type\n  It returns a bool\n  '''\n  return x &gt; y\n\na = 10\nb = 15\nresult = is_larger(a, b)\nprint(\"Is\", a, \"larger than\", str(b) + \"?\", result)\nOutput:\n\nIs 10 larger than 15? False\n\nHow It Works\nTwo integers are first stored as global variables as a and b. The function is_larger() is called with a and b as arguments. The function returns False because 10 is not larger than 15. The returned value, False, is stored in a global variable called result. We then print it using the print function.\nAlso, notice how Python pretty-prints the output, with spaces between Is and 10 and larger than. We don’t want a space after 15 and ?, so + concatenation is used instead – then the integer stored in b needs to be converted to a string type, which is done with the str() function."
  },
  {
    "objectID": "op_exp.html#summary",
    "href": "op_exp.html#summary",
    "title": "More Operators and Expressions",
    "section": "",
    "text": "We have seen how to use operators, operands and expressions - these are the basic building blocks of any program. Next, we will see how to make use of these in our programs using statements."
  },
  {
    "objectID": "slides-02-02.html#cs-buddy-mentor-program-sign-up",
    "href": "slides-02-02.html#cs-buddy-mentor-program-sign-up",
    "title": "Math in Python (class slides)",
    "section": "CS Buddy Mentor Program Sign-up",
    "text": "CS Buddy Mentor Program Sign-up"
  },
  {
    "objectID": "slides-02-02.html#the-mathematical-operators",
    "href": "slides-02-02.html#the-mathematical-operators",
    "title": "Math in Python (class slides)",
    "section": "The Mathematical Operators",
    "text": "The Mathematical Operators\n\n+ Addition\n- Subtraction\n* Multiplication\n/ Division\n// Integer Division\n** Exponent\n% Modulus"
  },
  {
    "objectID": "slides-02-02.html#the-order-of-operations-pemdas",
    "href": "slides-02-02.html#the-order-of-operations-pemdas",
    "title": "Math in Python (class slides)",
    "section": "The order of Operations (PEMDAS)",
    "text": "The order of Operations (PEMDAS)\n\nParentheses,\nExponentiation\nMultiplication and Division have equal precedence\nAddition and Subtraction have equal precedence"
  },
  {
    "objectID": "slides-02-02.html#write-a-function",
    "href": "slides-02-02.html#write-a-function",
    "title": "Math in Python (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a function called square_area that takes in one argument (side length) and calculates the area of a square (a quadrilateral with two sides parallel that are of equal length).\nThe area of a square is calculated by multiplying the side by itself (\\(area = side^2\\)). Return the value for calculated area.\nAdd a comment to your code.\nName your file square.py and submit it to attendance on gradescope."
  },
  {
    "objectID": "slides-02-02.html#square-area",
    "href": "slides-02-02.html#square-area",
    "title": "Math in Python (class slides)",
    "section": "Square Area",
    "text": "Square Area\n\ndef square_area(side):\n  # enter your code here\n\ndef main():\n  print(square_area(5)) # 25\n  print(square_area(6)) # 36\n  print(square_area(10)) # 100\n\nmain()"
  },
  {
    "objectID": "slides-02-02.html#square-area-1",
    "href": "slides-02-02.html#square-area-1",
    "title": "Math in Python (class slides)",
    "section": "Square Area",
    "text": "Square Area\n\ndef square_area(side):\n  \"calculates the area of a square\"\n  area = side * side\n  return area\n\ndef main():\n  print(square_area(5)) # 25\n  print(square_area(6)) # 36\n  print(square_area(10)) # 100\n\nmain()\n\n25\n36\n100"
  },
  {
    "objectID": "slides-02-02.html#round",
    "href": "slides-02-02.html#round",
    "title": "Math in Python (class slides)",
    "section": "round()",
    "text": "round()\nUse the round() function to get a floating-point number rounded to the specified number of decimals.\nSyntax:\n\nround(number, ndigits*)\n\nThe number of digits (ndigits) is optional, but we will often round number to two decimals:\n\nround(392.68750000000006, 2)\n\n392.69"
  },
  {
    "objectID": "slides-02-02.html#round-1",
    "href": "slides-02-02.html#round-1",
    "title": "Math in Python (class slides)",
    "section": "round()",
    "text": "round()\nUse the round() function to get a floating-point number rounded to the specified number of decimals.\nSyntax:\n\nround(number, ndigits*)\n\nRounding is done toward the nearest even choice. What would these round to? (discuss with your group)\n\nround(51.6)\nround(51.4)\nround(51.5)\nround(50.5)"
  },
  {
    "objectID": "slides-02-02.html#round-2",
    "href": "slides-02-02.html#round-2",
    "title": "Math in Python (class slides)",
    "section": "round()",
    "text": "round()\nUse the round() function to get a floating-point number rounded to the specified number of decimals.\nSyntax:\n\nround(number, ndigits*)\n\nRounding is done toward the nearest even choice. What would these round to:\n\nprint(round(51.6))\nprint(round(51.4))\nprint(round(51.5))\nprint(round(50.5))\n\n52\n51\n52\n50"
  },
  {
    "objectID": "slides-02-02.html#write-a-function-1",
    "href": "slides-02-02.html#write-a-function-1",
    "title": "Math in Python (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a function that calculates the volume of a sphere:\n\nIts name is sphere_volume\nIt takes one argument: radius\nIt calculates the volume of the sphere (use 3.1415 for \\(\\pi\\)):\n\n\\[\nv = {4 / 3} \\cdot \\pi \\cdot radius^3\n\\]\n\nIt returns the value for the calculated sphere volume\nTest case: sphere_volume(.75) should return 1.77."
  },
  {
    "objectID": "slides-02-02.html#write-a-function-sphere-volume",
    "href": "slides-02-02.html#write-a-function-sphere-volume",
    "title": "Math in Python (class slides)",
    "section": "Write a function – sphere volume",
    "text": "Write a function – sphere volume\n\ndef sphere_volume(radius):\n  \"calculates the volume of a sphere of given radius\"\n  volume = (4 / 3) * 3.1415 * radius**3\n  return round(volume, 2)\n\ndef main():\n  print(sphere_volume(.75)) # 1.77\n  print(sphere_volume(2)) # 33.51\n  print(sphere_volume(5.5)) # 696.89\n\nmain()\n\n1.77\n33.51\n696.89"
  },
  {
    "objectID": "slides-02-02.html#write-a-function-2",
    "href": "slides-02-02.html#write-a-function-2",
    "title": "Math in Python (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a function that calculates the area of a sphere:\n\nIts name is sphere_area\nIt takes one argument: radius\nIt calculates the volume of the sphere (use 3.1415 for \\(\\pi\\)):\n\n\\[\na = 4 \\cdot \\pi \\cdot radius^2\n\\]\n\nIt returns the value for the calculated sphere area\nTest case: sphere_area(.75) should return 7.07."
  },
  {
    "objectID": "slides-02-02.html#write-a-function-solutions-1",
    "href": "slides-02-02.html#write-a-function-solutions-1",
    "title": "Math in Python (class slides)",
    "section": "Write a function – solutions 1",
    "text": "Write a function – solutions 1\n\ndef sphere_area(radius):\n  \"calculates the area of a sphere of given radius\"\n  area = 4 * 3.1415 * radius**2\n  return round(area, 2)\n\ndef sphere_volume(radius):\n  \"calculates the volume of a sphere of given radius\"\n  volume = (4 / 3) * 3.1415 * radius**3\n  return round(volume, 2)\n\ndef main():\n  r = .75\n  v = sphere_volume(r)\n  a = sphere_area(r)\n  print(v, a)\n\nmain()\n\n1.77 7.07"
  },
  {
    "objectID": "slides-02-02.html#write-a-function-3",
    "href": "slides-02-02.html#write-a-function-3",
    "title": "Math in Python (class slides)",
    "section": "Write a function",
    "text": "Write a function\nComparing two formulas: \\[\na = 4 \\cdot \\pi \\cdot radius^2\n\\]\n\\[\nv = {4 / 3} \\cdot \\pi \\cdot radius^3\n\\] We can use area when calculating volume: \\[\nv = {1 / 3} \\cdot a \\cdot radius\n\\]\nModify your sphere_volume function by calling sphere_area inside the function."
  },
  {
    "objectID": "slides-02-02.html#write-a-function-solutions-2",
    "href": "slides-02-02.html#write-a-function-solutions-2",
    "title": "Math in Python (class slides)",
    "section": "Write a function – solutions 2",
    "text": "Write a function – solutions 2\n\ndef sphere_area(radius):\n  \"calculates the area of a sphere of given radius\"\n  area = 4 * 3.1415 * radius**2\n  return round(area, 2)\n\n\ndef sphere_volume(radius):\n  \"calculates the volume of a sphere of given radius\"\n  volume = (1 / 3) * sphere_area(radius) * radius\n  return round(volume, 2)\n\n\ndef main():\n  r = .75\n  v = sphere_volume(r)\n  a = sphere_area(r)\n  print(v, a)\n\nmain()\n\n1.77 7.07"
  },
  {
    "objectID": "exam-instructions.html#exam-instructions",
    "href": "exam-instructions.html#exam-instructions",
    "title": "Exam Instructions",
    "section": "Exam Instructions",
    "text": "Exam Instructions\n1PM Section: exam starts at 1:00pm and ends at 1:50pm\n2PM Section: exam starts at 2:00pm and ends at 2:50pm\nNo breaks during the exam. Use the restroom now.\n\nHave your photo ID handy\nPut away earbuds, headphones, phones, laptops, calculators, smart watches, etc."
  },
  {
    "objectID": "assignments-12.html",
    "href": "assignments-12.html",
    "title": "Module 12 Assignments",
    "section": "",
    "text": "Due date: Friday, November 22, 2024 at 9pm\nShort Programming projects are submitted during our weekly 45-minute in-person lab sessions. Each lab sessions is guided by two TAs. The instructions for the short project will be available only during the lab sessions. To schedule your lab session go to the weekly lab session spreadsheet in Short Project Dates and Instructions."
  },
  {
    "objectID": "assignments-12.html#programming-problem-23",
    "href": "assignments-12.html#programming-problem-23",
    "title": "Module 12 Assignments",
    "section": "Programming Problem 23",
    "text": "Programming Problem 23\nDue date: Friday, November 22, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is differences\nIt takes two sets as arguments: set_1 and set_2\nIt calculates and returns the number of elements that are different (not in common) between the two parameter sets\nIt returns an integer with the number of different elements\n\nTest cases:\n\nprint( differences({1, 2, 3}, {2, 3, 4, 5}) ) # 3\nprint( differences({'john', 'mark', 'paul'}, {'john', 'mark'}) ) # 1\n\nName the program differences.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "assignments-12.html#programming-problem-24",
    "href": "assignments-12.html#programming-problem-24",
    "title": "Module 12 Assignments",
    "section": "Programming Problem 24",
    "text": "Programming Problem 24\nDue date: Friday, November 22, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is has_duplicate\nIt takes a single list as argument\nIt returns True if the list contains any duplicate values, False if all values are unique\n\nTest cases:\n\nprint( has_duplicate([]) ) # False\nprint( has_duplicate([1, 2, 3, 1]) ) # True\nprint( has_duplicate([1, \"a\", \"b\", 4, 5]) ) # False\nprint( has_duplicate([1, \"a\", \"a\", 2, 3, 4]) ) # True\n\nName the program detect_duplicates.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "slides-10-01.html#announcements",
    "href": "slides-10-01.html#announcements",
    "title": "returning tuples (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nQuiz 05 this Wednesday\n\ndictionary and list\nread and write to files\n\nMidterm 2 on Wednesday March 27 (bring PHOTO ID)\n\ncontent: Modules 1 to 10\nReview session: Tuesday, March 26, 5pm to 7pm, Commons 105"
  },
  {
    "objectID": "slides-10-01.html#what-are-tuples",
    "href": "slides-10-01.html#what-are-tuples",
    "title": "returning tuples (class slides)",
    "section": "What are tuples?",
    "text": "What are tuples?\n\nimmutable lists\na sequence of zero or more values (just like lists)\naddressable by index (just like lists)\niterable (just like lists)"
  },
  {
    "objectID": "slides-10-01.html#tuple-syntax",
    "href": "slides-10-01.html#tuple-syntax",
    "title": "returning tuples (class slides)",
    "section": "tuple syntax",
    "text": "tuple syntax\nUse () to create a new tuple:\n\nmy_tuple = (2, 4, 6)\nmy_tuple[0]\n\n2\n\n\n\nmy_tuple[2]\n\n6\n\n\nEmpty tuple:\n\nempty = ()\nempty\n\n()"
  },
  {
    "objectID": "slides-10-01.html#tuples-are-immutable",
    "href": "slides-10-01.html#tuples-are-immutable",
    "title": "returning tuples (class slides)",
    "section": "tuples are immutable",
    "text": "tuples are immutable\nNo assignment is allowed\n\nmy_tuple = (2, 4, 6)\nmy_tuple[1] = 99 # will fail and cause an exception"
  },
  {
    "objectID": "slides-10-01.html#why-use-tuples",
    "href": "slides-10-01.html#why-use-tuples",
    "title": "returning tuples (class slides)",
    "section": "Why use tuples?",
    "text": "Why use tuples?\n\nThey are a little more efficient than lists\nThey can be used as dictionary keys (important)\nThey are used in Python a lot, so you need to understand them, even if you don’t use them\nWhen functions return multiple values, it returns a tuple"
  },
  {
    "objectID": "slides-10-01.html#returning-multiple-values-in-a-function",
    "href": "slides-10-01.html#returning-multiple-values-in-a-function",
    "title": "returning tuples (class slides)",
    "section": "Returning multiple values in a function",
    "text": "Returning multiple values in a function\n\ndef descr_stats(numbers):\n  total = 0\n  for n in numbers:\n    total += n\n  return total, total/len(numbers)\n\ndef main():\n  grades = [90, 87, 83, 95, 100]\n  total, mean = descr_stats(grades)\n  assert total == 455\n  assert mean == 91.0\n\nmain()"
  },
  {
    "objectID": "slides-10-01.html#write-a-function",
    "href": "slides-10-01.html#write-a-function",
    "title": "returning tuples (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is low_high\nIt takes two numbers as argument: x and y\nIt returns a tuple with the lowest number first, the highest number second\n\n\nassert low_high(4, 2) == (2, 4)\nassert low_high(1, 5) == (1, 5)"
  },
  {
    "objectID": "slides-10-01.html#write-a-function-solution",
    "href": "slides-10-01.html#write-a-function-solution",
    "title": "returning tuples (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef low_high(x, y):\n  if x &lt; y:\n    return x, y\n  else:\n    return y, x\n  \ndef main():\n  assert low_high(4, 2) == (2, 4)\n  assert low_high(1, 5) == (1, 5)\n  \n  print(\"Passed tests.\")\n  \nmain()\n\nPassed tests."
  },
  {
    "objectID": "slides-10-01.html#write-a-function-1",
    "href": "slides-10-01.html#write-a-function-1",
    "title": "returning tuples (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is sum_and_multiplication\nIt takes a dictionary as argument\nIt iterates over the dictionary values, summing all the values and multiplying all the values (create two separate variables, one for the addition and another for the multiplication)\nIt returns the sum and the multiplication of the values in the dictionary\n\n\ntest_dict = {\"a\": 2, \"b\": 3, \"c\": 5}\ntotal, mult = sum_and_multiplication(test_dict)\nassert total == 10\nassert mult == 30"
  },
  {
    "objectID": "slides-10-01.html#write-a-function-solution-1",
    "href": "slides-10-01.html#write-a-function-solution-1",
    "title": "returning tuples (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef sum_and_multiplication(dictionary):\n  total = 0\n  multiplication = 1\n  for key in dictionary:\n    total += dictionary[key]\n    multiplication *= dictionary[key]\n    \n  return total, multiplication\n\ndef main():\n  test_dict = {\"a\": 2, \"b\": 3, \"c\": 5}\n  total, mult = sum_and_multiplication(test_dict)\n  assert total == 10\n  assert mult == 30\n  \nmain()"
  },
  {
    "objectID": "slides-10-01.html#write-a-function-2",
    "href": "slides-10-01.html#write-a-function-2",
    "title": "returning tuples (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is odds_and_evens\nIt takes one list of integers as argument\nIt returns two lists: one with all the odd numbers in integers, and another with all the even numbers in integers\n\n\nprint( odds_and_evens([2,6,1]) ) # ([1], [2,6])"
  },
  {
    "objectID": "slides-10-01.html#write-a-function-solution-2",
    "href": "slides-10-01.html#write-a-function-solution-2",
    "title": "returning tuples (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef odds_and_evens(integers):\n  odds = []\n  evens = []\n  for n in integers:\n    if n % 2 == 0:\n      evens.append(n)\n    else:\n      odds.append(n)\n  return odds, evens\n      \ndef main():\n  print( odds_and_evens([2,6,1]) ) # ([1], [2,6])\n  \nmain()\n\n([1], [2, 6])"
  },
  {
    "objectID": "strings.html",
    "href": "strings.html",
    "title": "String Manipulation",
    "section": "",
    "text": "Strings are immutable sequences. That means that we can retrieve a character in the string by indexing the string with square brackets. However, we are unable to change characters in the string.\nGiven the string “Apple”, for example. The first character, “A” is at index 0, the second character “p” is at index 1 and so on:\n\n\n\n0\n1\n2\n3\n4\n\n\n\n\nA\np\np\nl\ne\n\n\n\nIf we want to retrieve the fourth character in a string, we need to index it at 3:\n\nname = \"Suzanne\"\nfourth_letter = name[3]\nprint(\"The fourth character in name is \" + fourth_letter)\n\nThe fourth character in name is a\n\n\nWe can also use membership tests using the operators in and not in with sequences.\nFor example:\n\ndef look_for_a(name):\n  if \"a\" in name:\n    return True\n  else:\n    return False\n  \ndef main():\n  name = \"Adriana\"\n  if look_for_a(name):\n    print(\"Name contains 'a'\")\n  else:\n    print(\"Name doesn't contain 'a'\")\n    \nmain()\n\nName contains 'a'"
  },
  {
    "objectID": "slides-02-01.html#functions",
    "href": "slides-02-01.html#functions",
    "title": "Functions (class slides)",
    "section": "Functions",
    "text": "Functions\n\nFunctions are named operations that are available to do tasks\nSome functions are built-in functions that Python provides\nProgrammers can also define their own functions\nFunctions are called (or invoked)"
  },
  {
    "objectID": "slides-02-01.html#function-definitions",
    "href": "slides-02-01.html#function-definitions",
    "title": "Functions (class slides)",
    "section": "Function definitions",
    "text": "Function definitions\n\ndef two():\n  return 2\n\nThis function definition has many parts:\n\ntwo is the name of the function\n() is the parameter list (Here, it is empty)\nthe body (or content) of the function is indented\nreturn 2 is a statement that causes the function to cease and produce the value 2"
  },
  {
    "objectID": "slides-02-01.html#example-of-a-simple-function",
    "href": "slides-02-01.html#example-of-a-simple-function",
    "title": "Functions (class slides)",
    "section": "Example of a simple function",
    "text": "Example of a simple function\n\ndef add_one(n):\n  return n + 1\n\n\nadd_one is the name of the function\n(n) is the parameter list\nthe body (or content) of the function is indented\nreturn n + 1 is a statement that causes the function to cease and produce the value n + 1"
  },
  {
    "objectID": "slides-02-01.html#function-to-calculate-area-of-a-circle",
    "href": "slides-02-01.html#function-to-calculate-area-of-a-circle",
    "title": "Functions (class slides)",
    "section": "Function to calculate area of a circle",
    "text": "Function to calculate area of a circle\nRemember this from the last set of slides?\n\n# assign a radius value\nradius = 3\n# compute the area of a circle\narea = 3.1415 * radius ** 2\n\n\nCalculating the area of a circle is an abstraction.\nIn the code above, that is done by a variable assignment with a variable named area.\nLet’s create a function called area, that given a radius parameter, it returns the area of the circle."
  },
  {
    "objectID": "slides-02-01.html#function-to-calculate-area-of-a-circle-1",
    "href": "slides-02-01.html#function-to-calculate-area-of-a-circle-1",
    "title": "Functions (class slides)",
    "section": "Function to calculate area of a circle",
    "text": "Function to calculate area of a circle\n\ndef calculate_area(radius):\n  # calculate the area first\n  area = 3.1415 * radius ** 2\n  \n  # return calculated area\n  return area\n\ndef main():\n  print(calculate_area(3)) # 28.27\n  print(calculate_area(6)) # 113.09\n  \nmain()"
  },
  {
    "objectID": "slides-02-01.html#function-to-calculate-the-volume-of-a-cylinder",
    "href": "slides-02-01.html#function-to-calculate-the-volume-of-a-cylinder",
    "title": "Functions (class slides)",
    "section": "Function to calculate the volume of a cylinder",
    "text": "Function to calculate the volume of a cylinder\nWrite a function that does the following:\n\nIts name is volume\nIt takes two integer arguments: radius and height\nIt calculates the volume of a cylinder, based on radius and height. Volume is area multiplied by height.\nIt returns the float value for calculated volume."
  },
  {
    "objectID": "slides-02-01.html#submit-function-to-gradescope",
    "href": "slides-02-01.html#submit-function-to-gradescope",
    "title": "Functions (class slides)",
    "section": "Submit function to Gradescope",
    "text": "Submit function to Gradescope\n\nName your python script with the volume function cylinder.py\nSubmit your .py file to Gradescope, Attendance August 30\nYou can resubmit as many times as you need (up to the deadline)\nYou can look at your Submission History and activate a previous submission"
  },
  {
    "objectID": "slides-02-01.html#function-to-calculate-the-volume-of-a-cylinder-1",
    "href": "slides-02-01.html#function-to-calculate-the-volume-of-a-cylinder-1",
    "title": "Functions (class slides)",
    "section": "Function to calculate the volume of a cylinder",
    "text": "Function to calculate the volume of a cylinder\n\ndef volume(radius, height):\n  # calculate the area first\n  area = 3.1415 * radius ** 2\n  \n  # multiply area by height\n  vol = area * height\n  \n  # return calculated volume\n  return vol\n\ndef main():\n  print(volume(1, 2)) # 6.283\n  print(volume(6, 10)) # 1130.94\n  print(volume(5, 5)) # 392.68750000000006\n  \nmain()"
  },
  {
    "objectID": "slides-02-01.html#more-operations",
    "href": "slides-02-01.html#more-operations",
    "title": "Functions (class slides)",
    "section": "More operations",
    "text": "More operations\nTry the following operators with the different types in python:\n\n   +\n   -\n   *\n   /\n   **\n   \n   //\n   %"
  },
  {
    "objectID": "slides-02-01.html#pemdas",
    "href": "slides-02-01.html#pemdas",
    "title": "Functions (class slides)",
    "section": "PEMDAS",
    "text": "PEMDAS\n\nWhat does PEMDAS stand for?\nThe operator precedence:\n\nParentheses\nExponentiation\nMultiplication and Division (including // and %)\nAddition and Subtraction"
  },
  {
    "objectID": "slides-02-01.html#pemdas-1",
    "href": "slides-02-01.html#pemdas-1",
    "title": "Functions (class slides)",
    "section": "PEMDAS",
    "text": "PEMDAS\nWhat value will each of these variables take on? No computers!\na1 = 5 /  5 * 10  * 5\na2 = 5 / (5 * 10) * 5\n\nb1 = 5 *  10 - 2\nb2 = 5 * (10 - 2)\n\nc = (3 // (4 // 5)) + 1"
  },
  {
    "objectID": "slides-02-01.html#pemdas-answer",
    "href": "slides-02-01.html#pemdas-answer",
    "title": "Functions (class slides)",
    "section": "PEMDAS – answer",
    "text": "PEMDAS – answer\n\na1 = 5 /  5 * 10  * 5\na2 = 5 / (5 * 10) * 5\n\nb1 = 5 *  10 - 2\nb2 = 5 * (10 - 2)\n\n# c = (3 // (4 // 5)) + 1 ERROR -- Zero Division\n\nprint(a1)\nprint(a2)\nprint(b1)\nprint(b2)\n\n50.0\n0.5\n48\n40\n\n\nNote that the division operator returns a float even when both numerator and denominator are integers"
  },
  {
    "objectID": "slides-02-01.html#quiz-02",
    "href": "slides-02-01.html#quiz-02",
    "title": "Functions (class slides)",
    "section": "Quiz 02",
    "text": "Quiz 02\n\n\ncurrent time\n\n\n\n\n\n\nYou have 10 minutes to complete the quiz"
  },
  {
    "objectID": "assignments-11.html",
    "href": "assignments-11.html",
    "title": "Module 11 Assignments",
    "section": "",
    "text": "Due date: Tuesday, November 12, 2024 at 9pm\nShort Programming projects are submitted during our weekly 45-minute in-person lab sessions. Each lab sessions is guided by two TAs. The instructions for the short project will be available only during the lab sessions. To schedule your lab session go to the weekly lab session spreadsheet in Short Project Dates and Instructions."
  },
  {
    "objectID": "assignments-11.html#programming-problem-21",
    "href": "assignments-11.html#programming-problem-21",
    "title": "Module 11 Assignments",
    "section": "Programming Problem 21",
    "text": "Programming Problem 21\nDue date: Tuesday, November 12, 2024 at 9pm\nWrite a remove_zero_sides function that given a 2D list as argument, it mutates and returns the list removing any first and last values that are equal to zero. Name your file filter.py.\nTest cases:\n\nnumbers = [[0, 1, 2], [0], [], [2, 4, 0], [0, 0], [0, 20, 3, 10, 0]]\nremove_zero_sides(numbers)\nassert numbers ==  [[1, 2], [], [], [2, 4], [], [20, 3, 10]]\n\nmore_numbers = [[0], [], [0, 0], [0, 1], [2, 0]]\nassert remove_zero_sides(more_numbers) == [[], [], [], [1], [2]]"
  },
  {
    "objectID": "assignments-11.html#programming-problem-22",
    "href": "assignments-11.html#programming-problem-22",
    "title": "Module 11 Assignments",
    "section": "Programming Problem 22",
    "text": "Programming Problem 22\nDue date: Tuesday, November 12, 2024 at 9pm\nWrite a lowercase_items function that given a 2D list of strings as argument, it mutates and returns the list lowercasing all strings in each sublist. You can assume all items in the lists are strings. You can use the .lower() string method. Name your file lowercasing.py\nTest cases:\n\nwords = [[\"A\", \"B\", \"C\"], [], [\"BANANA\", \"Apple\", \"pineapple\"]]\nlowercase_items(words)\nassert words == [[\"a\", \"b\", \"c\"], [], [\"banana\", \"apple\", \"pineapple\"]]\n\nmore_words = [[\"A\"], [\"Monica\"]]\nassert lowercase_items(more_words) == [[\"a\"], [\"monica\"]]"
  },
  {
    "objectID": "op_exp-a.html",
    "href": "op_exp-a.html",
    "title": "Operators and Expressions",
    "section": "",
    "text": "Most statements (logical lines) that you write will contain expressions. A simple example of an expression is 2 + 3. An expression can be broken down into operators and operands.\nOperators are functionality that do something and can be represented by symbols such as + or by special keywords. Operators require some data to operate on and such data is called operands. In this case, 2 and 3 are the operands.\n\n\nWe will briefly take a look at the operators and their usage.\nNote that you can evaluate the expressions given in the examples using the interpreter interactively. For example, to test the expression 2 + 3, use the interactive Python interpreter prompt:\n&gt;&gt;&gt; 2 + 3\n5\n&gt;&gt;&gt; 3 * 5\n15\n&gt;&gt;&gt;\nHere is a quick overview of the available operators:\n\n+ (plus)\n\nAdds two objects\n3 + 5 gives 8. 'a' + 'b' gives 'ab'.\n\n- (minus)\n\nGives the subtraction of one number from the other; if the first operand is absent it is assumed to be zero.\n-5.2 gives a negative number and 50 - 24 gives 26.\n\n* (multiply)\n\nGives the multiplication of the two numbers or returns the string repeated that many times.\n2 * 3 gives 6. 'la' * 3 gives 'lalala'.\n\n** (power)\n\nReturns x to the power of y\n3 ** 4 gives 81 (i.e. 3 * 3 * 3 * 3)\n\n/ (divide)\n\nDivide x by y\n13 / 3 gives 4.333333333333333\n\n// (divide and floor)\n\nDivide x by y and round the answer down to the nearest integer value. Note that if one of the values is a float, you’ll get back a float.\n13 // 3 gives 4\n-13 // 3 gives -5\n9//1.81 gives 4.0\n\n% (modulo)\n\nReturns the remainder of the division\n13 % 3 gives 1. -25.5 % 2.25 gives 1.5.\n\n\n\n\n\nIf you had an expression such as 2 + 3 * 4, is the addition done first or the multiplication? Our high school maths tells us that the multiplication should be done first. This means that the multiplication operator has higher precedence than the addition operator.\nThe following table gives the precedence table for Python, from the highest precedence to the lowest precedence. This means that in a given expression, Python will first evaluate the operators and expressions first in the table before the ones listed last in the table. It is far better to use parentheses to group operators and operands appropriately in order to explicitly specify the precedence. This makes the program more readable.\n\n(expressions...)\n** : Exponentiation\n*, /, //, % : Multiplication, Division, Floor Division and Remainder\n+, - : Addition and subtraction\n\nOperators with the same precedence are listed in the same row in the above table. For example, + and - have the same precedence.\n\n\n\nTo make the expressions more readable, we can use parentheses. For example, 2 + (3 * 4) is definitely easier to understand than 2 + 3 * 4 which requires knowledge of the operator precedences. As with everything else, the parentheses should be used reasonably (do not overdo it) and should not be redundant, as in (2 + (3 * 4)).\nThere is an additional advantage to using parentheses - it helps us to change the order of evaluation. For example, if you want addition to be evaluated before multiplication in an expression, then you can write something like (2 + 3) * 4.\n\n\n\nOperators are usually associated from left to right. This means that operators with the same precedence are evaluated in a left to right manner. For example, 2 + 3 + 4 is evaluated as (2 + 3) + 4.\n\n\n\nExample:\nlength = 5\nbreadth = 2\n\narea = length * breadth\nprint('Area is', area)\nprint('Perimeter is', 2 * (length + breadth))\nOutput:\nArea is 10\nPerimeter is 14\nHow It Works\nThe length and breadth of the rectangle are stored in variables by the same name. We use these to calculate the area and perimeter of the rectangle with the help of expressions. We store the result of the expression length * breadth in the variable area and then print it using the print function. In the second case, we directly use the value of the expression 2 * (length + breadth) in the print function.\nAlso, notice how Python pretty-prints the output. Even though we have not specified a space between 'Area is' and the variable area, Python puts it for us so that we get a clean nice output and the program is much more readable this way (since we don’t need to worry about spacing in the strings we use for output). This is an example of how Python makes life easy for the programmer.\n\n\n\nThe built-in python function round returns an integer if ndigits (number of digits) is omitted. Otherwise the return value has the same type as the number provided as argument (if the number is an integer, round returns an integer, if the number is a float, round returns a float). This function is useful to return a float number rounded to the decimal places provided as the second argument when calling it. The syntax is round(number, ndigits)\nround(50.5555, 2)\nThe call above returns 50.56\nPython uses the IEEE 754 standard for rounding, called the banker’s rounding. So python rounds to the nearest even number if the fractional component of the number is halfway between two integers. The idea is that 50% of the numbers are rounded up and 50% down.\n&gt;&gt;&gt; round(50.5)\n50\n&gt;&gt;&gt; round(51.5)\n52\nNote that decimal fractions often cannot be represented exactly as a binary floating-point number, so the return value of round is not always what you’d expect (not a bug).\n&gt;&gt;&gt; round(4.675, 2)\n4.67\n&gt;&gt;&gt; round(4.665, 2)\n4.67\nIf you are curious, you can read more about floating point arithmetic.\n\n\n\nWe have seen how to use operators, operands and expressions - these are the basic building blocks of any program. Next, we will see how to make use of these in our programs using statements."
  },
  {
    "objectID": "op_exp-a.html#operators",
    "href": "op_exp-a.html#operators",
    "title": "Operators and Expressions",
    "section": "",
    "text": "We will briefly take a look at the operators and their usage.\nNote that you can evaluate the expressions given in the examples using the interpreter interactively. For example, to test the expression 2 + 3, use the interactive Python interpreter prompt:\n&gt;&gt;&gt; 2 + 3\n5\n&gt;&gt;&gt; 3 * 5\n15\n&gt;&gt;&gt;\nHere is a quick overview of the available operators:\n\n+ (plus)\n\nAdds two objects\n3 + 5 gives 8. 'a' + 'b' gives 'ab'.\n\n- (minus)\n\nGives the subtraction of one number from the other; if the first operand is absent it is assumed to be zero.\n-5.2 gives a negative number and 50 - 24 gives 26.\n\n* (multiply)\n\nGives the multiplication of the two numbers or returns the string repeated that many times.\n2 * 3 gives 6. 'la' * 3 gives 'lalala'.\n\n** (power)\n\nReturns x to the power of y\n3 ** 4 gives 81 (i.e. 3 * 3 * 3 * 3)\n\n/ (divide)\n\nDivide x by y\n13 / 3 gives 4.333333333333333\n\n// (divide and floor)\n\nDivide x by y and round the answer down to the nearest integer value. Note that if one of the values is a float, you’ll get back a float.\n13 // 3 gives 4\n-13 // 3 gives -5\n9//1.81 gives 4.0\n\n% (modulo)\n\nReturns the remainder of the division\n13 % 3 gives 1. -25.5 % 2.25 gives 1.5."
  },
  {
    "objectID": "op_exp-a.html#evaluation-order",
    "href": "op_exp-a.html#evaluation-order",
    "title": "Operators and Expressions",
    "section": "",
    "text": "If you had an expression such as 2 + 3 * 4, is the addition done first or the multiplication? Our high school maths tells us that the multiplication should be done first. This means that the multiplication operator has higher precedence than the addition operator.\nThe following table gives the precedence table for Python, from the highest precedence to the lowest precedence. This means that in a given expression, Python will first evaluate the operators and expressions first in the table before the ones listed last in the table. It is far better to use parentheses to group operators and operands appropriately in order to explicitly specify the precedence. This makes the program more readable.\n\n(expressions...)\n** : Exponentiation\n*, /, //, % : Multiplication, Division, Floor Division and Remainder\n+, - : Addition and subtraction\n\nOperators with the same precedence are listed in the same row in the above table. For example, + and - have the same precedence."
  },
  {
    "objectID": "op_exp-a.html#changing-order-of-evaluation",
    "href": "op_exp-a.html#changing-order-of-evaluation",
    "title": "Operators and Expressions",
    "section": "",
    "text": "To make the expressions more readable, we can use parentheses. For example, 2 + (3 * 4) is definitely easier to understand than 2 + 3 * 4 which requires knowledge of the operator precedences. As with everything else, the parentheses should be used reasonably (do not overdo it) and should not be redundant, as in (2 + (3 * 4)).\nThere is an additional advantage to using parentheses - it helps us to change the order of evaluation. For example, if you want addition to be evaluated before multiplication in an expression, then you can write something like (2 + 3) * 4."
  },
  {
    "objectID": "op_exp-a.html#associativity",
    "href": "op_exp-a.html#associativity",
    "title": "Operators and Expressions",
    "section": "",
    "text": "Operators are usually associated from left to right. This means that operators with the same precedence are evaluated in a left to right manner. For example, 2 + 3 + 4 is evaluated as (2 + 3) + 4."
  },
  {
    "objectID": "op_exp-a.html#expressions",
    "href": "op_exp-a.html#expressions",
    "title": "Operators and Expressions",
    "section": "",
    "text": "Example:\nlength = 5\nbreadth = 2\n\narea = length * breadth\nprint('Area is', area)\nprint('Perimeter is', 2 * (length + breadth))\nOutput:\nArea is 10\nPerimeter is 14\nHow It Works\nThe length and breadth of the rectangle are stored in variables by the same name. We use these to calculate the area and perimeter of the rectangle with the help of expressions. We store the result of the expression length * breadth in the variable area and then print it using the print function. In the second case, we directly use the value of the expression 2 * (length + breadth) in the print function.\nAlso, notice how Python pretty-prints the output. Even though we have not specified a space between 'Area is' and the variable area, Python puts it for us so that we get a clean nice output and the program is much more readable this way (since we don’t need to worry about spacing in the strings we use for output). This is an example of how Python makes life easy for the programmer."
  },
  {
    "objectID": "op_exp-a.html#round-built-in-function",
    "href": "op_exp-a.html#round-built-in-function",
    "title": "Operators and Expressions",
    "section": "",
    "text": "The built-in python function round returns an integer if ndigits (number of digits) is omitted. Otherwise the return value has the same type as the number provided as argument (if the number is an integer, round returns an integer, if the number is a float, round returns a float). This function is useful to return a float number rounded to the decimal places provided as the second argument when calling it. The syntax is round(number, ndigits)\nround(50.5555, 2)\nThe call above returns 50.56\nPython uses the IEEE 754 standard for rounding, called the banker’s rounding. So python rounds to the nearest even number if the fractional component of the number is halfway between two integers. The idea is that 50% of the numbers are rounded up and 50% down.\n&gt;&gt;&gt; round(50.5)\n50\n&gt;&gt;&gt; round(51.5)\n52\nNote that decimal fractions often cannot be represented exactly as a binary floating-point number, so the return value of round is not always what you’d expect (not a bug).\n&gt;&gt;&gt; round(4.675, 2)\n4.67\n&gt;&gt;&gt; round(4.665, 2)\n4.67\nIf you are curious, you can read more about floating point arithmetic."
  },
  {
    "objectID": "op_exp-a.html#summary",
    "href": "op_exp-a.html#summary",
    "title": "Operators and Expressions",
    "section": "",
    "text": "We have seen how to use operators, operands and expressions - these are the basic building blocks of any program. Next, we will see how to make use of these in our programs using statements."
  },
  {
    "objectID": "how-to-study.html",
    "href": "how-to-study.html",
    "title": "How to Study",
    "section": "",
    "text": "Learning how to code is like learning any skill, you need to practice frequently and in a systematic way. It’s like learning to play a musical instrument, or getting better at a sport, or learning how to drive and cook. You need to do it yourself, and you need to practice it on a daily basis.\n\nWhat do you need to succeed in this class?\nA willingness to:\n\ntry and fail\nget frustrated and bored\nbe curious about how things work\n\n\n\nCome to office hours prepared\nYou should come to office hours to get help when you are stuck, but you should try to work the assignment out on your own before seeking help.\nYou should not come to office hours to have the TA explain what to do.\nOnce you get help, and understand why you were stuck, you should solve the problem/assignment again on your own once you get back from office hours.\n\n\nPractice every day\nIn addition to the assignments you submit to gradescope, I also make available practice problems so you have plenty of programming problems to practice. And you should solve this on your own, multiple times.\nCoding is not about memorization – it’s about knowing how to think computationally. You will only learn how to do that by practicing.\nPracticing is not having your friend/AI tell you how to solve a problem. If you want to be a piano player, you have to play the piano yourself.\nUse a calendar and block out 45-60 minutes a day to practice your coding skills.\nThe university expectation is that you will spend 2-3 hours on out-of-class work for every 1 credit unit – so you are expected to spend 8-12 hours working on homework and studying for CSC 110 in addition to attending lectures, actively engaging in in-class-activities, and coming to your weekly lab session.\nSolve assignments, quizzes, exams, and practice problems again and again on paper and time yourself.\n\n\nTake breaks often\nDo not expect to put in 10 hours of work on one day to get your code to work. That’s not how coding works. You often need to allow your brain to process things across multiple days. Working at a problem for 5+ hours straight will get you frustrated, and you won’t be able to see where the bug is.\nIf you are feeling frustrated, take a break, walk away from the problem for a few hours. Ideally, go back to the problem after getting some sleep.\nThat is why it is important to start working on assignments early on.\n\n\nWhat is the role of the TAs?\n\nThe TAs are not responsible for debugging your code extensively with you, they are to give you some direction if you get stuck.\nThe TAs can go over concepts covered in class if you have specific questions. It is okay for you to ask TAs: “Can you explain the different between a for loop to get the indices in a list and a for loop to get the items from a list?” – It is not okay for you to ask TAs to go over an entire lecture with you. They are not private tutors."
  },
  {
    "objectID": "functions-a.html",
    "href": "functions-a.html",
    "title": "Intro to Functions",
    "section": "",
    "text": "Functions are reusable pieces of programs. They allow you to give a name to a block of statements, allowing you to run that block using the specified name anywhere in your program and any number of times. This is known as calling the function. We have already used many built-in functions such as len and range.\nThe function concept is probably the most important building block of any non-trivial software (in any programming language), so we will explore various aspects of functions in this chapter.\nFunctions are defined using the def keyword. After this keyword comes an identifier name for the function, followed by a pair of parentheses which may enclose some names of variables, and by the final colon that ends the line. Next follows the block of statements that are part of this function. An example will show that this is actually very simple:\nExample:\ndef say_hello():\n    # block belonging to the function\n    print('hello world')\n# End of function\n\nsay_hello()  # call the function\nsay_hello()  # call the function again\nOutput:\n\nhello world\nhello world\n\nHow It Works\nWe define a function called say_hello using the syntax as explained above. This function takes no parameters and hence there are no variables declared in the parentheses. Parameters to functions are just input to the function so that we can pass in different values to it and get back corresponding results.\nNotice that we can call the same function twice which means we do not have to write the same code again.\n\n\nA function can take parameters, which are values you supply to the function so that the function can do something utilizing those values. These parameters are just like variables except that the values of these variables are defined when we call the function and are already assigned values when the function runs.\nParameters are specified within the pair of parentheses in the function definition, separated by commas. When we call the function, we supply the values in the same way. Note the terminology used - the names given in the function definition are called parameters whereas the values you supply in the function call are called arguments.\nExample:\ndef print_add_10(value):\n    x = value + 10\n    print(x)\n# End of function\n\nprint_add_10(2)  # call the function with integer as a parameter\nprint_add_10(10)  # call the function again with different parameter\nOutput:\n\n12\n20\n\nHow It Works\nHere, we define a function called print_add_10 that uses one parameters called value. We create a new variable x that hold the evaluation of the value plus 10 and we printn the value in x.\nThe first time we call the function print_add_10, we directly supply 2 as an argument. In the second case, we call the function with the value 10 as an argument.\n\n\n\nWhen you declare variables inside a function definition, they are not related in any way to other variables with the same names used outside the function - i.e. variable names are local to the function. This is called the scope of the variable. All variables have the scope of the block they are declared in starting from the point of definition of the name.\nExample:\nx = 50\n\ndef func(x):\n    print('x is', x)\n    x = 2\n    print('Changed local x to', x)\n\n\nfunc(x)\nprint('x is still', x)\nOutput:\n\nx is 50\nChanged local x to 2\nx is still 50\n\nHow It Works\nThe first time that we print the value of the name x with the first line in the function’s body, Python uses the value of the parameter declared in the main block, above the function definition.\nNext, we assign the value 2 to x. The name x is local to our function. So, when we change the value of x in the function, the x defined in the main block remains unaffected.\nWith the last print statement, we display the value of x as defined in the main block, thereby confirming that it is actually unaffected by the local assignment within the previously called function.\n\n\n\nFor some functions, you may want to make some parameters optional and use default values in case the user does not want to provide values for them. This is done with the help of default argument values. You can specify default argument values for parameters by appending to the parameter name in the function definition the assignment operator (=) followed by the default value.\nNote that the default argument value should be a constant. More precisely, the default argument value should be immutable - this is explained in detail in later chapters. For now, just remember this.\nExample:\ndef say(message, times=1):\n    print(message * times)\n\nsay('Hello')\nsay('World', 5)\nOutput:\n\nHello\nWorldWorldWorldWorldWorld\n\nHow It Works\nThe function named say is used to print a string as many times as specified. If we don’t supply a value, then by default, the string is printed just once. We achieve this by specifying a default argument value of 1 to the parameter times.\nIn the first usage of say, we supply only the string and it prints the string once. In the second usage of say, we supply both the string and an argument 5 stating that we want to say the string message 5 times.\n\nCAUTION\nOnly those parameters which are at the end of the parameter list can be given default argument values i.e. you cannot have a parameter with a default argument value preceding a parameter without a default argument value in the function’s parameter list.\nThis is because the values are assigned to the parameters by position. For example,def func(a, b=5) is valid, but def func(a=5, b) is not valid.\n\n\n\n\nThe return statement is used to return from a function i.e. break out of the function. We can optionally return a value from the function as well.\nExample:\ndef add_10(value):\n    x = value + 10\n    return x\n# End of function\n\nresult = add_10(5)\nprint(result)\nOutput:\n\n15\n\nHow It Works\nThe add_10 function returns the parameter value added 10.\nNote that a return statement without a value is equivalent to return None. None is a special type in Python that represents nothingness. For example, it is used to indicate that a variable has no value if it has a value of None.\nEvery function implicitly contains a return None statement at the end unless you have written your own return statement. You can see this by running print(some_function()) where the function some_function does not use the return statement such as:\ndef some_function():\n    pass\nThe pass statement is used in Python to indicate an empty block of statements.\n\n\n\nWe have seen so many aspects of functions but note that we still haven’t covered all aspects of them."
  },
  {
    "objectID": "functions-a.html#function-parameters",
    "href": "functions-a.html#function-parameters",
    "title": "Intro to Functions",
    "section": "",
    "text": "A function can take parameters, which are values you supply to the function so that the function can do something utilizing those values. These parameters are just like variables except that the values of these variables are defined when we call the function and are already assigned values when the function runs.\nParameters are specified within the pair of parentheses in the function definition, separated by commas. When we call the function, we supply the values in the same way. Note the terminology used - the names given in the function definition are called parameters whereas the values you supply in the function call are called arguments.\nExample:\ndef print_add_10(value):\n    x = value + 10\n    print(x)\n# End of function\n\nprint_add_10(2)  # call the function with integer as a parameter\nprint_add_10(10)  # call the function again with different parameter\nOutput:\n\n12\n20\n\nHow It Works\nHere, we define a function called print_add_10 that uses one parameters called value. We create a new variable x that hold the evaluation of the value plus 10 and we printn the value in x.\nThe first time we call the function print_add_10, we directly supply 2 as an argument. In the second case, we call the function with the value 10 as an argument."
  },
  {
    "objectID": "functions-a.html#local-variables",
    "href": "functions-a.html#local-variables",
    "title": "Intro to Functions",
    "section": "",
    "text": "When you declare variables inside a function definition, they are not related in any way to other variables with the same names used outside the function - i.e. variable names are local to the function. This is called the scope of the variable. All variables have the scope of the block they are declared in starting from the point of definition of the name.\nExample:\nx = 50\n\ndef func(x):\n    print('x is', x)\n    x = 2\n    print('Changed local x to', x)\n\n\nfunc(x)\nprint('x is still', x)\nOutput:\n\nx is 50\nChanged local x to 2\nx is still 50\n\nHow It Works\nThe first time that we print the value of the name x with the first line in the function’s body, Python uses the value of the parameter declared in the main block, above the function definition.\nNext, we assign the value 2 to x. The name x is local to our function. So, when we change the value of x in the function, the x defined in the main block remains unaffected.\nWith the last print statement, we display the value of x as defined in the main block, thereby confirming that it is actually unaffected by the local assignment within the previously called function."
  },
  {
    "objectID": "functions-a.html#default-arguments",
    "href": "functions-a.html#default-arguments",
    "title": "Intro to Functions",
    "section": "",
    "text": "For some functions, you may want to make some parameters optional and use default values in case the user does not want to provide values for them. This is done with the help of default argument values. You can specify default argument values for parameters by appending to the parameter name in the function definition the assignment operator (=) followed by the default value.\nNote that the default argument value should be a constant. More precisely, the default argument value should be immutable - this is explained in detail in later chapters. For now, just remember this.\nExample:\ndef say(message, times=1):\n    print(message * times)\n\nsay('Hello')\nsay('World', 5)\nOutput:\n\nHello\nWorldWorldWorldWorldWorld\n\nHow It Works\nThe function named say is used to print a string as many times as specified. If we don’t supply a value, then by default, the string is printed just once. We achieve this by specifying a default argument value of 1 to the parameter times.\nIn the first usage of say, we supply only the string and it prints the string once. In the second usage of say, we supply both the string and an argument 5 stating that we want to say the string message 5 times.\n\nCAUTION\nOnly those parameters which are at the end of the parameter list can be given default argument values i.e. you cannot have a parameter with a default argument value preceding a parameter without a default argument value in the function’s parameter list.\nThis is because the values are assigned to the parameters by position. For example,def func(a, b=5) is valid, but def func(a=5, b) is not valid."
  },
  {
    "objectID": "functions-a.html#return-statement",
    "href": "functions-a.html#return-statement",
    "title": "Intro to Functions",
    "section": "",
    "text": "The return statement is used to return from a function i.e. break out of the function. We can optionally return a value from the function as well.\nExample:\ndef add_10(value):\n    x = value + 10\n    return x\n# End of function\n\nresult = add_10(5)\nprint(result)\nOutput:\n\n15\n\nHow It Works\nThe add_10 function returns the parameter value added 10.\nNote that a return statement without a value is equivalent to return None. None is a special type in Python that represents nothingness. For example, it is used to indicate that a variable has no value if it has a value of None.\nEvery function implicitly contains a return None statement at the end unless you have written your own return statement. You can see this by running print(some_function()) where the function some_function does not use the return statement such as:\ndef some_function():\n    pass\nThe pass statement is used in Python to indicate an empty block of statements."
  },
  {
    "objectID": "functions-a.html#summary",
    "href": "functions-a.html#summary",
    "title": "Intro to Functions",
    "section": "",
    "text": "We have seen so many aspects of functions but note that we still haven’t covered all aspects of them."
  },
  {
    "objectID": "project-8.html",
    "href": "project-8.html",
    "title": "Programming Project 8",
    "section": "",
    "text": "Programming Projects are to be submitted to gradescope.\nDue date: Thursday, November 07, 2024 at 9pm This programming project is an adaptation of Ben Dicken’s Spell Check Programming Assignment.\nYou should name the file spellcheck.py and have a function named correct_spelling to write out the ouput file."
  },
  {
    "objectID": "project-8.html#reading-in-misspellings.txt",
    "href": "project-8.html#reading-in-misspellings.txt",
    "title": "Programming Project 8",
    "section": "(1) Reading in misspellings.txt",
    "text": "(1) Reading in misspellings.txt\nCreate a function that will be responsible for opening up the misspellings file and reading in the information. The function can assume that the misspellings.txt file exists. The function should open the file, read the lines, and populate the misspellings dictionary, as described previously in this specification."
  },
  {
    "objectID": "project-8.html#replacing-words",
    "href": "project-8.html#replacing-words",
    "title": "Programming Project 8",
    "section": "(2) Replacing words",
    "text": "(2) Replacing words\nNext, work reading the input file and replacing misspelled words. At this point, don’t yet worry about capitalized words, or punctuation. Iterate through the contents of the input file, line-by-line and word-by-word. When a correctly-spelled word is encountered, print it out with a trailing space. When an incorrectly-spelled word is encountered, print out the correctly-spelled version instead."
  },
  {
    "objectID": "project-8.html#handle-punctuation-handle-capitalization",
    "href": "project-8.html#handle-punctuation-handle-capitalization",
    "title": "Programming Project 8",
    "section": "(3) Handle Punctuation / Handle Capitalization",
    "text": "(3) Handle Punctuation / Handle Capitalization\nYou might find one or the other of these easier or harder, so choose whichever you think you will be able to accomplish more quickly. Once you have one working, move to the other! Handling punctuation is extra credit."
  },
  {
    "objectID": "project-8.html#write-out-output-file",
    "href": "project-8.html#write-out-output-file",
    "title": "Programming Project 8",
    "section": "(4) Write out output file",
    "text": "(4) Write out output file\nYour function that writes out the output file should be named correct_spelling and the output file should have the output_ prefix. That means that if the original file was names words_1.txt, the output file should be named output_words_1.txt"
  },
  {
    "objectID": "project-8.html#example-1-no-punctuation-or-capitalized-words",
    "href": "project-8.html#example-1-no-punctuation-or-capitalized-words",
    "title": "Programming Project 8",
    "section": "Example 1 (no punctuation or capitalized words)",
    "text": "Example 1 (no punctuation or capitalized words)\nmisspellings.txt\n\ndatamic-&gt;dramatic\ndramati-&gt;dramatic\nelaphant-&gt;elephant\nelofent-&gt;elephant\nelaphent-&gt;elephant\nzooo-&gt;zoo\nzo-&gt;zoo\n\nwords_1.txt\n\njoe and his family went to the zoo the other day\nthe zooo had many animals including an elofent\nthe elaphant was being too dramati though\nafter they walked around joe left the zo\n\n\nif __name__ == '__main__':\n    spell_dict = read_spellings()\n    correct_spelling(\"words_1.txt\", spell_dict)\n\noutput_words_1.txt\n\njoe and his family went to the zoo the other day\nthe zoo had many animals including an elephant\nthe elephant was being too dramatic though\nafter they walked around joe left the zoo"
  },
  {
    "objectID": "project-8.html#example-2-with-punctuation-and-capitalized-words",
    "href": "project-8.html#example-2-with-punctuation-and-capitalized-words",
    "title": "Programming Project 8",
    "section": "Example 2 (with punctuation and capitalized words)",
    "text": "Example 2 (with punctuation and capitalized words)\nmisspellings.txt\n\nhereo-&gt;hero\nheroc-&gt;hero\nfluwe-&gt;flew\njumpedd-&gt;jumped\njimped-&gt;jumped\njumpped-&gt;jumped\nsavved-&gt;saved\nsived-&gt;saved\nsivved-&gt;saved\nsumprean-&gt;superman\nsumperan-&gt;superman\ndayy-&gt;day\nayy-&gt;day\n\nwords_2.txt\n\nThere once was a hero, named superman.\nSumperan, being the hero he is, jumped.\nAfter he jumped, he fluwe!\nThen, Sumprean savved the day.\n\n\nif __name__ == '__main__':\n    spell_dict = read_spellings()\n    correct_spelling(\"words_2.txt\", spell_dict)\n\noutput_words_2.txt\n\nThere once was a hero, named superman.\nSuperman, being the hero he is, jumped.\nAfter he jumped, he flew!\nThen, Superman saved the day."
  },
  {
    "objectID": "style.html",
    "href": "style.html",
    "title": "Style Guide",
    "section": "",
    "text": "Coding style refers to how you name your objects and functions, how you comment your code, how you use spacing throughout your code, etc. If your coding style is consistent, your code is easier to read and easier to debug as a result. Many companies enforce a specific coding style, and you won’t be able to push your code to the code base if your code does not pass the style check.\nThis style guide is a list of dos and don’ts for Python programs. In this course, style will be enforced (meaning you will be graded on it) only for programming projects.\n\nCSc 110: Style Guide\n\nFile Comments\nFile comments, also called header comments, are a required piece of your program. This belongs at the top of your code. Your name, the course title, the class section you are in, the assignment, and a brief description of your program should be located in the file comments. Below is an outline for reference.\n'''\nJane Doe\nCSC110\nProject -1\nThis program has a single function that computes the sum of two numbers.\n'''\n\nNote that three double-quotes surround the header comments (you can also use three single-quotes).\nThese are docstrings; they are utilized in Python to document your code.\nDocstrings should be organized and easy to read.\nRemember: you are writing code for others and your future self to read!\n\n\n\nFunction Comments\nEvery function created is required to have a function comment, including main. Function comments serve to describe the task the function performs. The function arguments and return should be included. Please follow the example below for reference.\ndef divide(x, y):\n    '''\n    This function returns the integer division of its two parameters.\n    Args:\n        x: the integer dividend.\n        y: the integer divisor.\n    Returns:\n        The integer division of x and y.\n    '''\n    return x // y\n\nNote the triple-quotes (docstrings) that surround the function comments.\nThe function comments are located inside the function they describe, before any code.\nFunction comments must contain a description of the function, the arguments, and the return value.\nThe description of parameters should include their types and purpose.\nThe description of the return value should include its type and what it represents.\nIf the function has no arguments or return, document that in the docstrings.\n\ndef func():\n    '''\n    This function prints the character char N times.\n    Args:\n        None.\n    Returns:\n        None.\n    '''\n    print(\"This is an example.\")\n\nThe template above should be followed when there are no arguments or return values in a function.\nPlease note that information about both arguments and return values are included in function comments, even if there are none in the function.\n\n\n\nIn-line Comments\nFor any line of code that is more complex (for example, a conditional statement or for loop), add an in-line comment before that line of code. In-line comments start with # and have a space after #:\ndef func(n):\n    '''\n    This function prints the character char N times.\n    Args:\n        None.\n    Returns:\n        None.\n    '''\n    print(\"This is an example.\")\n    \n    # checks if argument n is an even number\n    if n % 2 == 0:\n      print(\"even\")\nIf you need multiple likes of code, use line breaks, and start each line with # followed by a space. Remember that all lines in your code, including comments, should be 80 characters or less.\ndef func(numbers):\n    '''\n    This function prints the character char N times.\n    Args:\n        None.\n    Returns:\n        None.\n    '''\n    print(\"This is an example.\")\n    \n    # iterate over indices in numbers list backwards\n    # starting from the ending, all the all to zero\n    # with step -1\n    for i in range(len(numbers)-1, -1, -1):\n      # check if item at i position is even\n      if numbers[i] % 2 == 0:\n        numbers.pop(i) # remove even item at index i\nIf you need more information on when to comment your code, read this post on Best practices for writing code comments.\n\n\nOther formatting\n\nWhen formatting a docstring, follow the template above.\nDescription of the function should be first.\nA function’s description should describe the purpose of the function, not the implementation of it.\nArguments and information about them should follow the description of the function.\nThe return value is the last piece of information in the docstring.\n\n\n\nVariables and Line Length\nVariable names should follow typical Python style requirements. Variables should only consist of lower-case letters, numbers, and underscores. Variables should be indicative of what they represent. Below are examples of good variable naming and poor variable naming.\n# Good examples of variable names.\ncount = 1\nproduct = count*3\nword = \"Hello\"\nname = \"Zuko\"\nemployee_salary = \"70000\"\n\n# Poor examples of variable names.\nx = 1\n1proDUCT = count*3\nword_GREETING = \"Hello\"\nxyz = 2\n__name = \"Zuko\"\nemployeeSalary = \"70000\"\nSimilarly to function comments, code should be easy to read. This can be done by breaking pieces of code into groups. If several lines of code relate to the same task, put them together with no spaces inbetween and use spacing to separate them from other groupings.\nAll lines of code should be 80 characters or less. If there is a line of code that exceeds that length, it should be rewritten to be two statements. The backslash character (\\) can also be used to continue the statement onto the next line.\n\n\nReference\nThis guide is derived from Todd Proebsting’s CSc 110 style guide, which is very loosely based on Google’s Style Guide."
  },
  {
    "objectID": "palindrome.html",
    "href": "palindrome.html",
    "title": "Input from user",
    "section": "",
    "text": "There will be situations where your program has to interact with the user. For example, you would want to take input from the user and then print some results back. We can achieve this using the input() function and print function respectively.\nExample:\ndef reverse(text):\n    return text[::-1]\n\n\ndef is_palindrome(text):\n    return text == reverse(text)\n\n\nsomething = input(\"Enter text: \")\nif is_palindrome(something):\n    print(\"Yes, it is a palindrome\")\nelse:\n    print(\"No, it is not a palindrome\")\nOutput:\n\nEnter text: sir\nNo, it is not a palindrome\n\n$ python3 io_input.py\nEnter text: madam\nYes, it is a palindrome\n\n$ python3 io_input.py\nEnter text: racecar\nYes, it is a palindrome\n\nHow It Works\nWe use the slicing feature to reverse the text. We’ve already seen how we can make slices from sequences using the seq[a:b] code starting from position a to position b. We can also provide a third argument that determines the step by which the slicing is done. The default step is 1 because of which it returns a continuous part of the text. Giving a negative step, i.e., -1 will return the text in reverse.\nThe input() function takes a string as argument and displays it to the user. Then it waits for the user to type something and press the return key. Once the user has entered and pressed the return key, the input() function will then return that text the user has entered.\nWe take that text and reverse it. If the original text and reversed text are equal, then the text is a palindrome.\n\n\nChecking whether a text is a palindrome should also ignore punctuation, spaces and case. For example, “Rise to vote, sir.” is also a palindrome but our current program doesn’t say it is. Can you improve the above program to recognize this palindrome?\nIf you need a hint, the idea is that…1"
  },
  {
    "objectID": "palindrome.html#footnotes",
    "href": "palindrome.html#footnotes",
    "title": "Input from user",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUse a tuple (you can find a list of all punctuation marks here) to hold all the forbidden characters, then use the membership test to determine whether a character should be removed or not, i.e. forbidden = (!, ?, ., …).↩︎"
  },
  {
    "objectID": "project-9.html",
    "href": "project-9.html",
    "title": "Programming Project 9",
    "section": "",
    "text": "Programming Projects are to be submitted to gradescope.\nDue date: Thursday, November 14, 2024 at 9pm\nThis programming project is an adaptation of Ben Dicken’s Infographic Programming Assignment."
  },
  {
    "objectID": "project-9.html#reading-and-processing-the-file",
    "href": "project-9.html#reading-and-processing-the-file",
    "title": "Programming Project 9",
    "section": "(1) Reading and processing the file",
    "text": "(1) Reading and processing the file\nThe first step is to open an input file and read in all of the lines and strip the newlines off of the ends. To get the words, all you have to do is split each line on whitespace. To accomplish this, just call split() on each line string, with no argument. You can then append each individual word to a python list. You do not need to strip off punctuation from the words or normalize the cases.\nFor example, if you input file had the following content:\n\ntwo forks.\none knife.\ntwo glasses.\none plate.\none napkin.\nhis glasses.\nhis knife.\n\nThe words list should have the following content after processing the file:\n\nwords = ['two', 'forks.', 'one', 'knife.', 'two', 'glasses.', \\\n         'one', 'plate.', 'one', 'napkin.', 'his,' 'glasses.', 'his', 'knife.']"
  },
  {
    "objectID": "project-9.html#counting-words",
    "href": "project-9.html#counting-words",
    "title": "Programming Project 9",
    "section": "(2) Counting words",
    "text": "(2) Counting words\nOnce you have a list of all of the words from the file, you can count the occurrences. You should use a dictionary for this. Continuing from the example of the last step, the dictionary should have the following contents:\n\nword_counts = {'two':2, 'one':3, 'forks.':1, 'knife.':2, \\\n               'glasses.':2, 'plate.':1, 'napkin.':1, 'his':2}"
  },
  {
    "objectID": "project-9.html#finding-most-occurrences",
    "href": "project-9.html#finding-most-occurrences",
    "title": "Programming Project 9",
    "section": "(3) Finding most occurrences",
    "text": "(3) Finding most occurrences\nNext, you can find the small, medium, and large words that occur the most. In the example, it would be one for small, knife. for medium, and glasses. for large. You can do this by iterating through the key and value pairs in the word_counts dictionary, and keeping track of which has the highest count."
  },
  {
    "objectID": "project-9.html#counting-capitalized",
    "href": "project-9.html#counting-capitalized",
    "title": "Programming Project 9",
    "section": "(4) Counting Capitalized",
    "text": "(4) Counting Capitalized\nNext, compute how many unique capitalized and non-capitalized. You can do this by getting the keys of the word_counts dictionary as a list, and then looping through them all."
  },
  {
    "objectID": "project-9.html#counting-punctuated",
    "href": "project-9.html#counting-punctuated",
    "title": "Programming Project 9",
    "section": "(5) Counting Punctuated",
    "text": "(5) Counting Punctuated\nCompute how many unique punctuated and non-punctuated words there are. Use a similar process as you did for step (4)."
  },
  {
    "objectID": "project-9.html#writing-the-information-file",
    "href": "project-9.html#writing-the-information-file",
    "title": "Programming Project 9",
    "section": "(6) Writing the information file",
    "text": "(6) Writing the information file\nYou should write a text file with three sections on the information you compiled. Here’s an example of what the file should look like for the contents of the file in section (1).\nYour output file name should be the original file name plus \"_results\" – for example, if the file name is \"foo.txt\" the output file you create should be names \"foo_results.txt\"\n\nTotal number of unique words: 8\nMost frequent words by size:\n* Small: one\n* Medium: knife.\n* Large: glasses.\n\nLength:\n* Small: 3 (37.5%)\n* Medium: 4 (50.0%)\n* Large: 1 (12.5%)\n###################%%%%%%%%%%%%%%%%%%%%%%%%%******\n\nCapitalization:\n* Capitalized: 0 (0.0%)\n* Non-capitalized: 8 (100.0%)\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nPunctuation:\n* Punctuated: 5 (62.5%)\n* Non-punctuated: 3 (37.5%)\n###############################%%%%%%%%%%%%%%%%%%%\n\nTo calculate how many characters in each bar use the formula:\n\n(category_item_count/total_item_count) * 50\n\nNote for the percentages please keep two decimal places. For example, 3/8 in percentage should be 37.5% and 3/9 should be 33.33%."
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "More on Functions",
    "section": "",
    "text": "As previously discussed, functions are reusable pieces of programs. They allow you to give a name to a block of statements, allowing you to run that block using the specified name anywhere in your program and any number of times. This is known as calling the function.\nI’d like to emphasize that the function concept is probably the most important building block of any non-trivial software (in any programming language), so we will keep exploring various aspects of functions in this chapter.\nIf you need a refresher on the basics of functions, go back to the first functions reading.\n\n\nLike we discussed before, comments are very important for documenting your code. Each function should have its function specified in your function comment.\nExample:\ndef circle_area(radius):\n  '''\n  This function calculates the area of a circle,\n  given a radius.\n  Parameters: \n  * radius: integer or float\n  It returns a float value representing the area,\n  of the circle with the provided radius.\n  '''\n  # compute the area of a circle\n  area = 3.1415 * radius**2\n  return area\n\n\nresult = circle_area(radius=4)\nprint(\"The area of a circle of radius 4 is\", result)\nOutput:\n\nThe area of a circle of radius 4 is 50.264\n\nWhen you create a string literal right after a function definition, as seen in the example above, that is also called a docstring. Docstrings are attributes that can be retrieved using the __doc__ method as shown in the example below.\nExample:\ndef circle_area(radius):\n  '''\n  This function calculates the area of a circle,\n  given a radius.\n  Parameters: \n  * radius: integer or float\n  It returns a float value representing the area,\n  of the circle with the provided radius.\n  '''\n  # compute the area of a circle\n  area = 3.1415 * radius**2\n  return area\n\n\nprint(circle_area.__doc__)\nOutput:\n\n  This function calculates the area of a circle,\n  given a radius.\n  Parameters: \n  * radius: integer or float\n  It returns a float value representing the area,\n  of the circle with the provided radius.\n\nYou can also get docstrings from built-in functions:\nExample:\nprint(print.__doc__)\nOutput:\n\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\n\n\n\n\nIf you have some functions with many parameters and you want to specify only some of them, then you can give values for such parameters by naming them - this is called keyword arguments - we use the name (keyword) instead of the position (which we have been using all along) to specify the arguments to the function.\nThere are two advantages - one, using the function is easier since we do not need to worry about the order of the arguments. Two, we can give values to only those parameters to which we want to, provided that the other parameters have default argument values.\ndef func(a, b=5, c=10):\n    print('a is', a, 'and b is', b, 'and c is', c)\n\nfunc(3, 7)\nfunc(25, c=24)\nfunc(c=50, a=100)\nOutput:\n\na is 3 and b is 7 and c is 10\na is 25 and b is 5 and c is 24\na is 100 and b is 5 and c is 50\n\nHow It Works\nThe function named func has one parameter without a default argument value, followed by two parameters with default argument values.\nIn the first usage, func(3, 7), the parameter a gets the value 3, the parameter b gets the value 7 and c gets the default value of 10.\nIn the second usage func(25, c=24), the variable a gets the value of 25 due to the position of the argument. Then, the parameter c gets the value of 24 due to naming i.e. keyword arguments. The variable b gets the default value of 5.\nIn the third usage func(c=50, a=100), we use keyword arguments for all specified values. Notice that we are specifying the value for parameter c before that for a even though a is defined before c in the function definition.\n\n\n\nWe have seen so many aspects of functions but note that we still haven’t covered all aspects of them. However, we have already covered most of what you’ll use regarding Python functions on an everyday basis."
  },
  {
    "objectID": "functions.html#function-comments",
    "href": "functions.html#function-comments",
    "title": "More on Functions",
    "section": "",
    "text": "Like we discussed before, comments are very important for documenting your code. Each function should have its function specified in your function comment.\nExample:\ndef circle_area(radius):\n  '''\n  This function calculates the area of a circle,\n  given a radius.\n  Parameters: \n  * radius: integer or float\n  It returns a float value representing the area,\n  of the circle with the provided radius.\n  '''\n  # compute the area of a circle\n  area = 3.1415 * radius**2\n  return area\n\n\nresult = circle_area(radius=4)\nprint(\"The area of a circle of radius 4 is\", result)\nOutput:\n\nThe area of a circle of radius 4 is 50.264\n\nWhen you create a string literal right after a function definition, as seen in the example above, that is also called a docstring. Docstrings are attributes that can be retrieved using the __doc__ method as shown in the example below.\nExample:\ndef circle_area(radius):\n  '''\n  This function calculates the area of a circle,\n  given a radius.\n  Parameters: \n  * radius: integer or float\n  It returns a float value representing the area,\n  of the circle with the provided radius.\n  '''\n  # compute the area of a circle\n  area = 3.1415 * radius**2\n  return area\n\n\nprint(circle_area.__doc__)\nOutput:\n\n  This function calculates the area of a circle,\n  given a radius.\n  Parameters: \n  * radius: integer or float\n  It returns a float value representing the area,\n  of the circle with the provided radius.\n\nYou can also get docstrings from built-in functions:\nExample:\nprint(print.__doc__)\nOutput:\n\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream."
  },
  {
    "objectID": "functions.html#keyword-arguments",
    "href": "functions.html#keyword-arguments",
    "title": "More on Functions",
    "section": "",
    "text": "If you have some functions with many parameters and you want to specify only some of them, then you can give values for such parameters by naming them - this is called keyword arguments - we use the name (keyword) instead of the position (which we have been using all along) to specify the arguments to the function.\nThere are two advantages - one, using the function is easier since we do not need to worry about the order of the arguments. Two, we can give values to only those parameters to which we want to, provided that the other parameters have default argument values.\ndef func(a, b=5, c=10):\n    print('a is', a, 'and b is', b, 'and c is', c)\n\nfunc(3, 7)\nfunc(25, c=24)\nfunc(c=50, a=100)\nOutput:\n\na is 3 and b is 7 and c is 10\na is 25 and b is 5 and c is 24\na is 100 and b is 5 and c is 50\n\nHow It Works\nThe function named func has one parameter without a default argument value, followed by two parameters with default argument values.\nIn the first usage, func(3, 7), the parameter a gets the value 3, the parameter b gets the value 7 and c gets the default value of 10.\nIn the second usage func(25, c=24), the variable a gets the value of 25 due to the position of the argument. Then, the parameter c gets the value of 24 due to naming i.e. keyword arguments. The variable b gets the default value of 5.\nIn the third usage func(c=50, a=100), we use keyword arguments for all specified values. Notice that we are specifying the value for parameter c before that for a even though a is defined before c in the function definition."
  },
  {
    "objectID": "functions.html#summary",
    "href": "functions.html#summary",
    "title": "More on Functions",
    "section": "",
    "text": "We have seen so many aspects of functions but note that we still haven’t covered all aspects of them. However, we have already covered most of what you’ll use regarding Python functions on an everyday basis."
  },
  {
    "objectID": "project-12.html",
    "href": "project-12.html",
    "title": "Programming Project 12 (BONUS)",
    "section": "",
    "text": "Programming Projects are to be submitted to gradescope.\nDue date: Wednesday, December 11, 2024 at 9pm\nThis programming project is an adaptation of Ben Dicken’s Encrypter / Decrypter Programming Assignment."
  },
  {
    "objectID": "project-12.html#encrypter",
    "href": "project-12.html#encrypter",
    "title": "Programming Project 12 (BONUS)",
    "section": "Encrypter",
    "text": "Encrypter\nThe first program you will write shall be named encrypter.py. The job of this program will be to encrypt (“mix” or “shuffle”) the lines of a text file, but do it in such a way that it can be un-done later with a separate program (which you will also write).\nWhen run, your program will accept as argument a file name to encrypt. This program will then run its encrypting (mixing) algorithm on the text file named file_name. It will save the encrypted version of the text file to a file named encrypted.txt.\nYour program will encrypt an input file by re-arranging the lines of the input file, based on indexes retrieved from calling randint. For example, to encrypt a file named sample.txt that looks like this:\n|'''''|\n| 0 0 |\n|  ^  |\n|  -  |\n ----- \n   # \n#######\n  ###\n #   #\n %   %\n\nAfter running, encrypted.txt will have the following contents:\n| 0 0 |\n %   %\n#######\n   # \n|'''''|\n|  ^  |\n  ###\n|  -  |\n #   #\n ----- \n\nAll of the same lines from the original file exist in this file, but the order is not the same.\nWhenever encrypter.py runs, it will also write an index (key) file. This file will contain the corresponding indexes of each line in the encrypted file. Given the example above, index.txt would look like this:\n2\n10\n7\n6\n1\n3\n8\n4\n9\n5\n\nThe number on each line of the file is the line number that each shuffled line was on in the original program. For example: 2 is on the first line. This means that the first line of the encrypted file was originally on line 2 of the input file. 10 is on the second line. This means that the second line of the encrypted file was originally on line 10 of the input file.\nWithout the index.txt file, another program or a human would not know how to decrypt the encrypted.txt file. If a human or program has both the encrypted file and the index file, it can be decrypted systematically. Thus the index file works like a secret “key” for the program. Whoever has access to both the index file and the encrypted text can decrypt the encrypted text."
  },
  {
    "objectID": "project-12.html#decrypter",
    "href": "project-12.html#decrypter",
    "title": "Programming Project 12 (BONUS)",
    "section": "Decrypter",
    "text": "Decrypter\nAfter writing encrypter.py, you are to write a related program named decrypter.py which will take the name of a text file and index (key) file, and then it will decrypt the text. The program will read in these two files, and using the information stored within them, it will put the contents back in the original order. The decrypted file should be saved to a file named decrypted.txt\nYou should use lists and the indexes from the index file to help with getting the lines back in the correct order.\nThere will be multiple examples of running this program at the end of this specification. Make sure to test your code carefully using the tool!"
  },
  {
    "objectID": "project-12.html#test-cases",
    "href": "project-12.html#test-cases",
    "title": "Programming Project 12 (BONUS)",
    "section": "Test cases",
    "text": "Test cases\n\nsample.txt\npoem.txt\nfew-steps.txt\nmany-steps.txt\n\nCall for encrypter.py:\n\nif __name__ == \"__main__\":\n    encrypt_file(\"sample.txt\")\n\nCall for decrypter.py:\n\nif __name__ == \"__main__\":\n  decrypt_file(\"encrypted.txt\", \"index.txt\")"
  },
  {
    "objectID": "slides-16-01.html#announcements",
    "href": "slides-16-01.html#announcements",
    "title": "final exam review (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nNo lecture this Wednesday, me and TAs will be here (Gittings 129b) to answer questions.\nFinal exam will be on this Friday May 03, 6:00 - 8:00pm in ENR2 N120.\nBring your photo ID\nLast day of office hour is May 1st."
  },
  {
    "objectID": "slides-16-01.html#attendance",
    "href": "slides-16-01.html#attendance",
    "title": "final exam review (class slides)",
    "section": "Attendance",
    "text": "Attendance\nGo to gradescope and answer attendance question."
  },
  {
    "objectID": "slides-16-01.html#midterm-3---question-5",
    "href": "slides-16-01.html#midterm-3---question-5",
    "title": "final exam review (class slides)",
    "section": "Midterm 3 - question 5",
    "text": "Midterm 3 - question 5\nWrite a function called matches that takes two string arguments, s1 and s2, which you may assume have equal length. The function should return a string that is the same length as s1 and s2.\nIf the corresponding characters in s1 and s2 are the same, then the corresponding character in the result is that character. If they are different, then the corresponding character in the result is \"*\".\n\nassert matches(\"abc\", \"abc\") == \"abc\"\nassert matches(\"abc\", \"xyz\") == \"***\"\nassert matches(\"abcd\", \"cbxe\") == \"*b**\"\nassert matches(\"\", \"\") == \"\""
  },
  {
    "objectID": "slides-16-01.html#midterm-3---question-5-wrong-solution",
    "href": "slides-16-01.html#midterm-3---question-5-wrong-solution",
    "title": "final exam review (class slides)",
    "section": "Midterm 3 - question 5 wrong solution",
    "text": "Midterm 3 - question 5 wrong solution\n\ndef matches(s1, s2):\n    result = \"\"\n    for char in s1:\n        if char in s2:\n            result += char\n        else:\n            result += \"*\"\n    return result\n\ndef main():\n  assert matches(\"abc\", \"abc\") == \"abc\"\n  assert matches(\"abc\", \"xyz\") == \"***\"\n  assert matches(\"abcd\", \"cbxe\") == \"*b**\" # Will fail this test case\n  assert matches(\"\", \"\") == \"\"\n\nmain()"
  },
  {
    "objectID": "slides-16-01.html#midterm-3---question-5-solution",
    "href": "slides-16-01.html#midterm-3---question-5-solution",
    "title": "final exam review (class slides)",
    "section": "Midterm 3 - question 5 solution",
    "text": "Midterm 3 - question 5 solution\n\ndef matches(s1, s2):\n    result = \"\"\n    for index in range(len(s1)):\n        if s1[index] == s2[index]:\n            result += s1[index]\n        else:\n            result += \"*\"\n    return result\n\ndef main():\n  assert matches(\"abc\", \"abc\") == \"abc\"\n  assert matches(\"abc\", \"xyz\") == \"***\"\n  assert matches(\"abcd\", \"cbxe\") == \"*b**\"\n  assert matches(\"\", \"\") == \"\"\n\nmain()"
  },
  {
    "objectID": "slides-16-01.html#midterm-3---question-6",
    "href": "slides-16-01.html#midterm-3---question-6",
    "title": "final exam review (class slides)",
    "section": "Midterm 3 - question 6",
    "text": "Midterm 3 - question 6\nGiven code for bubble sort:\n\ndef bubble_sort(items):\n  swapped = False\n  end = len(items)-1\n  while not swapped:\n    swapped = True\n    for i in range(end):\n      if items[i] &gt; items[i+1]:\n        items[i], items[i+1] = items[i+1], items[i]\n        swapped = False\n    end -= 1\n\nHow many sweeps and swaps of [30, 13, 5, 1, 14]?"
  },
  {
    "objectID": "slides-16-01.html#midterm-3---question-6-solution",
    "href": "slides-16-01.html#midterm-3---question-6-solution",
    "title": "final exam review (class slides)",
    "section": "Midterm 3 - question 6 solution",
    "text": "Midterm 3 - question 6 solution\n1st sweep:\n\n1st swap: [13, 30, 5, 1, 14]\n2nd swap: [13, 5, 30, 1, 14]\n3rd swap: [13, 5, 1, 30, 14]\n4th swap: [13, 5, 1, 14, 30]\n\n2nd sweep:\n\n5th swap: [5, 13, 1, 14, 30]\n6th swap: [5, 1, 13, 14, 30]"
  },
  {
    "objectID": "slides-16-01.html#midterm-3---question-6-solution-continued",
    "href": "slides-16-01.html#midterm-3---question-6-solution-continued",
    "title": "final exam review (class slides)",
    "section": "Midterm 3 - question 6 solution (continued)",
    "text": "Midterm 3 - question 6 solution (continued)\n3rd sweep:\n\n7th swap: [1, 5, 13, 14, 30]\n\n4th sweep:\nList already sorted, no more swaps\n\n4 sweeps and 7 swaps"
  },
  {
    "objectID": "slides-16-01.html#midterm-3---question-8-bonus",
    "href": "slides-16-01.html#midterm-3---question-8-bonus",
    "title": "final exam review (class slides)",
    "section": "Midterm 3 - question 8 (Bonus)",
    "text": "Midterm 3 - question 8 (Bonus)\nWrite python code (multiple functions) that given a list of lists of integers as argument, it mutates the list by removing all prime numbers from each sublist.\n\nif __name__ == \"__main__\":\n  original_list = [[2, 3, 4, 4], [5, 7, 40, 50, 11, 13, 20], [17, 19, 23]]\n  remove_primes(original_list)\n  assert original_list == [[4, 4], [40, 50, 20], []]"
  },
  {
    "objectID": "slides-16-01.html#midterm-3---question-8-solution",
    "href": "slides-16-01.html#midterm-3---question-8-solution",
    "title": "final exam review (class slides)",
    "section": "Midterm 3 - question 8 solution",
    "text": "Midterm 3 - question 8 solution\n\ndef is_prime(number):\n    if number == 1:\n         return False\n    # If num is divisible by any number between 2 and n / 2, it is not prime\n    for denominator in range(2, int(number/2 + 1)):\n          if number % denominator == 0:\n               return False\n    return True\n\ndef remove_primes(lists):\n    for sublist in lists:\n        for i in range(len(sublist)-1, -1, -1):\n            if is_prime(sublist[i]):\n                sublist.pop(i)\n    return lists\n  \nif __name__ == \"__main__\":\n  original_list = [[2, 3, 4, 4], [5, 7, 40, 50, 11, 13, 20], [17, 19, 23]]\n  remove_primes(original_list)\n  assert original_list == [[4, 4], [40, 50, 20], []]"
  },
  {
    "objectID": "slides-04-01.html#review-of-previous-expressions",
    "href": "slides-04-01.html#review-of-previous-expressions",
    "title": "More expressions (class slides)",
    "section": "Review of previous expressions",
    "text": "Review of previous expressions\nEvaluate the expressions below:\n\n4 * 4 / 2 % 2\n( 2 + 3 ) / ( 2 - 1.5)\n3**3 // 7\n5**2 + 25**0.5"
  },
  {
    "objectID": "slides-04-01.html#review-of-previous-expressions-1",
    "href": "slides-04-01.html#review-of-previous-expressions-1",
    "title": "More expressions (class slides)",
    "section": "Review of previous expressions",
    "text": "Review of previous expressions\nEvaluate the expressions below:\n\n4 * 4 / 2 % 2\n\n0.0\n\n\n\n( 2 + 3 ) / ( 2 - 1.5)\n\n10.0\n\n\n\n3**3 // 7\n\n3\n\n\n\n5**2 + 25**0.5\n\n30.0"
  },
  {
    "objectID": "slides-04-01.html#comparisons",
    "href": "slides-04-01.html#comparisons",
    "title": "More expressions (class slides)",
    "section": "Comparisons",
    "text": "Comparisons\n\nWhat will be the result of the following expressions:\n\n\n8 == 7\n8 &lt; 7\n8 &gt; 7\n\n\nWhat are the other comparison operators?"
  },
  {
    "objectID": "slides-04-01.html#comparisons-1",
    "href": "slides-04-01.html#comparisons-1",
    "title": "More expressions (class slides)",
    "section": "Comparisons",
    "text": "Comparisons\nExpressions with comparisons operators are evaluated to True or False\n\n== equal\n!= different\n&gt;= greater or equal\n&gt; greater\n&lt;= less or equal\n&lt; less"
  },
  {
    "objectID": "slides-04-01.html#write-a-function",
    "href": "slides-04-01.html#write-a-function",
    "title": "More expressions (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is odd and it takes one integer argument n\nIt returns True if n is odd, False if n is even\n\n\nprint( odd(10) ) # False\nprint( odd(5) ) # True\nprint( odd(0) ) # False"
  },
  {
    "objectID": "slides-04-01.html#write-a-function-solution",
    "href": "slides-04-01.html#write-a-function-solution",
    "title": "More expressions (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef odd(n):\n  return n % 2 == 1\n\ndef main():\n  print( odd(10) ) # False\n  print( odd(5) ) # True\n  print( odd(0) ) # False\n  \nmain()\n\nFalse\nTrue\nFalse"
  },
  {
    "objectID": "slides-04-01.html#arithmetic-vs-comparison-operators",
    "href": "slides-04-01.html#arithmetic-vs-comparison-operators",
    "title": "More expressions (class slides)",
    "section": "Arithmetic vs Comparison Operators",
    "text": "Arithmetic vs Comparison Operators\nArithmetic Operators:\n\n(expressions...), **, *, /, //, %, +, -\n\nComparison Operators:\n\n==, !=, &gt;=, &gt;, &lt;=, &lt;\n\nOrder of operations: arithmetic operators come before comparison operators."
  },
  {
    "objectID": "slides-04-01.html#evaluate-the-expressions",
    "href": "slides-04-01.html#evaluate-the-expressions",
    "title": "More expressions (class slides)",
    "section": "Evaluate the expressions",
    "text": "Evaluate the expressions\n\n3**2 &lt; 25**0.5\n9 % 3 == 8 % 2\n10 // 3 &gt; 9 // 3\n14 % 2 != 15 % 2"
  },
  {
    "objectID": "slides-04-01.html#evaluate-the-expressions-1",
    "href": "slides-04-01.html#evaluate-the-expressions-1",
    "title": "More expressions (class slides)",
    "section": "Evaluate the expressions",
    "text": "Evaluate the expressions\n\n3**2 &lt; 25**0.5\n\nFalse\n\n\n\n9 % 3 == 8 % 2\n\nTrue\n\n\n\n10 // 3 &gt; 9 // 3\n\nFalse\n\n\n\n14 % 2 != 15 % 2\n\nTrue"
  },
  {
    "objectID": "slides-04-01.html#not",
    "href": "slides-04-01.html#not",
    "title": "More expressions (class slides)",
    "section": "not",
    "text": "not\n\n\n\nExpression\nResult\n\n\n\n\nnot True\nFalse\n\n\nnot False\nTrue"
  },
  {
    "objectID": "slides-04-01.html#and",
    "href": "slides-04-01.html#and",
    "title": "More expressions (class slides)",
    "section": "and",
    "text": "and\n\n\n\nExpression\nResult\n\n\n\n\nTrue and True\nTrue\n\n\nFalse and True\nFalse\n\n\nTrue and False\nFalse\n\n\nFalse and False\nFalse"
  },
  {
    "objectID": "slides-04-01.html#or",
    "href": "slides-04-01.html#or",
    "title": "More expressions (class slides)",
    "section": "or",
    "text": "or\n\n\n\nExpression\nResult\n\n\n\n\nTrue or True\nTrue\n\n\nFalse or True\nTrue\n\n\nTrue or False\nTrue\n\n\nFalse or False\nFalse"
  },
  {
    "objectID": "slides-04-01.html#and-or-not",
    "href": "slides-04-01.html#and-or-not",
    "title": "More expressions (class slides)",
    "section": "and, or, not",
    "text": "and, or, not\n\nWhat will be the result of the following expressions:\n\n\nnot True\n\nTrue and True\nTrue or True\n\nFalse and True\nFalse or True\n\nFalse and False\nFalse or False"
  },
  {
    "objectID": "slides-04-01.html#and-or-not-1",
    "href": "slides-04-01.html#and-or-not-1",
    "title": "More expressions (class slides)",
    "section": "and, or, not",
    "text": "and, or, not\n\nWhat will be the result of the following expressions:\n\n\nnot True\n\nFalse\n\n\n\nTrue and True\n\nTrue\n\n\n\nTrue or True\n\nTrue\n\n\n\nFalse and True\n\nFalse\n\n\n\nFalse or True\n\nTrue\n\n\n\nFalse and False\n\nFalse\n\n\n\nFalse or False\n\nFalse"
  },
  {
    "objectID": "slides-04-01.html#evaluation-order",
    "href": "slides-04-01.html#evaluation-order",
    "title": "More expressions (class slides)",
    "section": "Evaluation order",
    "text": "Evaluation order\n\n(expressions...)\n** : Exponentiation\n*, /, //, % : Multiplication, Division, Floor Division and Remainder\n+, - : Addition and subtraction\n&lt;, &lt;=, &gt;, &gt;=, !=, == : Comparisons\nnot x : Boolean NOT\nand : Boolean AND\nor : Boolean OR"
  },
  {
    "objectID": "slides-04-01.html#evaluate-the-expressions-2",
    "href": "slides-04-01.html#evaluate-the-expressions-2",
    "title": "More expressions (class slides)",
    "section": "Evaluate the expressions",
    "text": "Evaluate the expressions\n\nnot 2**3 == 8 and 4 % 2 == 0\n25*0.5 &gt; 5**2 or 4 &lt;= 2**2\n4 % 2 == 0 or 4 // 0 == 0\n4 % 2 != 1\nnot 0\nnot 1"
  },
  {
    "objectID": "slides-04-01.html#evaluate-the-expressions-3",
    "href": "slides-04-01.html#evaluate-the-expressions-3",
    "title": "More expressions (class slides)",
    "section": "Evaluate the expressions",
    "text": "Evaluate the expressions\n\nnot 2**3 == 8 and 4 % 2 == 0\n\nFalse\n\n\n\n25*0.5 &gt; 5**2 or 4 &lt;= 2**2\n\nTrue\n\n\n\n4 % 2 == 0 or 4 // 0 == 0\n\nTrue\n\n\n\n4 % 2 != 1\n\nTrue\n\n\n\nnot 0\n\nTrue\n\n\n\nnot 1\n\nFalse"
  },
  {
    "objectID": "slides-04-03.html#if-elif-else",
    "href": "slides-04-03.html#if-elif-else",
    "title": "if elif else statements (class slides)",
    "section": "if elif else",
    "text": "if elif else\nWhile the if condition is required, the elif and else statements are not.\nelif is saying ‘if the previous conditions were not true, then try this condition’. It forces the cases to be mutually exclusive.\nif conditionA:\n    statements\nelif conditionB:\n    statements\nelif conditionC:\n    statements\nelse:\n    statements"
  },
  {
    "objectID": "slides-04-03.html#if-elif-else-1",
    "href": "slides-04-03.html#if-elif-else-1",
    "title": "if elif else statements (class slides)",
    "section": "if elif else",
    "text": "if elif else\nCompare the two functions\n\ndef func_one(n):\n  message = \"\"\n  if n % 3 == 0:\n    message += \"Fizz\"\n  if n % 5 == 0:  # n % 5 == 0 is independent from n % 3 == 0\n    message += \"Buzz\" \n  return message\n\ndef func_two(n):\n  message = \"\"\n  if n % 3 == 0:\n    message += \"Fizz\"\n  elif n % 5 == 0:  # n % 5 == 0 only runs when n % 3 == 0 is False\n    message += \"Buzz\"\n  return message\n\ndef main():\n  print(func_one(15), func_two(15))\n  \nmain()\n\nFizzBuzz Fizz"
  },
  {
    "objectID": "slides-04-03.html#write-a-function",
    "href": "slides-04-03.html#write-a-function",
    "title": "if elif else statements (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a function that does the following:\n\nIts name is max_of_two\nIt takes two numeric arguments\nIt returns the highest value\n\nTest cases\n\nprint( max_of_two(-1, 3) ) # 3\nprint( max_of_two(-1, -3) ) # -1\nprint( max_of_two(5, 5) ) # 5"
  },
  {
    "objectID": "slides-04-03.html#write-a-function-solution",
    "href": "slides-04-03.html#write-a-function-solution",
    "title": "if elif else statements (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef max_of_two(x, y):\n  if x &gt;= y:\n    return x\n  else:\n    return y\n\ndef main():\n  print( max_of_two(-1, 3) ) # 3\n  print( max_of_two(-1, -3) ) # -1\n  print( max_of_two(5, 5) ) # 5\n\nmain()\n\n3\n-1\n5"
  },
  {
    "objectID": "slides-04-03.html#write-a-function-1",
    "href": "slides-04-03.html#write-a-function-1",
    "title": "if elif else statements (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a function that does the following:\n\nIts name is max_of_three\nIt takes three numeric arguments\nIt returns the highest value\n\nTest cases\n\nprint( max_of_three(-1, 3, 3) ) # 3\nprint( max_of_three(-1, -3, 0) ) # 0\nprint( max_of_three(5, 5, 10) ) # 10"
  },
  {
    "objectID": "slides-04-03.html#write-a-function-solution-1",
    "href": "slides-04-03.html#write-a-function-solution-1",
    "title": "if elif else statements (class slides)",
    "section": "Write a function – solution 1",
    "text": "Write a function – solution 1\n\ndef max_of_three(x, y, z):\n  if x &gt;= y and x &gt;= z:\n    return x\n  elif y &gt;= x and y &gt;= z:\n    return y\n  else:\n    return z\n\ndef main():\n  print( max_of_three(-1, 3, 3) ) # 3\n  print( max_of_three(-1, -3, 0) ) # 0\n  print( max_of_three(5, 5, 10) ) # 10\n\nmain()\n\n3\n0\n10"
  },
  {
    "objectID": "slides-04-03.html#write-a-function-solution-2",
    "href": "slides-04-03.html#write-a-function-solution-2",
    "title": "if elif else statements (class slides)",
    "section": "Write a function – solution 2",
    "text": "Write a function – solution 2\n\ndef max_of_three(x, y, z):\n  max_value = x\n  \n  if y &gt;= max_value:\n    max_value = y\n    \n  if z &gt;= max_value:\n    max_value = z\n    \n  return max_value\n\ndef main():\n  print( max_of_three(-1, 3, 3) ) # 3\n  print( max_of_three(-1, -3, 0) ) # 0\n  print( max_of_three(5, 5, 10) ) # 10\n\nmain()\n\n3\n0\n10"
  },
  {
    "objectID": "slides-04-03.html#write-a-function-solution-3",
    "href": "slides-04-03.html#write-a-function-solution-3",
    "title": "if elif else statements (class slides)",
    "section": "Write a function – solution 3",
    "text": "Write a function – solution 3\n\ndef max_of_two(x, y):\n  if x &gt;= y:\n    return x\n  else:\n    return y\n\ndef max_of_three(x, y, z):\n  max_x_y = max_of_two(x, y)\n  return max_of_two(max_x_y, z)\n\ndef main():\n  print( max_of_three(-1, 3, 3) ) # 3\n  print( max_of_three(-1, -3, 0) ) # 0\n  print( max_of_three(5, 5, 10) ) # 10\n\nmain()\n\n3\n0\n10"
  },
  {
    "objectID": "slides-04-03.html#quiz-04",
    "href": "slides-04-03.html#quiz-04",
    "title": "if elif else statements (class slides)",
    "section": "Quiz 04",
    "text": "Quiz 04\n\n\ncurrent time\n\n\n\n\n\n\nYou have 10 minutes to complete the quiz.\nNo need to write main() function."
  },
  {
    "objectID": "slides-04-03.html#write-a-function-2",
    "href": "slides-04-03.html#write-a-function-2",
    "title": "if elif else statements (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a function that does the following:\n\nIts name is average_of_highest\nIt has three numeric parameters: x, y and z\nIt returns the average of the two highest of the three arguments\nTest cases:\n\narguments 1, 3, 4 should return 3.5\narguments 6, 4, 2 should return 5.0\narguments 4, 2, 1 should return 3.0"
  },
  {
    "objectID": "slides-04-03.html#write-a-function---solution",
    "href": "slides-04-03.html#write-a-function---solution",
    "title": "if elif else statements (class slides)",
    "section": "Write a function - solution",
    "text": "Write a function - solution\n\ndef average_of_highest(x, y, z):\n  if x &gt;= z and y &gt;= z:\n    return (x + y) / 2\n  elif y &gt;= x and z &gt;= x:\n    return (y + z) / 2\n  else:\n    return (x + z) / 2\n  \ndef main():\n  print( average_of_highest(1, 3, 5) ) # should print 4.0\n  print( average_of_highest(6, 4, 2) ) # should print 5.0\n  print( average_of_highest(4, 2, 1) ) # should print 3.0\n  print( average_of_highest(2, 2, 1) ) # should print 2.0\n  print( average_of_highest(2, 1, 2) ) # should print 2.0\n  print( average_of_highest(1, 2, 1) ) # should print 1.5\n  \nmain()\n\n4.0\n5.0\n3.0\n2.0\n2.0\n1.5"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About these materials",
    "section": "",
    "text": "Slides, programming problems and projects are based on previous iterations of this course. These materials are derived from ones developed by Ben Dicken, Todd Proebsting, Adriana Picoral and other UArizona CS faculty.\nSelling class notes and/or other course materials to other students or to a third party for resale is not permitted without the instructor’s express written consent. Violations to this and other course rules are subject to the Code of Academic Integrity and may result in course sanctions. Additionally, students who use D2L or UA e-mail to sell or buy these copyrighted materials are subject to Code of Conduct Violations for misuse of student e-mail addresses. This conduct may also constitute copyright infringement."
  },
  {
    "objectID": "about.html#license",
    "href": "about.html#license",
    "title": "About these materials",
    "section": "License",
    "text": "License\nThis book is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\nThis means:\n\nYou are free to Share i.e. to copy, distribute and transmit this book\nYou are free to Remix i.e. to make changes to this book (especially translations)\nYou are free to use it for commercial purposes\n\nPlease note:\n\nPlease do not sell electronic or printed copies of the book unless you have clearly and prominently mentioned in the description that these copies are not from the original author of this book.\nAttribution must be shown in the introductory description and front page of the document by linking back to https://python.swaroopch.com and clearly indicating that the original text can be fetched from this location.\nAll the code/scripts provided in this book is licensed under the 3-clause BSD License unless otherwise noted."
  },
  {
    "objectID": "slides-04-02.html#expression-vs-statement",
    "href": "slides-04-02.html#expression-vs-statement",
    "title": "If statements (class slides)",
    "section": "Expression vs Statement",
    "text": "Expression vs Statement\n\nExpression evaluates to value\nStatement does something\n\n\n3 + 4 # expression\nprint(3 + 4) # statement\n\na = 8 # statement\na != 9 # expression\nprint(a) # statement"
  },
  {
    "objectID": "slides-04-02.html#the-if-statement",
    "href": "slides-04-02.html#the-if-statement",
    "title": "If statements (class slides)",
    "section": "The if statement",
    "text": "The if statement\n\nIf statements can be used to run code conditionally\n\nBefore if-statements: Code has pretty much just run in a straight line\nWith ifs: Can run code optionally, depending on the value of a condition\n\n\nThis means our code can branch in different directions"
  },
  {
    "objectID": "slides-04-02.html#the-if-statement-1",
    "href": "slides-04-02.html#the-if-statement-1",
    "title": "If statements (class slides)",
    "section": "The if statement",
    "text": "The if statement\nif condition:\n    statement 1\n    statement 2\n    . . .\n    statement N\n\nThe condition is an expression that is evaluated to a bool.\nExample:\n\ndef greeting(name):\n  if name == \"Bond\":\n    return \"Welcome on board 007.\"\n  else:\n    return \"Hello, \" + name\n\ndef main():\n  user_name = input(\"Enter your name:\\n\")\n  print( greeting(user_name) )\n\nmain()"
  },
  {
    "objectID": "slides-04-02.html#improve-the-function",
    "href": "slides-04-02.html#improve-the-function",
    "title": "If statements (class slides)",
    "section": "Improve the function",
    "text": "Improve the function\nInstead of checking if the name entered is “Bond”, also check whether the name is “James Bond”."
  },
  {
    "objectID": "slides-04-02.html#conditional-execution",
    "href": "slides-04-02.html#conditional-execution",
    "title": "If statements (class slides)",
    "section": "Conditional execution",
    "text": "Conditional execution\nThe computer program branches out, or makes decisions\n\ndef greater_than_zero(n):\n  if n &gt; 0:\n    return \"Greater than zero\"\n  else:\n    return \"Not greater than zero\"\n  \ndef main():\n  result = greater_than_zero(4)\n  print(result)\n  \n  result = greater_than_zero(0)\n  print(result)\n  \n  result = greater_than_zero(-3)\n  print(result)\n  \nmain()\n\nGreater than zero\nNot greater than zero\nNot greater than zero"
  },
  {
    "objectID": "slides-04-02.html#write-a-function",
    "href": "slides-04-02.html#write-a-function",
    "title": "If statements (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a Python function called absolute that takes one numeric argument (integer or float) n and returns the absolute value of n: if n is positive, it results n, if n is negative, it returns n * -1\nTest cases:\n\nprint( absolute(4) ) # 4\nprint( absolute(-4) ) # 4\nprint( absolute(0) ) # 0\n\nName your file absolute.py and submit to gradescope for attendance"
  },
  {
    "objectID": "slides-04-02.html#write-a-function-solution-1",
    "href": "slides-04-02.html#write-a-function-solution-1",
    "title": "If statements (class slides)",
    "section": "Write a function – solution 1",
    "text": "Write a function – solution 1\n\ndef absolute(n):\n  if n &gt; 0:\n    return n\n  else:\n    return -n\n  \ndef main():\n  print( absolute(4) )\n  print( absolute(-4) )\n  print( absolute(0) )\n  \nmain()\n\n4\n4\n0"
  },
  {
    "objectID": "slides-04-02.html#write-a-function-solution-2",
    "href": "slides-04-02.html#write-a-function-solution-2",
    "title": "If statements (class slides)",
    "section": "Write a function – solution 2",
    "text": "Write a function – solution 2\n\ndef absolute(n):\n  if n &gt; 0:\n    return n\n  return -n\n  \ndef main():\n  print( absolute(4) )\n  print( absolute(-4) )\n  \nmain()\n\n4\n4\n\n\nWhich lines run in the function absolute?\n\nWhen expression n &gt; 0 is True, line 3 runs (return is used to exit a function and returns a value)\nWhen expression n &gt; 0 is False, line 4 runs (skip line 3)"
  },
  {
    "objectID": "slides-04-02.html#write-a-function-1",
    "href": "slides-04-02.html#write-a-function-1",
    "title": "If statements (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nFunction age_milestones takes one integer age\nIt returns:\n\n‘You may apply to join the military.’ if age is greater or equal to 18\n‘You may drink.’ if age greater or equal to 21\n‘You may run for president.’ if age greater or equal to 35\n\nThe latter conditions include former so concatenate them\n\n\nprint( age_milestones(18) ) # You may apply to join the military.\nprint( age_milestones(30) ) # You may apply to join the military. You may drink.\nprint( age_milestones(0) ) #"
  },
  {
    "objectID": "slides-04-02.html#write-a-function-solution",
    "href": "slides-04-02.html#write-a-function-solution",
    "title": "If statements (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef age_milestones(age):\n  '''\n  This function prints an informative message based on,\n  a person's age.\n  Args:\n    age: integer representing a person's age\n  Returns:\n    A string with a message to the user\n  '''\n  message = \"\"\n  if age &gt;= 18:\n      message += 'You may apply to join the military.'\n     \n  if age &gt;= 21:\n      message += ' You may drink.'\n     \n  if age &gt;= 35:\n      message += ' You may run for president.'\n      \n  return message\n     \ndef main():\n  print( age_milestones(18) ) # You may apply to join the military.\n  print( age_milestones(30) ) # You may apply to join the military. You may drink.\n  print( age_milestones(0) ) # \n \nmain()\n\nYou may apply to join the military.\nYou may apply to join the military. You may drink."
  },
  {
    "objectID": "slides-04-02.html#string-methods",
    "href": "slides-04-02.html#string-methods",
    "title": "If statements (class slides)",
    "section": "String methods",
    "text": "String methods\nIn addition to having built-in functions (len(), print(), int(), float(), etc.), Python also has a number of methods we will be using in this class.\nCheck the documentation for string methods and read what .isnumeric() does."
  },
  {
    "objectID": "slides-04-02.html#validating-numbers",
    "href": "slides-04-02.html#validating-numbers",
    "title": "If statements (class slides)",
    "section": "Validating numbers",
    "text": "Validating numbers\n\nThe input() function always returns a string\nWe can use the string built-in method .isnumeric() to determine if a string represents an integer\n.isnumeric() returns True if all the characters are numeric (0-9)\n\nTry these out:\n\nname = \"Jimmy42\"\nname.isnumeric()\n\nFalse\n\n\n\nage = 37\nage.isnumeric() # this throws an error"
  },
  {
    "objectID": "slides-04-02.html#write-a-validation-function",
    "href": "slides-04-02.html#write-a-validation-function",
    "title": "If statements (class slides)",
    "section": "Write a validation function",
    "text": "Write a validation function\nWrite a Python function validate_age that takes a string argument age. It returns True if age contains only 0-9 digit characters, and False otherwise.\nIn your previous file for age milestone, in the main function:\n\ncall input() to type an age\ncall validate_age to validate your input\nif it is True, call age_milestones to print messages\nif it is False, print ‘Invalid age entered’"
  },
  {
    "objectID": "slides-04-02.html#age-milestones",
    "href": "slides-04-02.html#age-milestones",
    "title": "If statements (class slides)",
    "section": "Age milestones",
    "text": "Age milestones\n\ndef age_milestones(age):\n  '''\n  This function prints an informative message based on,\n  a person's age.\n  Args:\n    age: integer representing a person's age\n  Returns:\n    A string with a message to the user\n  '''\n  message = \"\"\n  if age &gt;= 18:\n      message += 'You may apply to join the military'\n     \n  if age &gt;= 21:\n      message += 'You may drink'\n     \n  if age &gt;= 35:\n      message += 'You may run for president'\n      \n  return message\n\ndef validate_age(age):\n  return age.isnumeric()\n     \ndef main():\n  '''\n  This functions takes input from the user and calls the\n  check_age() functiont to print a message\n  '''\n  age = input('How old are you?\\n')\n  if validate_age(age):\n    print(age_milestones(int(age)))\n  else:\n    print(\"Invalid age entered\")\n \nmain()"
  },
  {
    "objectID": "project-1.html",
    "href": "project-1.html",
    "title": "Programming Project 1",
    "section": "",
    "text": "Programming Projects are to be submitted to gradescope.\nDue date: Thursday, September 12, 2024 at 9pm\nIn this PA, you will be writing two simple programs that print out text. Note that this programming project is relatively straightforward. Not all of the future assignments will be this way. It is simple because we have not yet covered a wide variety of programming concepts, so there’s only so much I can reasonably expect you to be able to program. The programming projects will get more challenging, but also, hopefully, more interesting!\nMake sure you follow the provided style guide (you will be graded on it!). You are not allowed to use any built-in method or function for any Python library.\nAlso make sure you check the Academic Integrity and Common Gradescope Errors pages."
  },
  {
    "objectID": "project-1.html#move-mad-lib",
    "href": "project-1.html#move-mad-lib",
    "title": "Programming Project 1",
    "section": "Move Mad Lib",
    "text": "Move Mad Lib\nThe first program should be named move.py. The outline of the story is shown below:\n??? decided to move from their apartment on 5th\nto a condo on ???. They called their friend ???\nfor help. However, they could not fit ??? into\nthe moving truck, so they had to rent a ??? ???\nin order to move it!\n\nThe locations with ??? indicate that these should be replaced with a word specified by the computer user. Your create_story function should take 6 arguments, and fill them in to the story. An example of running the program would look like so:\n\ndef main():\n  person_one = \"Janet\"\n  street_name = \"Loopdydoo Avenue\"\n  person_two = \"Richard\"\n  object_name = \"Christmas tree\"\n  vehicle = \"Horse-drawn carriage\"\n  adjective = \"Off-road\"\n  story = create_story(person_one, street_name, person_two, \\\n                       object_name, vehicle, adjective)\n  print(story)\n  \nmain()\n\nJanet decided to move from their apartment on 5th\nto a condo on Loopdydoo Avenue. They called their friend Richard\nfor help. However, they could not fit Christmas tree into\nthe moving truck, so they had to rent a Off-road Horse-drawn carriage\nin order to move it!"
  },
  {
    "objectID": "project-1.html#vacation-mad-lib",
    "href": "project-1.html#vacation-mad-lib",
    "title": "Programming Project 1",
    "section": "Vacation Mad Lib",
    "text": "Vacation Mad Lib\nThe second program should be named vacation.py. The outline of the story is shown below:\n??? and ??? were best friends.\nOne day ??? and ??? decided to go on a\nvacation to ???. However, they didn't know\nwhat to do with their ??? pet ??? named ???.\n??? had been causing problems, due to constant ???ing.\n??? found a sitter for their pet, and ??? went on the trip.\n\nAgain, locations with ??? indicate that these should be replaced with a word specified by the computer user. Your create_story function should take 8 arguments. An example of running the program would look like so:\n\ndef main():\n    person_one = \"Joe\" \n    person_two = \"Lily\" \n    pet_name = \"Poncho\"\n    animal = \"polar bear\"\n    place = \"Madagascar\"\n    adjective = \"Ridiculous\"\n    verb = \"plank\"\n    adverb = \"spastically\"\n    story = create_story(person_one, person_two, pet_name, \\\n                        animal, place, adjective, verb, adverb)\n    print(story)\n    \nmain()\n\nJoe and Lily were best friends.\nOne day Joe and Lily decided to go on a\nvacation to Madagascar. However, they didn't know\nwhat to do with their Ridiculous pet polar bear named Poncho.\nPoncho had been causing problems, due to constant planking.\nJoe found a sitter for their pet, and spastically went on the trip."
  },
  {
    "objectID": "slides-01-02.html#announcements",
    "href": "slides-01-02.html#announcements",
    "title": "Python Basics (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nTrouble accessing Gradescope? Use the link on D2L\nD2L grades are going to be used to calculate your final grade\nSign-up for your lab session at xinchenyu.github.io/csc110-fall2024/short-projects.html\nFull schedule for office hours can be found at xinchenyu.github.io/csc110-fall2024/tas.html"
  },
  {
    "objectID": "slides-01-02.html#did-you-set-up-your-workspace",
    "href": "slides-01-02.html#did-you-set-up-your-workspace",
    "title": "Python Basics (class slides)",
    "section": "Did you set up your workspace?",
    "text": "Did you set up your workspace?\n\nDid you download Python 3?\nDid you download VS Code (or PyCharm, or Mu)?\nIf not, that’s fine, you can use vscode.dev"
  },
  {
    "objectID": "slides-01-02.html#the-print-function",
    "href": "slides-01-02.html#the-print-function",
    "title": "Python Basics (class slides)",
    "section": "The print function",
    "text": "The print function\n\nWhat does the print function do?"
  },
  {
    "objectID": "slides-01-02.html#the-print-function-1",
    "href": "slides-01-02.html#the-print-function-1",
    "title": "Python Basics (class slides)",
    "section": "The print function",
    "text": "The print function\n\nprint() sends characters (strings) to the standard output\nBy default, the standard output of a python program goes to the console.\n\n\nprint(\"some characters\")\n\nsome characters\n\n\n\n\nprint('some characters')\n\nsome characters"
  },
  {
    "objectID": "slides-01-02.html#string-operations",
    "href": "slides-01-02.html#string-operations",
    "title": "Python Basics (class slides)",
    "section": "String operations",
    "text": "String operations\nString concatenation:\n\nWhat will the standard output display when the code below is run?\n\n\nprint(\"hello\" + \"world\")"
  },
  {
    "objectID": "slides-01-02.html#string-operations-1",
    "href": "slides-01-02.html#string-operations-1",
    "title": "Python Basics (class slides)",
    "section": "String operations",
    "text": "String operations\nIn your groups, try the following operations:\n\nString repetition: \"abc\" * 4\nString concatenation with + and ,. What is the difference?\nCombine both repetition and concatenation to print the following:\n\n\n\nThey sang AaAaAaAaAaAaAaAaAaAa"
  },
  {
    "objectID": "slides-01-02.html#multiple-print-statements",
    "href": "slides-01-02.html#multiple-print-statements",
    "title": "Python Basics (class slides)",
    "section": "Multiple print statements",
    "text": "Multiple print statements\n\nWhat will the standard output display when the code below is run?\n\n\nprint('Are')\nprint('You')\nprint('In')\nprint('College?')"
  },
  {
    "objectID": "slides-01-02.html#multiple-print-statements-1",
    "href": "slides-01-02.html#multiple-print-statements-1",
    "title": "Python Basics (class slides)",
    "section": "Multiple print statements",
    "text": "Multiple print statements\n\nBy default, the print function sends the output cursor to the next line after printing\n\n\nprint('Are', end = ' ')\nprint('You', end = ' ')\nprint('In', end = ' ')\nprint('College?', end = ' ')\n\nAre You In College? \n\n\nWhat other characters can you use for values for the end parameter?"
  },
  {
    "objectID": "slides-01-02.html#dealing-with-special-characters",
    "href": "slides-01-02.html#dealing-with-special-characters",
    "title": "Python Basics (class slides)",
    "section": "Dealing with special characters",
    "text": "Dealing with special characters\nWrite a simple program that prints the following output to the python console:\n\n   He said, \"What's up?\" \n   Joe's friend didn't reply."
  },
  {
    "objectID": "slides-01-02.html#variables-and-assignment",
    "href": "slides-01-02.html#variables-and-assignment",
    "title": "Python Basics (class slides)",
    "section": "Variables and assignment",
    "text": "Variables and assignment\n\nVariables are names in a program that represent a stored value\nWe can assign names to particular values in our program\nWhen we give a value a name, or update the value stored in a variable, this is called assigning a variable"
  },
  {
    "objectID": "slides-01-02.html#demonstration-of-variable-assignment",
    "href": "slides-01-02.html#demonstration-of-variable-assignment",
    "title": "Python Basics (class slides)",
    "section": "Demonstration of variable assignment",
    "text": "Demonstration of variable assignment\nVariable assignment does not produce any output to the console. Run the following code:\n\nfirst_name = \"Mary\"\nfamily_name = \"Silva\"\n\nHow would we print these variables?"
  },
  {
    "objectID": "slides-01-02.html#statements-vs-expressions",
    "href": "slides-01-02.html#statements-vs-expressions",
    "title": "Python Basics (class slides)",
    "section": "Statements (vs expressions)",
    "text": "Statements (vs expressions)\n\nExpressions represent values or the computation of values\nStatements represent executable steps in a program.\nStatements often include expressions\n\nHere’s a statement that invokes the print function with the expression 3 + 4 as an argument.\n\nprint(3 + 4)"
  },
  {
    "objectID": "slides-01-02.html#basic-types",
    "href": "slides-01-02.html#basic-types",
    "title": "Python Basics (class slides)",
    "section": "Basic Types",
    "text": "Basic Types\n\nstring: \"hello\" or 'hello'\ninteger: 3\nfloat: 3.14\nbool: True or False\n\nUse the function type() with each literal type."
  },
  {
    "objectID": "slides-01-02.html#operations",
    "href": "slides-01-02.html#operations",
    "title": "Python Basics (class slides)",
    "section": "Operations",
    "text": "Operations\n\n   +\n   -\n   *\n   /\n   **"
  },
  {
    "objectID": "slides-01-02.html#operations-and-variable-assignments",
    "href": "slides-01-02.html#operations-and-variable-assignments",
    "title": "Python Basics (class slides)",
    "section": "Operations and Variable Assignments",
    "text": "Operations and Variable Assignments\nVariable assignments are not like math — they can appear in equations that make no mathematical sense.\n\n\nx = 5\nprint(x)\nx = x + 2\nprint(x)\n\n\nx = x + 2 means “take the current value of x, add it with 2, and assign the resulting value (7) to x as its new value.”"
  },
  {
    "objectID": "slides-01-02.html#combining-variables-and-operations",
    "href": "slides-01-02.html#combining-variables-and-operations",
    "title": "Python Basics (class slides)",
    "section": "Combining variables and operations",
    "text": "Combining variables and operations\nWrite code to calculate the area of a circle when radius is 3:\n\nAssign integer 3 to radius\nCalculate the area (use \\(\\pi\\) as 3.1415)\nPrint the area"
  },
  {
    "objectID": "slides-01-02.html#comments",
    "href": "slides-01-02.html#comments",
    "title": "Python Basics (class slides)",
    "section": "Comments",
    "text": "Comments\nComputer program can include comments, which are simply text that is meant to be read, but not executed.\n\n\n# assign a radius value\nradius = 3\n# compute the area of a circle\narea = 3.1415 * radius ** 2\n\n\nThe purpose of comments is to “document” the program so that subsequent readers can more easily understand it, or learn things about it (e.g., its original author)."
  },
  {
    "objectID": "slides-01-02.html#questions",
    "href": "slides-01-02.html#questions",
    "title": "Python Basics (class slides)",
    "section": "Questions",
    "text": "Questions\n\nWhat if we want to get the area of circles when the radius is 1, 2, 3, 4 and 5?\nCan we do it more efficiently?"
  },
  {
    "objectID": "zoom.html",
    "href": "zoom.html",
    "title": "Online discussion and office hours",
    "section": "",
    "text": "READ THE INFORMATION BELOW, IT’S VERY IMPORTANT.\n\nQ & A: Piazza\n\nOff-class discussions among students and questions to the instructors/TAs will be conducted via Piazza.\n\nPiazza link\nAccess code: wildcats\n\nDo not direct message (DM) TAs.\nDo not share code solutions. You are free to share error messages, but not code. TAs and instructors can access your submission on gradescope.\nIt is expected that everyone will participate in the online discussion in a mature and respectful manner. Do not demean or embarrass others. Do not make sexist, racist, xenophobic, homophobic, transphobic, or victim-blaming comments. Immature, aggressive, or disrespectful behavior will not be tolerated. If you see anyone breaking this rule, report that person to me (xinchenyu@arizona.edu)\n\n\n\nOnline office hours\n\nOnline office hours with the instructor or the TAs will be a) announced over Piazza and b) conducted remotely over Zoom. Please check D2L for the zoom links."
  },
  {
    "objectID": "data_structures_tuples.html",
    "href": "data_structures_tuples.html",
    "title": "Tuples (Data Structures)",
    "section": "",
    "text": "Tuples (Data Structures)\nTuples are used to hold together multiple objects. Think of them as similar to lists, but without the extensive functionality that the list class gives you. One major feature of tuples is that they are immutable like strings i.e. you cannot modify tuples.\nTuples are defined by specifying items separated by commas within an optional pair of parentheses.\nTuples are usually used in cases where a statement or a user-defined function can safely assume that the collection of values (i.e. the tuple of values used) will not change.\nExample:\n# I would recommend always using parentheses\n# to indicate start and end of tuple\n# even though parentheses are optional.\n# Explicit is better than implicit.\nzoo = ('python', 'elephant', 'penguin')\nprint('Number of animals in the zoo is', len(zoo))\n\nnew_zoo = 'monkey', 'camel', zoo    # parentheses not required but are a good idea\nprint('Number of cages in the new zoo is', len(new_zoo))\nprint('All animals in new zoo are', new_zoo)\nprint('Animals brought from old zoo are', new_zoo[2])\nprint('Last animal brought from old zoo is', new_zoo[2][2])\nprint('Number of animals in the new zoo is',\n      len(new_zoo)-1+len(new_zoo[2]))\nOutput:\n\nNumber of animals in the zoo is 3\nNumber of cages in the new zoo is 3\nAll animals in new zoo are ('monkey', 'camel', ('python', 'elephant', 'penguin'))\nAnimals brought from old zoo are ('python', 'elephant', 'penguin')\nLast animal brought from old zoo is penguin\nNumber of animals in the new zoo is 5\n\nHow It Works\nThe variable zoo refers to a tuple of items. We see that the len function can be used to get the length of the tuple. This also indicates that a tuple is a sequence as well.\nWe are now shifting these animals to a new zoo since the old zoo is being closed. Therefore, the new_zoo tuple contains some animals which are already there along with the animals brought over from the old zoo. Back to reality, note that a tuple within a tuple does not lose its identity.\nWe can access the items in the tuple by specifying the item’s position within a pair of square brackets just like we did for lists. This is called the indexing operator. We access the third item in new_zoo by specifying new_zoo[2] and we access the third item within the third item in the new_zoo tuple by specifying new_zoo[2][2]. This is pretty simple once you’ve understood the idiom.\n\nTuple with 0 or 1 items\nAn empty tuple is constructed by an empty pair of parentheses such as myempty = (). However, a tuple with a single item is not so simple. You have to specify it using a comma following the first (and only) item so that Python can differentiate between a tuple and a pair of parentheses surrounding the object in an expression i.e. you have to specify singleton = (2 , ) if you mean you want a tuple containing the item 2.\n\n\n\nNote for Perl programmers\nA list within a list does not lose its identity i.e. lists are not flattened as in Perl. The same applies to a tuple within a tuple, or a tuple within a list, or a list within a tuple, etc. As far as Python is concerned, they are just objects stored using another object, that’s all."
  },
  {
    "objectID": "project-3.html",
    "href": "project-3.html",
    "title": "Programming Project 3",
    "section": "",
    "text": "Programming Projects are to be submitted to gradescope\nDue date: Thursday, September 26, 2024 at 9pm\nThis programming project is an adaptation of Ben Dicken’s Where’s the Money Programming Assignment.\nDo not import any modules for this assignment. Do not use built-in functions like max() (you have to write your own). You can use the built-in functions we covered in class: print(), round(), input(), len(), int(), float(), str() in addition to format()."
  },
  {
    "objectID": "project-3.html#add-a-comma",
    "href": "project-3.html#add-a-comma",
    "title": "Programming Project 3",
    "section": "Add a comma",
    "text": "Add a comma\n\nSet to stop at two decimal points\nAdd necessary spacing before the number, so that the table lines up"
  },
  {
    "objectID": "project-3.html#examples-for-string-method-.format",
    "href": "project-3.html#examples-for-string-method-.format",
    "title": "Programming Project 3",
    "section": "Examples for string method .format()",
    "text": "Examples for string method .format()\nUsing the comma as a thousands separator:\n\n'{:,}'.format(1234567890)\n\n'1,234,567,890'\n\n\nEstablishing numbers of digits to hold space for:\n\n'{:15,}'.format(10000)\n\n'         10,000'\n\n\nExpressing floats with four decimals (the 4 is number of digits after the decimal point, the f means it’s formatting a float):\n\n'{:.4f}'.format(4.2353635234)\n\n'4.2354'\n\n\nExpressing a percentage with two decimals:\n\npoints = 19\ntotal = 22\n'Correct answers: {:.2%}'.format(points/total)\n\n'Correct answers: 86.36%'\n\n\nHolding space and right aligning the numbers:\n\npoint_1 = 20\nprint('Correct answers: {:&gt;5,}'.format(point_1))\n\nCorrect answers:    20\n\npoint_2 = 1000\nprint('Correct answers: {:&gt;5,}'.format(point_2))\n\nCorrect answers: 1,000"
  },
  {
    "objectID": "project-7.html",
    "href": "project-7.html",
    "title": "Programming Project 7",
    "section": "",
    "text": "Programming Projects are to be submitted to gradescope.\nDue date: Thursday, October 31, 2024 at 9pm\nIn this programming project you will implement a number of Python functions to implement a Benford’s Law analysis. Make sure you follow the provided style guide (you will be graded on it!).\nName your program benfords_law.py to submit to gradescope. Make sure that gradescope gives you the points for passing the test cases.\nYou are not allowed to use built in functions and methods not covered in class (for example, don’t use .count())\nThis programming project is an adaptation of Ben Dicken’s Benford’s Law Programming Assignment.\nBenford’s Law is a mathematical law that describes the behavior of naturally-occurring numbers in some kinds of numerical data sets. I recommend that you watch this video before proceeding to get an explanation:\nBenford’s law is useful for distinguishing naturally occurring data from randomized or made-up data. It has been used in the real world to detect election fraud (For example, in the 2009 Iranian election). It has also been used as evidence in criminal cases in the US. In this project, you’ll be writing a program that reads in a data set, and prints out the plot of first-digits. Then, you can look at the plot to determine if it conforms to the law or not! Name your file benfords_law.py. You should organize the code into several functions."
  },
  {
    "objectID": "project-7.html#the-plot",
    "href": "project-7.html#the-plot",
    "title": "Programming Project 7",
    "section": "The plot",
    "text": "The plot\nIn order to create the plot, you will first have to loop through the numbers list and count how many times a number starts with the digit 1, the digit 2, the digit 3, and so on up to 9. You should use a dictionary for this counting. If you have a floating-point number x, you can get the first digit as an int by doing int(str(x)[0]). Based on the places.csv data shown earlier, the counts dictionary should be as follows after counting:\n\ncounts = {1: 6, 2: 3, 3: 2, 4: 2, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\nAfter counting, loop through the numbers 1 through 9 and figure out the percentage that each occurs. You will use these percentages both to print out the bar chart, and to check if the data follows the law. The way that you would calculate the percentage for a particular digit, as an integer, is:\n\n(count_for_digit / length_of_numbers_list) * 100\n\nThe number of # for a digit in the plot should be the same as the percentage of the data that digit appears first. For example, in the places.csv data, there were 3 numbers that started with the digit 2 and there were a total of 19 numbers from the data set, then you should print out int((3 / 19) * 100) = 15%. Thus, 15 pound sign characters for 2. For each row of the plot, print out the digit, a vertical bar (pipe character), and then the pound sign characters (#). The plot that should print based on the places.csv example is:\n1 | ###############################\n2 | ###############\n3 | ##########\n4 | ##########\n5 | ##########\n6 | #####\n7 | #####\n8 | #####\n9 | #####"
  },
  {
    "objectID": "project-7.html#does-it-follow-the-law",
    "href": "project-7.html#does-it-follow-the-law",
    "title": "Programming Project 7",
    "section": "Does it follow the law?",
    "text": "Does it follow the law?\nThe other thing you should determine is if the data follows Benford’s Law. For the purposes of this PA, a data set will follow Benford’s law if the percentage of occurrences of each digits follows the following percentages, plus 10% or minus 5%. For example, if the percentage of digit 1 calculated is 41%, then the data does not follow Benford’s law.\n\n\n\ndigit\npercent (-5, +10)\n\n\n\n\n1\n30%\n\n\n2\n17%\n\n\n3\n12%\n\n\n4\n9%\n\n\n5\n7%\n\n\n6\n6%\n\n\n7\n5%\n\n\n8\n5%\n\n\n9\n4%\n\n\n\n\nlist_of_numbers = csv_to_list(\"places.csv\")\nassert list_of_numbers == [\"1234\", \"145\", \"10\", \"1700\", \"1729\", \"1711\", \"219\", \\\n                           \"231\", \"20001\", \"301\", \"3879\", \"404\", \"40123\", \"505\",\\\n                           \"502\", \"601\", \"712\", \"81231\", \"91231\"]\ncounts = count_start_digits(list_of_numbers)\npercentages = digit_percentages(counts)\nassert check_benfords_law(percentages) == True\n\n\nTest cases\n\npopulations.csv does follow Benford’s Law\nstocks.csv does follow Benford’s Law\nrandom_numbers.csv does NOT follow Benford’s Law"
  },
  {
    "objectID": "ascii-table.html",
    "href": "ascii-table.html",
    "title": "ASCII table",
    "section": "",
    "text": "ASCII stands for American Standard Code for Information Interchange, and it represents all characters in English. Nowadays we usually use UTF-8 encoding instead os ASCII because we use more characters (emojis, for example).\nHere’s the decimal values for the characters we encounter in this course:\n\n\n\nord(char)\nchar\n\n\n\n\n32\nspace\n\n\n33\n!\n\n\n34\n”\n\n\n35\n#\n\n\n36\n$\n\n\n37\n%\n\n\n38\n&\n\n\n39\n’\n\n\n40\n(\n\n\n41\n)\n\n\n42\n*\n\n\n43\n+\n\n\n44\n,\n\n\n45\n-\n\n\n46\n.\n\n\n47\n/\n\n\n48\n0\n\n\n49\n1\n\n\n50\n2\n\n\n51\n3\n\n\n52\n4\n\n\n53\n5\n\n\n54\n6\n\n\n55\n7\n\n\n56\n8\n\n\n57\n9\n\n\n58\n:\n\n\n59\n;\n\n\n60\n&lt;\n\n\n61\n=\n\n\n62\n&gt;\n\n\n63\n?\n\n\n64\n@\n\n\n65\nA\n\n\n66\nB\n\n\n67\nC\n\n\n68\nD\n\n\n69\nE\n\n\n70\nF\n\n\n71\nG\n\n\n72\nH\n\n\n73\nI\n\n\n74\nJ\n\n\n75\nK\n\n\n76\nL\n\n\n77\nM\n\n\n78\nN\n\n\n79\nO\n\n\n80\nP\n\n\n81\nQ\n\n\n82\nR\n\n\n83\nS\n\n\n84\nT\n\n\n85\nU\n\n\n86\nV\n\n\n87\nW\n\n\n88\nX\n\n\n89\nY\n\n\n90\nZ\n\n\n91\n[\n\n\n92\n\\\n\n\n93\n]\n\n\n94\n^\n\n\n95\n_\n\n\n96\n`\n\n\n97\na\n\n\n98\nb\n\n\n99\nc\n\n\n100\nd\n\n\n101\ne\n\n\n102\nf\n\n\n103\ng\n\n\n104\nh\n\n\n105\ni\n\n\n106\nj\n\n\n107\nk\n\n\n108\nl\n\n\n109\nm\n\n\n110\nn\n\n\n111\no\n\n\n112\np\n\n\n113\nq\n\n\n114\nr\n\n\n115\ns\n\n\n116\nt\n\n\n117\nu\n\n\n118\nv\n\n\n119\nw\n\n\n120\nx\n\n\n121\ny\n\n\n122\nz\n\n\n123\n{\n\n\n124\n|\n\n\n125\n}"
  },
  {
    "objectID": "slides-03-01.html#function-comments",
    "href": "slides-03-01.html#function-comments",
    "title": "More on Functions (class slides)",
    "section": "Function Comments",
    "text": "Function Comments\n\nEvery function created is required to have a function comment, including main\nFunction comments are a multi-line string (as opposed to using # for other comments)"
  },
  {
    "objectID": "slides-03-01.html#function-comments-1",
    "href": "slides-03-01.html#function-comments-1",
    "title": "More on Functions (class slides)",
    "section": "Function Comments",
    "text": "Function Comments\n\n'''\nXinchen Yu\nCSC110\nClass Demonstration\nThis program has two functions: one to calculate the area of a sphere,\nthe other to calculate the volume of a sphere.\nThe main() function is called to print to the standard output the\narea and volume of a sphere of radius .75\n'''\ndef sphere_area(radius):\n  '''\n  This function calculates the area of a sphere of given radius.\n  Args:\n    radius: integer representing the radius of the sphere\n  Returns:\n    The float representing the area of a sphere of the given radius\n  '''\n  area = 4 * 3.1415 * radius**2\n  return round(area, 2)\n\ndef sphere_volume(radius):\n  '''\n  This function calculates the volume of a sphere of given radius.\n  Args:\n    radius: integer representing the radius of the sphere\n  Returns:\n    The float representing the volume of a sphere of the given radius\n  '''\n  volume = (1 / 3) * sphere_area(radius) * radius\n  return round(volume, 2)\n\ndef main():\n  '''\n  This function prints the area and volume of a sphere of radius .75.\n  Args:\n    None\n  Returns:\n    None\n  '''\n  r = .75\n  a = sphere_area(r)\n  v = sphere_volume(r)\n  print(a, v)\n  \nmain()\n\n7.07 1.77"
  },
  {
    "objectID": "slides-03-01.html#global-vs.-local-variables-scope",
    "href": "slides-03-01.html#global-vs.-local-variables-scope",
    "title": "More on Functions (class slides)",
    "section": "Global vs. Local variables (scope)",
    "text": "Global vs. Local variables (scope)\n\nEvery variable that is created has a particular scope\nThe scope of a variable is the region in the code where the variable can be used or modified"
  },
  {
    "objectID": "slides-03-01.html#global-vs.-local-variables-scope-1",
    "href": "slides-03-01.html#global-vs.-local-variables-scope-1",
    "title": "More on Functions (class slides)",
    "section": "Global vs. Local variables (scope)",
    "text": "Global vs. Local variables (scope)\n\nLocal Variables have local scope – for example, a variable assigned inside a function can only be used or modified within that function\nGlobal Variables have global scope – for example, a variable delcared outside a function can be accessed or modified across multiple functions"
  },
  {
    "objectID": "slides-03-01.html#global-vs.-local-variables-scope-2",
    "href": "slides-03-01.html#global-vs.-local-variables-scope-2",
    "title": "More on Functions (class slides)",
    "section": "Global vs. Local variables (scope)",
    "text": "Global vs. Local variables (scope)\n\nIn the previous program we wrote (volume and area of sphere), r, v and a are local variables within the main() function.\nThe variable radius and area are local within the sphere_area(radius) function scope.\nThe variable radius and volume are local within sphere_volume(radius)"
  },
  {
    "objectID": "slides-03-01.html#global-or-local",
    "href": "slides-03-01.html#global-or-local",
    "title": "More on Functions (class slides)",
    "section": "Global or Local?",
    "text": "Global or Local?\n\na = 10               # What are the global and local variables?\nb = 5                # Is the output of the two programs the same \n                     # or different?\ndef sum():\n  return a + b\n\ndef main():\n  print(sum())\n  \nmain()\n\nvs.\n\ndef sum(a, b):\n  return a + b\n\ndef main():\n  print(sum(10, 5))\n  \nmain()"
  },
  {
    "objectID": "slides-03-01.html#argument-vs.-parameter",
    "href": "slides-03-01.html#argument-vs.-parameter",
    "title": "More on Functions (class slides)",
    "section": "Argument vs. Parameter",
    "text": "Argument vs. Parameter\n\nNever set variables as global variables, pass values to functions when called\nWhen a function is defined, the variables you want to pass to the function are called parameter variables\nWhen the function is then called, the values you pass to the function are called arguments"
  },
  {
    "objectID": "slides-03-01.html#argument-or-parameter",
    "href": "slides-03-01.html#argument-or-parameter",
    "title": "More on Functions (class slides)",
    "section": "Argument or Parameter?",
    "text": "Argument or Parameter?\n\n# The parameters are a and b\ndef add(a, b):\n    return a+b\n  \n# The arguments being passed through are 5 and 4\nadd(5, 4)"
  },
  {
    "objectID": "slides-03-01.html#write-a-function",
    "href": "slides-03-01.html#write-a-function",
    "title": "More on Functions (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a Python function called hypotenuse that takes two arguments: a and b representing the length of the two non-hypotenuse sides of a right triangle. The function should calculate the hypotenuse according to the Pythagorean theorem: \\(c = \\sqrt(a^2 + b^2)\\). Return it rounded at two decimals.\nTest cases: hypotenuse(3, 4) should return 5.0, hypotenuse(10, 10) should return 14.14\nName your file hypotenuse.py"
  },
  {
    "objectID": "slides-03-01.html#submit-attendance",
    "href": "slides-03-01.html#submit-attendance",
    "title": "More on Functions (class slides)",
    "section": "Submit attendance",
    "text": "Submit attendance\nSubmit your hypotenuse.py file with your solution to gradescope for attendance"
  },
  {
    "objectID": "slides-03-01.html#write-a-function-1",
    "href": "slides-03-01.html#write-a-function-1",
    "title": "More on Functions (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\ndef sqrt(n):\n  '''\n  This function calculates the square root of a number\n  Args:\n    n: integer or float\n  Returns:\n    The square root of n\n  '''\n  return n**.5\n\ndef hypotenuse(a, b):\n  '''\n  This function calculates the hypotenuse of a right angle triangle.\n  Args:\n    a: number (integer or float) representing one of the non-hypotenuse sides\n    b: number (integer or float) representing one of the non-hypotenuse sides\n  Returns:\n    Float representing the length of the hypotenuse given a and b\n  ''' \n  h = sqrt(a**2 + b**2)\n  return round(h, 2)\n\ndef main():\n  '''\n  This function calls the hypotenuse function to calculate and then\n  print out the hypotenuse of a right angle triangle of sides 3 and 4\n  and the hypotenuse of a right angle triange of sides 10 and 10\n  '''\n  result = hypotenuse(3, 4)\n  print(result)\n  \n  result = hypotenuse(10, 10)\n  print(result)\n  \nmain()\n\n5.0\n14.14"
  },
  {
    "objectID": "slides-11-02.html#d-lists",
    "href": "slides-11-02.html#d-lists",
    "title": "nested for loops (class slides)",
    "section": "2D lists",
    "text": "2D lists\n\npeople = [[\"Ana\", 34, \"B\"],\n          [\"Peter\", 23, \"A\"]]\n\nHow to retrieve first name \"Ana\"?\nHow to retrieve first name \"Peter\"?\nHow to retrieve integer 23?"
  },
  {
    "objectID": "slides-11-02.html#d-lists-1",
    "href": "slides-11-02.html#d-lists-1",
    "title": "nested for loops (class slides)",
    "section": "2D lists",
    "text": "2D lists\n\npeople = [[\"Ana\", 34, \"B\"],\n          [\"Peter\", 23, \"A\"]]\n\nHow to retrieve first name \"Ana\"?\n\npeople[0][0]\n\n'Ana'\n\n\nHow to retrieve first name \"Peter\"?\n\npeople[1][0]\n\n'Peter'\n\n\nHow to retrieve integer 23?\n\npeople[1][1]\n\n23"
  },
  {
    "objectID": "slides-11-02.html#nested-for-loops",
    "href": "slides-11-02.html#nested-for-loops",
    "title": "nested for loops (class slides)",
    "section": "Nested for loops",
    "text": "Nested for loops\n\npeople = [[\"Ana\", 34, \"B\"],\n          [\"Peter\", 23, \"A\"]]\n          \nfor i in range(len(people)):\n  for j in range(len(people[i])):\n    print(people[i][j])\n\nAna\n34\nB\nPeter\n23\nA"
  },
  {
    "objectID": "slides-11-02.html#write-a-function",
    "href": "slides-11-02.html#write-a-function",
    "title": "nested for loops (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nFunction name is nested_max\nIt takes a 2D list of numbers as argument\nIt iterates over every item in each sublist to find the highest number\nIt returns the highest number in all lists\n\nTest cases\n\nassert nested_max([[], []]) == None\nassert nested_max([[1, 2, 3, 2, 1],\n                   [2, 3, 2, 1, 5],\n                   [0, 1]]) == 5"
  },
  {
    "objectID": "slides-11-02.html#write-a-function-solution-1",
    "href": "slides-11-02.html#write-a-function-solution-1",
    "title": "nested for loops (class slides)",
    "section": "Write a function – solution 1",
    "text": "Write a function – solution 1\n\ndef nested_max(lists):\n  max = None\n  for i in range(len(lists)):\n    for j in range(len(lists[i])):\n      if max == None or lists[i][j] &gt; max:\n        max = lists[i][j]\n  return max\n\ndef main():\n  assert nested_max([[], []]) == None\n  assert nested_max([[1, 2, 3, 2, 1],\n                     [2, 3, 2, 1, 5],\n                     [0, 1]]) == 5\n  print(\"Passed all tests\")\nmain()\n\nPassed all tests"
  },
  {
    "objectID": "slides-11-02.html#write-a-function-solution-2",
    "href": "slides-11-02.html#write-a-function-solution-2",
    "title": "nested for loops (class slides)",
    "section": "Write a function – solution 2",
    "text": "Write a function – solution 2\n\ndef max_list(numbers):\n  max = None\n  for i in range(len(numbers)):\n    if max == None or numbers[i] &gt; max:\n      max = numbers[i]\n  return max\n\ndef nested_max(lists):\n  max = None\n  for i in range(len(lists)):\n    max_of_sublist = max_list(lists[i])\n    if max == None or  max_of_sublist&gt; max:\n      max = max_of_sublist\n  return max\n\ndef main():\n  assert nested_max([[], []]) == None\n  assert nested_max([[1, 2, 3, 2, 1],\n                     [2, 3, 2, 1, 5],\n                     [0, 1]]) == 5\n  print(\"Passed all tests\")\nmain()\n\nPassed all tests"
  },
  {
    "objectID": "slides-11-02.html#write-a-function-1",
    "href": "slides-11-02.html#write-a-function-1",
    "title": "nested for loops (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nFunction name is nested_min\nIt takes a 2D list of numbers as argument\nIt iterates over every item in each sublist to find the lowest number\nIt returns the lowest number in all lists\n\nTest cases\n\nassert nested_min([[], []]) == None\nassert nested_min([[1, 2, 3, 2, 1],\n                   [2, 3, 2, 1, 5],\n                   [0, 1]]) == 0"
  },
  {
    "objectID": "slides-11-02.html#write-a-function-solution",
    "href": "slides-11-02.html#write-a-function-solution",
    "title": "nested for loops (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef nested_min(lists):\n  min = None\n  for i in range(len(lists)):\n    for j in range(len(lists[i])):\n      if min == None or lists[i][j] &lt; min:\n        min = lists[i][j]\n  return min\n\ndef main():\n  assert nested_min([[], []]) == None\n  assert nested_min([[1, 2, 3, 2, 1],\n                     [2, 3, 2, 1, 5],\n                     [0, 1]]) == 0\n  print(\"Passed all tests\")\nmain()\n\nPassed all tests"
  },
  {
    "objectID": "slides-11-02.html#mutate-nested-lists",
    "href": "slides-11-02.html#mutate-nested-lists",
    "title": "nested for loops (class slides)",
    "section": "Mutate nested lists",
    "text": "Mutate nested lists\nIn addition to retrieving a value from nested lists, we can also mutate a value in a sublist.\n\npeople = [[\"Ana\", 34, \"B\"],\n          [\"Peter\", 23, \"A\"]]\npeople\n\n[['Ana', 34, 'B'], ['Peter', 23, 'A']]\n\n\n\npeople[0][1] = 24\npeople\n\n[['Ana', 24, 'B'], ['Peter', 23, 'A']]"
  },
  {
    "objectID": "slides-11-02.html#write-a-function-2",
    "href": "slides-11-02.html#write-a-function-2",
    "title": "nested for loops (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nFunction name is double_nested\nIt takes a 2D list of numbers as argument\nIt mutates the sublist items by multiplying each number in each sublist by 2\nIt returns the argument list\n\nTest cases\n\nassert double_nested([[], []]) == [[], []]\nassert double_nested([[1, 2, 3, 2, 1],\n                     [0, 1]]) == [[2, 4, 6, 4, 2],\n                                  [0, 2]]"
  },
  {
    "objectID": "slides-11-02.html#write-a-function-solution-3",
    "href": "slides-11-02.html#write-a-function-solution-3",
    "title": "nested for loops (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef double_nested(lists):\n  for i in range(len(lists)):\n    for j in range(len(lists[i])):\n      lists[i][j] *= 2\n  return lists\n\ndef main():\n  assert double_nested([[], []]) == [[], []]\n  assert double_nested([[1, 2, 3, 2, 1],\n                        [0, 1]]) == [[2, 4, 6, 4, 2],\n                                     [0, 2]]\n  print(\"Passed all tests\")\nmain()\n\nPassed all tests"
  },
  {
    "objectID": "slides-11-02.html#write-a-function-3",
    "href": "slides-11-02.html#write-a-function-3",
    "title": "nested for loops (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nFunction name is len_strings_nested\nIt takes a 2D list of strings as argument\nIt mutates the sublist items by replacing each string with its length\nIt returns the argument list\n\nTest cases:\n\nassert len_strings_nested([[\"desserts\", \"raw\", \"live\"],\n                            [\"smart\", \"knits\"]]) == [[8, 3, 4], [5, 5]]"
  },
  {
    "objectID": "slides-11-02.html#write-a-function-solution-4",
    "href": "slides-11-02.html#write-a-function-solution-4",
    "title": "nested for loops (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef len_strings_nested(strings):\n  for i in range(len(strings)):\n    for j in range(len(strings[i])):\n      strings[i][j] = len(strings[i][j])\n  return strings\n\ndef main():\n  original_list = [[\"desserts\", \"raw\", \"live\"],\n                               [\"smart\", \"knits\"]]\n  assert len_strings_nested(original_list) == [[8, 3, 4], [5, 5]]\n  print(original_list)\n  \nmain()\n\n[[8, 3, 4], [5, 5]]"
  },
  {
    "objectID": "slides-11-02.html#write-a-function-4",
    "href": "slides-11-02.html#write-a-function-4",
    "title": "nested for loops (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nFunction name is reverse_strings_nested\nIt takes a 2D list of strings as argument\nIt mutates the sublist items by reversing each string (you can use string[::-1] to reverse it)\nIt returns the argument list\n\nTest cases:\n\nassert reverse_strings_nested([[\"desserts\", \"raw\", \"live\"],\n                               [\"smart\", \"knits\"]]) == [[\"stressed\", \"war\", \"evil\"],\n                                                        [\"trams\", \"stink\"]]"
  },
  {
    "objectID": "slides-11-02.html#write-a-function-solution-5",
    "href": "slides-11-02.html#write-a-function-solution-5",
    "title": "nested for loops (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef reverse_strings_nested(strings):\n  for i in range(len(strings)):\n    for j in range(len(strings[i])):\n      strings[i][j] = strings[i][j][::-1]\n  return strings\n\ndef main():\n  original_strings = [[\"desserts\", \"raw\", \"live\"],\n                      [\"smart\", \"knits\"]]\n  reverse_strings_nested(original_strings)   \n  assert  original_strings == [[\"stressed\", \"war\", \"evil\"],\n                               [\"trams\", \"stink\"]]\n  \n  print(original_strings)\n  print(\"Passed test\")\n  \nmain()\n\n[['stressed', 'war', 'evil'], ['trams', 'stink']]\nPassed test"
  },
  {
    "objectID": "slides-11-02.html#extra-activity-loop-table",
    "href": "slides-11-02.html#extra-activity-loop-table",
    "title": "nested for loops (class slides)",
    "section": "Extra Activity – Loop Table",
    "text": "Extra Activity – Loop Table\n\ndef nested_max(lists):\n  max = None\n  for i in range(len(lists)):\n    for j in range(len(lists[i])):\n      if max == None or lists[i][j] &gt; max:\n        max = lists[i][j]\n  return max\n\nmax_nested([[], [], [2, 1], [0, 5, 2], [3]])\n\nDraw a loop table with:\n\nvalue of max before loop, and in each iteration of the nested loops\nvalues of i, j, and lists[i][j] for each nested loop iteration"
  },
  {
    "objectID": "slides-11-02.html#loop-table-solution-part-1",
    "href": "slides-11-02.html#loop-table-solution-part-1",
    "title": "nested for loops (class slides)",
    "section": "Loop table – solution part 1",
    "text": "Loop table – solution part 1\n\n\n\n\n\nijlen(lists[i])lists[i][j]max\n\n0-0-None\n\n1-0-None\n\n20222\n\n21212\n\n30302\n\n31355\n\n32325"
  },
  {
    "objectID": "slides-11-02.html#loop-table-solution-part-2",
    "href": "slides-11-02.html#loop-table-solution-part-2",
    "title": "nested for loops (class slides)",
    "section": "Loop table – solution part 2",
    "text": "Loop table – solution part 2\n\n\n\n\n\nijlen(lists[i])lists[i][j]max\n\n40135"
  },
  {
    "objectID": "slides-03-02.html#built-in-functions",
    "href": "slides-03-02.html#built-in-functions",
    "title": "Built-in Python Functions (class slides)",
    "section": "Built-in Functions",
    "text": "Built-in Functions\n\nprint()\nround()\ntype()\ninput()\nlen()\nint()\nfloat()"
  },
  {
    "objectID": "slides-03-02.html#write-a-function",
    "href": "slides-03-02.html#write-a-function",
    "title": "Built-in Python Functions (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a Python function that does the following:\n\nIts name is greeting\nIt takes two arguments, first_name and last_name\nIt returns a string with a greeting using first_name and last_name\n\n\nprint( greeting(\"Mickey\", \"Mouse\") ) # Hello, Mickey Mouse!"
  },
  {
    "objectID": "slides-03-02.html#input-function",
    "href": "slides-03-02.html#input-function",
    "title": "Built-in Python Functions (class slides)",
    "section": "input() function",
    "text": "input() function\n\nThe input() function prompts the user to input text in the standard output\nWhatever is inside the parentheses in input() will be written to the standard output (without a trailing newline, which you can add using \\n).\nThe function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that\ninput() always returns a string\n\n\ninput(\"What's your name?\\n\")"
  },
  {
    "objectID": "slides-03-02.html#write-a-function-1",
    "href": "slides-03-02.html#write-a-function-1",
    "title": "Built-in Python Functions (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a Python function that does the following:\n\nIts name is greeting_again with no parameters\nIt first prompts you to enter your first name\nIt again prompts you to enter your last name\nIt returns a string with the same greeting as greeting but replace with your first and last name\n\n\nprint( greeting_again() )"
  },
  {
    "objectID": "slides-03-02.html#write-a-function-2",
    "href": "slides-03-02.html#write-a-function-2",
    "title": "Built-in Python Functions (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\ndef greeting(first, last):\n    message = \"Hello, \" + first + \" \" + last + \"!\"\n    return message\n\ndef greeting_again():\n    first = input(\"Enter your first name:\\n\")\n    last = input(\"Enter your last name:\\n\")\n    message = \"Hello, \" + first + \" \" + last + \"!\"\n    return message\n\ndef main():\n    print(greeting(\"Mickey\", \"Mouse\"))\n    print(greeting_again())\n\nmain()"
  },
  {
    "objectID": "slides-03-02.html#len-function",
    "href": "slides-03-02.html#len-function",
    "title": "Built-in Python Functions (class slides)",
    "section": "len() function",
    "text": "len() function\n\nThe len() function can be used with many types – we will be using it with string for now\nIt returns the number of characters in a string\n\n\ncharacter_count = len(\"Mickey\")\nprint(character_count)\n\n6"
  },
  {
    "objectID": "slides-03-02.html#write-a-function-3",
    "href": "slides-03-02.html#write-a-function-3",
    "title": "Built-in Python Functions (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a Python function that does the following:\n\nIts name is count_characters\nIt takes three string arguments, a, b and c\nIt returns the total number of characters for all three strings\n\n\nprint( count_characters(\"hel\", \"lo\", \"world\") ) # 10\nprint( count_characters(\"\", \"\", \"\") ) # 0\nprint( count_characters(\" \", \" \", \" \") ) # 3\nprint( count_characters(\"10\", \"2\", \"3\") ) # 4"
  },
  {
    "objectID": "slides-03-02.html#write-a-function-4",
    "href": "slides-03-02.html#write-a-function-4",
    "title": "Built-in Python Functions (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\ndef count_characters(a, b, c):\n    return len(a) + len(b) + len(c)\n\ndef main():\n    print( count_characters(\"hel\", \"lo\", \"world\") ) # 10\n    print( count_characters(\"\", \"\", \"\") ) # 0\n    print( count_characters(\" \", \" \", \" \") ) # 3\n    print( count_characters(\"10\", \"2\", \"3\") ) # 4\n\nmain()\n\n10\n0\n3\n4"
  },
  {
    "objectID": "slides-03-02.html#quiz-03",
    "href": "slides-03-02.html#quiz-03",
    "title": "Built-in Python Functions (class slides)",
    "section": "Quiz 03",
    "text": "Quiz 03\n\n\ncurrent time\n\n\n\n\n\n\nYou have 10 minutes to complete the quiz.\nYour formula in your function should be Python code (in other words, do not just copy the formula in the instructions, make it so it uses actual symbols for Python operators)"
  },
  {
    "objectID": "slides-03-02.html#int-function",
    "href": "slides-03-02.html#int-function",
    "title": "Built-in Python Functions (class slides)",
    "section": "int() function",
    "text": "int() function\n\nThe int() function can be used to convert a string to an integer type\nIt only works if the string only contains digits\n\n\nage = '35'\nage_int = int(age)\nprint(type(age), type(age_int))\n\n&lt;class 'str'&gt; &lt;class 'int'&gt;"
  },
  {
    "objectID": "slides-03-02.html#float-function",
    "href": "slides-03-02.html#float-function",
    "title": "Built-in Python Functions (class slides)",
    "section": "float() function",
    "text": "float() function\n\nThe float() function can be used to convert a string to a float type\nIt only works if the string only contains digits and optionally a decimal point\n\n\nage = '35'\nage_float = float(age)\nprint(type(age), type(age_float))\n\n&lt;class 'str'&gt; &lt;class 'float'&gt;"
  },
  {
    "objectID": "slides-03-02.html#write-a-function-5",
    "href": "slides-03-02.html#write-a-function-5",
    "title": "Built-in Python Functions (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a Python function calculate_year_born with no parameters. It prompts user to enter their age input(). It converts user’s age to integer. It calculates (imperfectly) the year a person of age was born by subtracting age from 2024. It returns an integer representing the approximate year person of age was born.\nName your file get_input.py\n\nprint( calculate_year_born() ) # user enters 60, function returns 1964"
  },
  {
    "objectID": "slides-03-02.html#submit-attendance",
    "href": "slides-03-02.html#submit-attendance",
    "title": "Built-in Python Functions (class slides)",
    "section": "Submit attendance",
    "text": "Submit attendance\nSubmit your get_input.py file with your solution to gradescope for attendance. Do not call main() in your file to get full points."
  },
  {
    "objectID": "slides-03-02.html#write-a-function-6",
    "href": "slides-03-02.html#write-a-function-6",
    "title": "Built-in Python Functions (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\ndef calculate_year_born():\n    str_age = input(\"what's your age?\\n\")\n    age = int(str_age)\n    year_born = 2024 - age\n    return year_born\n\ndef main():\n    print(calculate_year_born())\n\nmain()"
  },
  {
    "objectID": "slides-07-01.html#announcements",
    "href": "slides-07-01.html#announcements",
    "title": "mutability (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nAcademic integrity\nExtra 0.5 point - meet with TAs to go through the questions where you got wrong in midterm 1 by next Friday.\nTAs of your section will reach out to you this week."
  },
  {
    "objectID": "slides-07-01.html#lists-vs-strings",
    "href": "slides-07-01.html#lists-vs-strings",
    "title": "mutability (class slides)",
    "section": "Lists vs strings",
    "text": "Lists vs strings\n\nLists are mutable\nStrings are not\nIn addition to retrieving an item from a list, we can remove or change it (which is not something you can do with strings)\n\n\nsongs = [\"Lavender Haze\", \"Calm Down\", \"As It Was\", \"About Damn Time\"]\nsongs\n\n['Lavender Haze', 'Calm Down', 'As It Was', 'About Damn Time']\n\n\n\nsongs[0] = \"Flowers\"\nsongs\n\n['Flowers', 'Calm Down', 'As It Was', 'About Damn Time']"
  },
  {
    "objectID": "slides-07-01.html#lists-are-mutable",
    "href": "slides-07-01.html#lists-are-mutable",
    "title": "mutability (class slides)",
    "section": "Lists are mutable",
    "text": "Lists are mutable\n(strings are not)\nBecause lists are mutable:\n\nonce a list is changed inside a function, that change persists when the function has finished running\nif your function changes a list, you don’t strictly need to return that list – we will be returning because that’s what you need to be doing in the future"
  },
  {
    "objectID": "slides-07-01.html#write-a-function",
    "href": "slides-07-01.html#write-a-function",
    "title": "mutability (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is make_all_even\nIt takes one argument, a list of integers\nIt iterates over the list, changing odd numbers to even number (even up)\n\n\ntest_integers = [1, 2, 3, 4]\nassert make_all_even(test_integers) == test_integers\nassert test_integers == [2, 2, 4, 4]"
  },
  {
    "objectID": "slides-07-01.html#write-a-function-solution-1",
    "href": "slides-07-01.html#write-a-function-solution-1",
    "title": "mutability (class slides)",
    "section": "Write a function – solution 1",
    "text": "Write a function – solution 1\n\ndef make_all_even(integers):\n  index = 0\n  while index &lt; len(integers):\n    if integers[index] % 2 == 1:\n      integers[index] += 1\n    index += 1\n  return integers\n      \ndef main():\n  test_integers = [1, 2, 3, 4]\n  assert make_all_even(test_integers) == test_integers\n  assert test_integers == [2, 2, 4, 4]\n  print(test_integers) # we print the list we created before function call\n  \nmain()\n\n[2, 2, 4, 4]\n\n\nLet’s visualize this on Python Tutor"
  },
  {
    "objectID": "slides-07-01.html#write-a-function-solution-2",
    "href": "slides-07-01.html#write-a-function-solution-2",
    "title": "mutability (class slides)",
    "section": "Write a function – solution 2",
    "text": "Write a function – solution 2\n\ndef make_all_even(integers):\n  index = 0\n  while index &lt; len(integers):\n    integers[index] += integers[index] % 2\n    index += 1\n  return integers\n      \ndef main():\n  test_integers = [1, 2, 3, 4]\n  assert make_all_even(test_integers) == test_integers\n  assert test_integers == [2, 2, 4, 4]\n  print(test_integers) # we print the list we created before function call\n  \nmain()\n\n[2, 2, 4, 4]"
  },
  {
    "objectID": "slides-07-01.html#object-references",
    "href": "slides-07-01.html#object-references",
    "title": "mutability (class slides)",
    "section": "Object References",
    "text": "Object References\n\nA variable doesn’t store values, it stores a reference to an object that lives in your computer memory (RAM)\nThe same variable name can be pointed to a different object\nA variable name can point to an object that is already referenced by another variable"
  },
  {
    "objectID": "slides-07-01.html#examples",
    "href": "slides-07-01.html#examples",
    "title": "mutability (class slides)",
    "section": "Examples",
    "text": "Examples\nStrings are not mutable\n\ntitle = \"Dr.\"\nlast_name = \"Brown\"\nprint(title + \" \" + last_name)\n\ntitle = \"Ms.\"\nprint(title + \" \" + last_name)\n\nname = last_name\nlast_name = \"Silva\" # last_name points to a different object\nprint(title + \" \" + name)\n\nDr. Brown\nMs. Brown\nMs. Brown\n\n\nVisualize these examples in Python Tutor"
  },
  {
    "objectID": "slides-07-01.html#examples-1",
    "href": "slides-07-01.html#examples-1",
    "title": "mutability (class slides)",
    "section": "Examples",
    "text": "Examples\nLists are mutable\n\nnames = [\"Dr.\", \"Brown\"]\nprint(names[0] + \" \" + names[1])\n\nnames[0] = \"Ms.\"\nprint(names[0] + \" \" + names[1])\n\nnames_copy = names\nnames[1] = \"Silva\"\nprint(names_copy[0] + \" \" + names_copy[1])\n\nDr. Brown\nMs. Brown\nMs. Silva\n\n\nVisualize these examples in Python Tutor"
  },
  {
    "objectID": "slides-07-01.html#another-example",
    "href": "slides-07-01.html#another-example",
    "title": "mutability (class slides)",
    "section": "Another example",
    "text": "Another example\n\nnumbers = [50, 30, 80]\nsame_numbers = numbers\nsame_numbers[1] = 40\nnumbers = \"look, numbers!\"\nsame_numbers = numbers\n\nVisualize these examples in Python Tutor"
  },
  {
    "objectID": "slides-07-01.html#object-references-1",
    "href": "slides-07-01.html#object-references-1",
    "title": "mutability (class slides)",
    "section": "Object references",
    "text": "Object references\n\nA variable does not actually hold the value of the object within it\nInstead, it’s a reference to the object\n\nThe object is “sitting” somewhere in your computer’s memory (RAM)"
  },
  {
    "objectID": "slides-07-01.html#object-references-2",
    "href": "slides-07-01.html#object-references-2",
    "title": "mutability (class slides)",
    "section": "Object references",
    "text": "Object references\n\nWhen you assign a value to a new variable, one of two things could happen\n\nIf you assign it to an existing object, the variable references that object\nIf you assign it to a new object, the object is created, placed in memory, and then the variable references it"
  },
  {
    "objectID": "slides-07-01.html#garbage-collection",
    "href": "slides-07-01.html#garbage-collection",
    "title": "mutability (class slides)",
    "section": "Garbage Collection",
    "text": "Garbage Collection\n\nWhen there’s no variable pointing to an object anymore, that object is removed from memory by Python’s Garbage Collector (so you don’t have to worry about memory leaks)"
  },
  {
    "objectID": "slides-07-01.html#summary",
    "href": "slides-07-01.html#summary",
    "title": "mutability (class slides)",
    "section": "Summary",
    "text": "Summary\nWhen working with lists, once they are changed in a function, the changes happen to the object in memory\nChanges to lists persist once the function has finished running"
  },
  {
    "objectID": "slides-07-01.html#pop-list-method",
    "href": "slides-07-01.html#pop-list-method",
    "title": "mutability (class slides)",
    "section": ".pop() list method",
    "text": ".pop() list method\nWe will be using a few built-in list methods (not all of them, some you will implement yourself from scratch)\nHere’s how .pop() works:\n\nsongs = [\"Lavender Haze\", \"Calm Down\", \"As It Was\", \"About Damn Time\"]\nsongs\n\n['Lavender Haze', 'Calm Down', 'As It Was', 'About Damn Time']\n\n\n\nsongs.pop(0)\nsongs\n\n['Calm Down', 'As It Was', 'About Damn Time']"
  },
  {
    "objectID": "slides-07-01.html#write-two-functions",
    "href": "slides-07-01.html#write-two-functions",
    "title": "mutability (class slides)",
    "section": "Write two functions",
    "text": "Write two functions\n\nNames are remove_vowels_list and remove_vowels_string\nThe first function takes a list of characters as argument, the second takes a single string\nThe first function removes (use .pop(index)) all vowels from the characters list, the second creates a new_string with only characters that are not vowels\nThe first function returns the original argument list, the second function returns the new_string\n\n\nassert remove_vowels_list([\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"]) == [\"b\", \"n\", \"n\"]\nassert remove_vowels_string(\"banana\") == \"bnn\""
  },
  {
    "objectID": "slides-07-01.html#write-two-functions-solution",
    "href": "slides-07-01.html#write-two-functions-solution",
    "title": "mutability (class slides)",
    "section": "Write two functions – solution",
    "text": "Write two functions – solution\n\ndef remove_vowels_list(characters):\n  index = 0\n  while index &lt; len(characters):\n    if characters[index] in \"aeiou\":\n      characters.pop(index)\n    else:\n      index += 1 # go to next index only if no item has been removed\n  return characters\n    \ndef remove_vowels_string(string):\n  new_string = \"\"\n  index = 0\n  while index &lt; len(string):\n    if string[index] not in \"aeiou\":\n      new_string += string[index]\n    index += 1\n  return new_string\n\ndef main():\n  test_characters = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"]\n  test_string = \"banana\"\n  \n  assert remove_vowels_list(test_characters) == test_characters\n  assert test_characters == [\"b\", \"n\", \"n\"]\n  assert remove_vowels_string(\"banana\") == \"bnn\"\n  \n  print(test_characters)\n  print(test_string)\n      \nmain()\n\n['b', 'n', 'n']\nbanana"
  },
  {
    "objectID": "slides-07-01.html#list-methods",
    "href": "slides-07-01.html#list-methods",
    "title": "mutability (class slides)",
    "section": "List methods",
    "text": "List methods\nWe will be using the following list methods in this class:\n\n.append() adds an element at the end of the list: list.append(value)\n.insert() adds an element at the provided index: list.insert(index, value)\n.pop() removes a specific element at the provided index: list.pop(index)\n.remove() removes the first element with the provided value: list.remove(value)"
  },
  {
    "objectID": "slides-07-01.html#append-list-method",
    "href": "slides-07-01.html#append-list-method",
    "title": "mutability (class slides)",
    "section": ".append() list method",
    "text": ".append() list method\n\nsongs = [\"Lavender Haze\", \"Calm Down\", \"As It Was\", \"About Damn Time\"]\nsongs\n\n['Lavender Haze', 'Calm Down', 'As It Was', 'About Damn Time']\n\n\n\nsongs.append(\"Flowers\")\nsongs\n\n['Lavender Haze', 'Calm Down', 'As It Was', 'About Damn Time', 'Flowers']"
  },
  {
    "objectID": "slides-07-01.html#write-a-function-1",
    "href": "slides-07-01.html#write-a-function-1",
    "title": "mutability (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is indices_of_vowels\nIt takes a single string as its parameter.\nIt returns a list of integers that represent the indices of the vowels in the original list\n\nTest cases:\n\nassert indices_of_vowels(\"hello\") == [1, 4]\nassert indices_of_vowels(\"\") == []\nassert indices_of_vowels(\"aeiou\") == [0, 1, 2, 3, 4]"
  },
  {
    "objectID": "slides-07-01.html#write-a-function-solution",
    "href": "slides-07-01.html#write-a-function-solution",
    "title": "mutability (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef indices_of_vowels(string):\n  result = [] # initialize empty list to hold indices\n  index = 0 # initialize index\n  while index &lt; len(string):\n    if string[index] in \"aeiou\": # check if character is vowel\n      result.append(index) # append index to result\n    index += 1 # increment index\n    \n  return result\n\ndef main():\n  assert indices_of_vowels(\"hello\") == [1, 4]\n  assert indices_of_vowels(\"\") == []\n  assert indices_of_vowels(\"aeiou\") == [0, 1, 2, 3, 4]\n  print(\"Passed all tests.\")\n\nmain()\n\nPassed all tests."
  },
  {
    "objectID": "slides-07-01.html#write-a-function-2",
    "href": "slides-07-01.html#write-a-function-2",
    "title": "mutability (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is reverse_list\nIt takes a list as argument\nIt returns a new list with the items of the original list inverted\n\nTest case:\n\ntest_strings = [\"banana\", \"apple\", \"grape\"]\nassert reverse_list(test_strings) == [\"grape\", \"apple\", \"banana\"]"
  },
  {
    "objectID": "slides-07-01.html#write-a-function-solution-3",
    "href": "slides-07-01.html#write-a-function-solution-3",
    "title": "mutability (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef reverse_list(items):\n  index = len(items) - 1 # initialize index\n  inverted_list = []\n  while index &gt;= 0:\n    inverted_list.append(items[index])\n    index -= 1\n  return inverted_list\n    \ndef main():\n  test_strings = [\"banana\", \"apple\", \"grape\"]\n  assert reverse_list(test_strings) == [\"grape\", \"apple\", \"banana\"]\n  print(\"Passed test\")\n  \nmain()\n\nPassed test"
  },
  {
    "objectID": "slides-07-01.html#quiz-03",
    "href": "slides-07-01.html#quiz-03",
    "title": "mutability (class slides)",
    "section": "Quiz 03",
    "text": "Quiz 03\n\n\ncurrent time\n\n\n\n\n\n\nYou have 15 minutes to complete. There are 2 problems.\n\nNo need for comments and a main.py\nJust write your function\nDO NOT USE NESTED CONDITIONALS\n\nBuilt-in functions you can choose to use: round(), input(), float(), str(), int()"
  },
  {
    "objectID": "practice-01.html",
    "href": "practice-01.html",
    "title": "Practice Problems",
    "section": "",
    "text": "I’ve created a Google colab notebook with practice exercises, and test cases. Here are the instructions to use the notebook:\n\nAccess notebook on google colab – you need to be signed in with a google account\nIf a black screen shows up, click on the “open with Google colab” at the top of the screen\nRun the first chunk of code. No need to change it, just make sure you run it by hovering over the [ ] on the left upper corner of the code chunk and then pressing the ► button that appears\nScroll down and follow the instructions to write different functions. Make sure you run your code by hovering over the [ ] on the left upper corner of the code chunk and then pressing the ► button that appears\nRun the following chunk with the testing (the one that calls the pass_or_fail function)\n\nNotebooks:\n\nPractice Problems Module 2\nPractice Problems Module 3\nPractice Problems Module 4\nPractice Problems Module 5\n\nMidterm 1 (Modules 1-5) + Study Guide 1\n\nPractice Problems Module 6\nPractice Problems Module 7 I\nPractice Problems Module 7 II\nExtra Practice Problems\nPractice Problems Module 7\nPractice Problems Module 8 I\nPractice Problems Module 8 II\nPractice Problems Module 9\nPractice Problems Module 10\nPractice Problems Module 11\nPractice Problems Module 11\nPractice Problems Module 12 (Quiz 11)\nPractice Problems Module 13\nPractice problems Module 13 II (Quiz 12)\nPractice Problems Module 14\n\n\nVideo demonstration\n\n\n\nSolutions\nI highly recommend you do not look at the solutions before you try writing the practice functions yourself. Once you wrote your functions, you can compare yours with my solutions:\n\nSolutions for practice problems Module 2\nSolutions for practice problems Module 3\nSolutions for practice problems Module 4\nSolutions for practice problems Module 5\nSolutions for practice problems Module 6\nSolutions for practice problems Module 7 I\nSolutions for practice problems Module 7 II\nSolutions for practice problems\nSolutions for practice problems Module 7 III\nSolutions for practice problems Module 8 I\nSolutions for practice problems Module 8 II\nSolutions for practice problems Module 9\nSolutions for practice problems Module 10\nSolutions for practice problems Module 11\nSolutions for practice problems Module 11\n[Solutions for practice problems Module 12\nSolutions for practice problems Module 13\nSolutions for practice problems Module 13 II\nSolutions for practice problems Module 14"
  },
  {
    "objectID": "slides-15-01.html#try-and-except",
    "href": "slides-15-01.html#try-and-except",
    "title": "handling exceptions (class slides)",
    "section": "try: and except:",
    "text": "try: and except:\n\nCan be used to catch errors in a program without it having to crash!\nThe programmer can provide more information and/or context as to what happened\nCan make debugging easier if you provide clear error messages"
  },
  {
    "objectID": "slides-15-01.html#try-and-except-1",
    "href": "slides-15-01.html#try-and-except-1",
    "title": "handling exceptions (class slides)",
    "section": "try: and except:",
    "text": "try: and except:\n\nages = [35, 35, 23, 18, 45, 18, 72]\ntry:\n    print(ages[0] + ages[4])\nexcept:\n    print('Failed to print the sum of two ages')\n\n80\n\n\n\nages = [35, 35, 23, 18, 45, 18, 72]\ntry:\n    print(ages[0] + ages[7])\nexcept:\n    print('Failed to print the sum of two ages')\n\nFailed to print the sum of two ages"
  },
  {
    "objectID": "slides-15-01.html#try-and-except-2",
    "href": "slides-15-01.html#try-and-except-2",
    "title": "handling exceptions (class slides)",
    "section": "try: and except:",
    "text": "try: and except:\n\nages = [35, 35, 23, 18, 45, 18, 72]\ntry:\n    print(ages[0] + ages[7])\nexcept:\n    print('Failed to print the sum of two ages')\n    print('Tried to get a value from an index that does not exist in the list')\n\nFailed to print the sum of two ages\nTried to get a value from an index that does not exist in the list\n\n\n\nages = [35, 35, 23, 18, 45, 18, 72]\nprint(ages[0] + ages[7])\n\nIndexError: list index out of range"
  },
  {
    "objectID": "slides-15-01.html#attendance",
    "href": "slides-15-01.html#attendance",
    "title": "handling exceptions (class slides)",
    "section": "Attendance",
    "text": "Attendance\nWrite a python function called valid_input that takes a string as argument and returns False if the string is not a year (check if the length is 4, and if the string is an integer).\nName your file year_validation.py\n\nprint(valid_input(\"2023\")) # True\nprint(valid_input(\"20235\")) # False\nprint(valid_input(\"test\")) # False"
  },
  {
    "objectID": "slides-15-01.html#attendance---solution",
    "href": "slides-15-01.html#attendance---solution",
    "title": "handling exceptions (class slides)",
    "section": "Attendance - solution",
    "text": "Attendance - solution\n\ndef valid_input(string):\n    if len(string) != 4:\n        return False\n    try:\n        int(string)\n        return True\n    except:\n        print(\"Invalid input. Please enter a valid year.\")\n        return False\n\ndef main():\n    print(valid_input(\"2023\"))\n    print(valid_input(\"20235\"))\n    print(valid_input(\"test\"))\n\nmain()\n\nTrue\nFalse\nInvalid input. Please enter a valid year.\nFalse"
  },
  {
    "objectID": "slides-15-01.html#write-a-function",
    "href": "slides-15-01.html#write-a-function",
    "title": "handling exceptions (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is read_numbers\nIt takes a string for a file name\nIt opens the file in read mode, it splits the lines by space\nIt returns a list with all float numbers in the file\nDownload test file\n\n\nprint( read_numbers(\"weather.txt\") ) # [89.5, 50.2, 93.4, 69.0]"
  },
  {
    "objectID": "slides-15-01.html#write-a-function-solution",
    "href": "slides-15-01.html#write-a-function-solution",
    "title": "handling exceptions (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef read_numbers(file_name):\n  floats = []\n  not_floats = []\n  f = open(file_name, \"r\")\n  for line in f:\n    words = line.strip().split(\" \")\n    for w in words:\n      try:\n        floats.append(float(w))\n      except:\n        not_floats.append(w)\n  f.close()\n  return floats\n\ndef main():\n  print( read_numbers(\"weather.txt\") ) # [89.5, 50.2, 93.4, 69.0]\n  \nmain()\n\n[89.5, 50.2, 93.4, 69.0]"
  },
  {
    "objectID": "slides-15-01.html#write-a-function-solution-2",
    "href": "slides-15-01.html#write-a-function-solution-2",
    "title": "handling exceptions (class slides)",
    "section": "Write a function – solution 2",
    "text": "Write a function – solution 2\n\ndef read_numbers(file_name):\n  floats = []\n  not_floats = []\n  f = open(file_name, \"r\")\n  for line in f:\n    words = line.strip().split(\" \")\n    for w in words:\n      try:\n        floats.append(float(w))\n      except Exception as err:\n        not_floats.append(w)\n        print(err)\n      else:\n        print(\"coverted\", w, \"successfully\")\n  f.close()\n  return floats\n\ndef main():\n  print( read_numbers(\"weather.txt\") ) # [89.5, 50.2, 93.4, 69.0]\n  \nmain()\n\ncould not convert string to float: 'Tucson'\ncould not convert string to float: '--'\ncould not convert string to float: 'high'\ncould not convert string to float: 'temperature:'\ncoverted 89.5 successfully\ncould not convert string to float: 'Tucson'\ncould not convert string to float: '--'\ncould not convert string to float: 'low'\ncould not convert string to float: 'temperature:'\ncoverted 50.2 successfully\ncould not convert string to float: 'Phoenix'\ncould not convert string to float: '--'\ncould not convert string to float: 'high'\ncould not convert string to float: 'temperature:'\ncoverted 93.4 successfully\ncould not convert string to float: 'Phoenix'\ncould not convert string to float: '--'\ncould not convert string to float: 'low'\ncould not convert string to float: 'temperature:'\ncoverted 69.0 successfully\n[89.5, 50.2, 93.4, 69.0]"
  },
  {
    "objectID": "data_structures_list.html",
    "href": "data_structures_list.html",
    "title": "Lists (Data Structures)",
    "section": "",
    "text": "Data structures are basically just that - they are structures which can hold some data together. In other words, they are used to store a collection of related data.\nThere are four built-in data structures in Python. In this module, we will see how to use lists and how they make life easier for us.\n\n\nA list is a data structure that holds an ordered collection of items i.e. you can store a sequence of items in a list. This is easy to imagine if you can think of a shopping list where you have a list of items to buy, except that you probably have each item on a separate line in your shopping list whereas in Python you put commas in between them.\nThe list of items should be enclosed in square brackets so that Python understands that you are specifying a list. Once you have created a list, you can add, remove or search for items in the list. Since we can add and remove items, we say that a list is a mutable data type i.e. this type can be altered.\nExample:\nshoplist = ['apple', 'mango', 'carrot', 'banana']\nname = 'swaroop'\n\n# Indexing or 'Subscription' operation #\nprint('Item 0 is', shoplist[0])\nprint('Item 1 is', shoplist[1])\nprint('Item 2 is', shoplist[2])\nprint('Item 3 is', shoplist[3])\nprint('Item -1 is', shoplist[-1])\nprint('Item -2 is', shoplist[-2])\nprint('Character 0 is', name[0])\n\n# Slicing on a list #\nprint('Item 1 to 3 is', shoplist[1:3])\nprint('Item 2 to end is', shoplist[2:])\nprint('Item 1 to -1 is', shoplist[1:-1])\nprint('Item start to end is', shoplist[:])\n\n# Slicing on a string #\nprint('characters 1 to 3 is', name[1:3])\nprint('characters 2 to end is', name[2:])\nprint('characters 1 to -1 is', name[1:-1])\nprint('characters start to end is', name[:])\nOutput:\n\nItem 0 is apple\nItem 1 is mango\nItem 2 is carrot\nItem 3 is banana\nItem -1 is banana\nItem -2 is carrot\nCharacter 0 is s\nItem 1 to 3 is ['mango', 'carrot']\nItem 2 to end is ['carrot', 'banana']\nItem 1 to -1 is ['mango', 'carrot']\nItem start to end is ['apple', 'mango', 'carrot', 'banana']\ncharacters 1 to 3 is wa\ncharacters 2 to end is aroop\ncharacters 1 to -1 is waroo\ncharacters start to end is swaroop\n\nHow It Works\nFirst, we see how to use indexes to get individual items of a list or a string (also known as sequences). This is also referred to as the subscription operation. Whenever you specify a number to a sequence within square brackets as shown above, Python will fetch you the item corresponding to that position in the sequence. Remember that Python starts counting numbers from 0. Hence, shoplist[0] fetches the first item and shoplist[3] fetches the fourth item in the shoplist sequence.\nThe index can also be a negative number, in which case, the position is calculated from the end of the sequence. Therefore, shoplist[-1] refers to the last item in the sequence and shoplist[-2] fetches the second last item in the sequence.\nThe slicing operation is used by specifying the name of the sequence followed by an optional pair of numbers separated by a colon within square brackets. Note that this is very similar to the indexing operation you have been using till now. Remember the numbers are optional but the colon isn’t.\nThe first number (before the colon) in the slicing operation refers to the position from where the slice starts and the second number (after the colon) indicates where the slice will stop at. If the first number is not specified, Python will start at the beginning of the sequence. If the second number is left out, Python will stop at the end of the sequence. Note that the slice returned starts at the start position and will end just before the end position i.e. the start position is included but the end position is excluded from the sequence slice.\nThus, shoplist[1:3] returns a slice of the sequence starting at position 1, includes position 2 but stops at position 3 and therefore a slice of two items is returned. Similarly, shoplist[:] returns a copy of the whole sequence.\nYou can also do slicing with negative positions. Negative numbers are used for positions from the end of the sequence. For example, shoplist[:-1] will return a slice of the sequence which excludes the last item of the sequence but contains everything else."
  },
  {
    "objectID": "data_structures_list.html#list",
    "href": "data_structures_list.html#list",
    "title": "Lists (Data Structures)",
    "section": "",
    "text": "A list is a data structure that holds an ordered collection of items i.e. you can store a sequence of items in a list. This is easy to imagine if you can think of a shopping list where you have a list of items to buy, except that you probably have each item on a separate line in your shopping list whereas in Python you put commas in between them.\nThe list of items should be enclosed in square brackets so that Python understands that you are specifying a list. Once you have created a list, you can add, remove or search for items in the list. Since we can add and remove items, we say that a list is a mutable data type i.e. this type can be altered.\nExample:\nshoplist = ['apple', 'mango', 'carrot', 'banana']\nname = 'swaroop'\n\n# Indexing or 'Subscription' operation #\nprint('Item 0 is', shoplist[0])\nprint('Item 1 is', shoplist[1])\nprint('Item 2 is', shoplist[2])\nprint('Item 3 is', shoplist[3])\nprint('Item -1 is', shoplist[-1])\nprint('Item -2 is', shoplist[-2])\nprint('Character 0 is', name[0])\n\n# Slicing on a list #\nprint('Item 1 to 3 is', shoplist[1:3])\nprint('Item 2 to end is', shoplist[2:])\nprint('Item 1 to -1 is', shoplist[1:-1])\nprint('Item start to end is', shoplist[:])\n\n# Slicing on a string #\nprint('characters 1 to 3 is', name[1:3])\nprint('characters 2 to end is', name[2:])\nprint('characters 1 to -1 is', name[1:-1])\nprint('characters start to end is', name[:])\nOutput:\n\nItem 0 is apple\nItem 1 is mango\nItem 2 is carrot\nItem 3 is banana\nItem -1 is banana\nItem -2 is carrot\nCharacter 0 is s\nItem 1 to 3 is ['mango', 'carrot']\nItem 2 to end is ['carrot', 'banana']\nItem 1 to -1 is ['mango', 'carrot']\nItem start to end is ['apple', 'mango', 'carrot', 'banana']\ncharacters 1 to 3 is wa\ncharacters 2 to end is aroop\ncharacters 1 to -1 is waroo\ncharacters start to end is swaroop\n\nHow It Works\nFirst, we see how to use indexes to get individual items of a list or a string (also known as sequences). This is also referred to as the subscription operation. Whenever you specify a number to a sequence within square brackets as shown above, Python will fetch you the item corresponding to that position in the sequence. Remember that Python starts counting numbers from 0. Hence, shoplist[0] fetches the first item and shoplist[3] fetches the fourth item in the shoplist sequence.\nThe index can also be a negative number, in which case, the position is calculated from the end of the sequence. Therefore, shoplist[-1] refers to the last item in the sequence and shoplist[-2] fetches the second last item in the sequence.\nThe slicing operation is used by specifying the name of the sequence followed by an optional pair of numbers separated by a colon within square brackets. Note that this is very similar to the indexing operation you have been using till now. Remember the numbers are optional but the colon isn’t.\nThe first number (before the colon) in the slicing operation refers to the position from where the slice starts and the second number (after the colon) indicates where the slice will stop at. If the first number is not specified, Python will start at the beginning of the sequence. If the second number is left out, Python will stop at the end of the sequence. Note that the slice returned starts at the start position and will end just before the end position i.e. the start position is included but the end position is excluded from the sequence slice.\nThus, shoplist[1:3] returns a slice of the sequence starting at position 1, includes position 2 but stops at position 3 and therefore a slice of two items is returned. Similarly, shoplist[:] returns a copy of the whole sequence.\nYou can also do slicing with negative positions. Negative numbers are used for positions from the end of the sequence. For example, shoplist[:-1] will return a slice of the sequence which excludes the last item of the sequence but contains everything else."
  },
  {
    "objectID": "slides-07-02.html#while-vs.-for-loops",
    "href": "slides-07-02.html#while-vs.-for-loops",
    "title": "for loops with range (class slides)",
    "section": "while vs. for loops",
    "text": "while vs. for loops\nIn addition to while, we can use for to create loops\n\nvalues = [70, 20, 30]\nindex = 0\nwhile index &lt; len(values):\n  print(values[index])\n  index += 1\n\n70\n20\n30\n\n\n\nvalues = [70, 20, 30]\nfor index in range(len(values)):\n  print(values[index])\n\n70\n20\n30"
  },
  {
    "objectID": "slides-07-02.html#write-a-function",
    "href": "slides-07-02.html#write-a-function",
    "title": "for loops with range (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is make_all_even\nIt takes one argument, a list of integers\nIt iterates over the list, changing odd numbers to even number (even up)\nUse a for loop\n\n\ntest_integers = [1, 2, 3, 4]\nassert make_all_even(test_integers) == [2, 2, 4, 4]"
  },
  {
    "objectID": "slides-07-02.html#write-a-function-solution",
    "href": "slides-07-02.html#write-a-function-solution",
    "title": "for loops with range (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef make_all_even(integers):\n  # for each index in list\n  for index in range(len(integers)):\n    integers[index] += integers[index] % 2 # add zero if even, one if odd\n  return integers\n      \ndef main():\n  test_integers = [1, 2, 3, 4]\n  assert make_all_even(test_integers) == [2, 2, 4, 4]\n  print(test_integers) # we print the list we created before function call\n  \nmain()\n\n[2, 2, 4, 4]"
  },
  {
    "objectID": "slides-07-02.html#write-a-function-1",
    "href": "slides-07-02.html#write-a-function-1",
    "title": "for loops with range (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is indices_of_vowels\nIt takes a single string as its parameter.\nIt returns a list of integers that represent the indices of the vowels in the original list\nUse a for loop\n\nTest cases:\n\nassert indices_of_vowels(\"hello\") == [1, 4]\nassert indices_of_vowels(\"\") == []\nassert indices_of_vowels(\"aeiou\") == [0, 1, 2, 3, 4]"
  },
  {
    "objectID": "slides-07-02.html#write-a-function-solution-1",
    "href": "slides-07-02.html#write-a-function-solution-1",
    "title": "for loops with range (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef indices_of_vowels(string):\n  result = [] # initialize empty list to hold indices\n  # for every index in list\n  for index in range(len(string)):\n    if string[index] in \"aeiou\": # check if character is vowel\n      result.append(index) # append index to result\n  return result\n\ndef main():\n  assert indices_of_vowels(\"hello\") == [1, 4]\n  assert indices_of_vowels(\"\") == []\n  assert indices_of_vowels(\"aeiou\") == [0, 1, 2, 3, 4]\n\nmain()"
  },
  {
    "objectID": "slides-07-02.html#more-on-how-to-use-range",
    "href": "slides-07-02.html#more-on-how-to-use-range",
    "title": "for loops with range (class slides)",
    "section": "More on how to use range()",
    "text": "More on how to use range()\nSyntax: range(start, stop, step)\n\nstart Optional. An integer number specifying at which position to start. Default is 0\nstop Required. An integer number specifying at which position to stop (not included).\nstep Optional. An integer number specifying the incrementation. Default is 1"
  },
  {
    "objectID": "slides-07-02.html#more-on-how-to-use-range-1",
    "href": "slides-07-02.html#more-on-how-to-use-range-1",
    "title": "for loops with range (class slides)",
    "section": "More on how to use range()",
    "text": "More on how to use range()\n\nfor n in range(5):\n  print(n)\n\n0\n1\n2\n3\n4\n\n\n\nfor n in range(0, 5, 1):\n  print(n)\n\n0\n1\n2\n3\n4\n\n\n\nfor n in range(0, 5, 2):\n  print(n)\n\n0\n2\n4"
  },
  {
    "objectID": "slides-07-02.html#write-a-function-2",
    "href": "slides-07-02.html#write-a-function-2",
    "title": "for loops with range (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is every_two_together\nIt takes one argument, a list of characters\nIt creates a new string with items at even indices in characters concatenated together\nIt returns the string created\nUse a for loop\n\nTest cases:\n\ncharacters = [\"a\", \"e\", \"p\", \"o\", \"p\", \"w\", \"l\", \"i\", \"e\", \"f\"]\nassert every_two_together(characters) == \"apple\""
  },
  {
    "objectID": "slides-07-02.html#write-a-function-solution-2",
    "href": "slides-07-02.html#write-a-function-solution-2",
    "title": "for loops with range (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\nWhat other test cases should we run?\n\ndef every_two_together(chars):\n  new_string = \"\"\n  for i in range(0, len(chars), 2):\n    new_string += chars[i]\n  return new_string\n\ndef main():\n  characters = [\"a\", \"e\", \"p\", \"o\", \"p\", \"w\", \"l\", \"i\", \"e\", \"f\"]\n  assert every_two_together(characters) == \"apple\"\n  \nmain()"
  },
  {
    "objectID": "slides-07-02.html#write-a-function-3",
    "href": "slides-07-02.html#write-a-function-3",
    "title": "for loops with range (class slides)",
    "section": "Write a function",
    "text": "Write a function\nTest cases:\n\nmy_numbers = [0, 1, 0, 3, 0]\nassert add_every_two(my_numbers) == 0"
  },
  {
    "objectID": "slides-07-02.html#write-a-function-solution-3",
    "href": "slides-07-02.html#write-a-function-solution-3",
    "title": "for loops with range (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef add_every_two(numbers):\n  result = 0\n  for i in range(0, len(numbers), 2):\n    result += numbers[i]\n  return result\n\ndef main():\n  my_numbers = [0, 1, 0, 3, 0]\n  assert add_every_two(my_numbers) == 0\n  \nmain()"
  },
  {
    "objectID": "mutability.html",
    "href": "mutability.html",
    "title": "Mutability",
    "section": "",
    "text": "There are two types of objects in Python, mutable and immutable. When we assign a variable, we are creating a reference to the object. In other words, the variable name “points” to the object in memory.\nA variable does not actually hold the value of the object within it. Instead, a variable is a reference to the object. The object “lives” somewhere in your computer’s memory (RAM). When you assign a value to a new variable, the variable references that object. If you assign the same variable name to a new object, the new object is created, placed in memory, and the the variable references it.\nMost values in Python (strings, lists, integers, floats, booleans) are objects. Mutable objects can be changed once they are created. Immutable objects cannot be changed once they are created.\nImmutable objects in Python include integers, floats, strings, and tuples (we will work with tuples in the future, no need to worry about them now). Lists are mutable. (so are dictionaries, which we will also be working with in the future)\nHere’s how we can change a list:\nsongs = [\"Lavender Haze\", \"Calm Down\", \"As It Was\", \"About Damn Time\"]\nsongs\n\n['Lavender Haze', 'Calm Down', 'As It Was', 'About Damn Time']\nsongs[0] = \"Flowers\"\nsongs\n\n['Flowers', 'Calm Down', 'As It Was', 'About Damn Time']\nNote that although we can retrieve values from a string using [ ], we are unable to change a character inside a string using indexing because strings are immutable."
  },
  {
    "objectID": "mutability.html#list-methods",
    "href": "mutability.html#list-methods",
    "title": "Mutability",
    "section": "List methods",
    "text": "List methods\nMutability is very useful with lists. There are a number of built-in list methods we can use:\n\n.append() adds an element at the end of the list: list.append(value)\n.insert() adds an element at the provided index: list.insert(index, value)\n.pop() removes a specific element at the provided index: list.pop(index)\n.remove() removes the first element with the provided value: list.remove(value)\n\nHere’s how .append() works:\n\nsongs = [\"Lavender Haze\", \"Calm Down\", \"As It Was\", \"About Damn Time\"]\nsongs\n\n['Lavender Haze', 'Calm Down', 'As It Was', 'About Damn Time']\n\n\n\nsongs.append(\"Flowers\")\nsongs\n\n['Lavender Haze', 'Calm Down', 'As It Was', 'About Damn Time', 'Flowers']\n\n\nHere’s how .insert() works:\n\nsongs = [\"Lavender Haze\", \"Calm Down\", \"As It Was\", \"About Damn Time\"]\nsongs\n\n['Lavender Haze', 'Calm Down', 'As It Was', 'About Damn Time']\n\n\n\nsongs.insert(0, \"Flowers\")\nsongs\n\n['Flowers', 'Lavender Haze', 'Calm Down', 'As It Was', 'About Damn Time']\n\n\nHere’s how .pop() works:\n\nsongs = [\"Lavender Haze\", \"Calm Down\", \"As It Was\", \"About Damn Time\"]\nsongs.pop(0)\n\n'Lavender Haze'\n\n\n\nsongs\n\n['Calm Down', 'As It Was', 'About Damn Time']\n\n\nHere’s how .remove() works:\n\nsongs = [\"Lavender Haze\", \"Calm Down\", \"As It Was\", \"About Damn Time\"]\nsongs.remove(\"Lavender Haze\")\n\n\nsongs\n\n['Calm Down', 'As It Was', 'About Damn Time']"
  },
  {
    "objectID": "tas.html",
    "href": "tas.html",
    "title": "TAs and Office Hours",
    "section": "",
    "text": "The Undergraduate Teaching Assistants (UGTAs or TAs) in this class are here to help. You are also welcome to send an email.\nThe best way to talk with a particular TA is via office hours, so check the schedule (scroll down this page).\n\nCourse Coordinators\nCourse coordinators are experienced UGTAs that assist the instructor with course management and will have a supervisory role with the course UGTAs.\n\nEmma Elliott\nAmyra White\n\n\n\nTAs\nUndergraduate Teaching Assistants (UGTAs) in the Department of Computer Science assist instructors in delivering undergraduate computer science courses. CS introductory courses utilize active learning and collaborative learning spaces to provide a collaborative and supportive environment for students learning programming skills. All teaching assistants have taken and excelled in the courses they support and are familiar with the material to mentor new students as they learn.\n\nAdan Baca\nAidan Linder\nSamarie Tavenner\nZachary Nicolosi\nEthan Holley\nApurbo Barua\nLilian Wei\nConnor Kippes\nMichelle Asher\n\nInterested in becoming a TA in the future? Check out more information about what TAs do and how to apply.\n\n\nOffice Hours\nShown below is the office hours schedule. The in-person office hours are hosted in Gould-Simpson 914. Xinchen’s office hours are in GS 829. An (O) next to a name indicates that the office hour is online. For these office hours, check D2L for details."
  },
  {
    "objectID": "slides-05-02.html#string-indexing",
    "href": "slides-05-02.html#string-indexing",
    "title": "loops + strings (class slides)",
    "section": "String indexing",
    "text": "String indexing\n\nStrings are sequences in Python\nWe can retrieve values in a sequence using [ ]\n\n\nname = \"Xinchen\"\nname[0]\n\n'X'\n\n\nNote that the first index in a sequence is always zero."
  },
  {
    "objectID": "slides-05-02.html#string-indexing-1",
    "href": "slides-05-02.html#string-indexing-1",
    "title": "loops + strings (class slides)",
    "section": "String indexing",
    "text": "String indexing\nSince the first index of a sequence is zero, the last index is going to be the length of the string minus 1\n\nname = \"Xinchen\"\nlen(name)\n\n7\n\n\n\nname = \"Xinchen\"\nname[6]\n\n'n'\n\n\n\nname = \"Xinchen\"\nname[7] # this will throw an error"
  },
  {
    "objectID": "slides-05-02.html#evaluate-expressions",
    "href": "slides-05-02.html#evaluate-expressions",
    "title": "loops + strings (class slides)",
    "section": "Evaluate expressions",
    "text": "Evaluate expressions\n\nmy_str = \"Clint Eastwood\"\nmy_str[11] + my_str[1] + my_str[13]\n\nmy_str = \"cider\"\nmy_str[0] + my_str[4] + my_str[1] + my_str[3] + my_str[2]\n\nmy_str = \"dusty\"\nmy_str[2] + my_str[3] + my_str[1] + my_str[0] + my_str[4]"
  },
  {
    "objectID": "slides-05-02.html#evaluate-expressions-1",
    "href": "slides-05-02.html#evaluate-expressions-1",
    "title": "loops + strings (class slides)",
    "section": "Evaluate expressions",
    "text": "Evaluate expressions\n\nmy_str = \"Clint Eastwood\"\nmy_str[11] + my_str[1] + my_str[13]\n\n'old'\n\n\n\nmy_str = \"cider\"\nmy_str[0] + my_str[4] + my_str[1] + my_str[3] + my_str[2]\n\n'cried'\n\n\n\nmy_str = \"dusty\"\nmy_str[2] + my_str[3] + my_str[1] + my_str[0] + my_str[4]\n\n'study'"
  },
  {
    "objectID": "slides-05-02.html#write-a-function",
    "href": "slides-05-02.html#write-a-function",
    "title": "loops + strings (class slides)",
    "section": "Write a function",
    "text": "Write a function\nFunction four_letter_anagram takes a string, and four integers a, b, c and d. It returns the anagram of the string according to the indices a, b, c and d – concatenate the individual characters.\nName your file anagram.py and submit it for attendance.\nTest cases:\n\nassert four_letter_anagram(\"balm\", 2, 1, 3, 0) == 'lamb'\nassert four_letter_anagram(\"loin\", 0, 2, 1, 3) == 'lion'\nassert four_letter_anagram(\"reap\", 3, 1, 2, 0) == 'pear'"
  },
  {
    "objectID": "slides-05-02.html#write-a-function---solution",
    "href": "slides-05-02.html#write-a-function---solution",
    "title": "loops + strings (class slides)",
    "section": "Write a function - solution",
    "text": "Write a function - solution\n\ndef four_letter_anagram(word, a, b, c, d):\n  return word[a] + word[b] + word[c] + word[d]\n\ndef main():\n  assert four_letter_anagram(\"balm\", 2, 1, 3, 0) == 'lamb'\n  assert four_letter_anagram(\"loin\", 0, 2, 1, 3) == 'lion'\n  assert four_letter_anagram(\"reap\", 3, 1, 2, 0) == 'pear'\n\nmain()"
  },
  {
    "objectID": "slides-05-02.html#in-operator",
    "href": "slides-05-02.html#in-operator",
    "title": "loops + strings (class slides)",
    "section": "in operator",
    "text": "in operator\nThe in operator determines whether a given value is a constituent element of a sequence (such as a string)\n\n\"i\" in \"Xinchen\"\n\nTrue\n\n\n\n\"inc\" in \"Xinchen\"\n\nTrue\n\n\n\n\"i\" in \"aeiou\"\n\nTrue"
  },
  {
    "objectID": "slides-05-02.html#evaluate-the-expressions",
    "href": "slides-05-02.html#evaluate-the-expressions",
    "title": "loops + strings (class slides)",
    "section": "Evaluate the expressions",
    "text": "Evaluate the expressions\n\n\"a\" in \"aeiou\"\n\"b\" in \"aeiou\"\nnot \"b\" in \"aeiou\"\n\"0\" in \"0987654321.\"\n\"10.0\" in  \"0987654321.\""
  },
  {
    "objectID": "slides-05-02.html#evaluate-the-expressions-1",
    "href": "slides-05-02.html#evaluate-the-expressions-1",
    "title": "loops + strings (class slides)",
    "section": "Evaluate the expressions",
    "text": "Evaluate the expressions\n\n\"a\" in \"aeiou\"\n\nTrue\n\n\n\n\"b\" in \"aeiou\"\n\nFalse\n\n\n\nnot \"b\" in \"aeiou\"\n\nTrue\n\n\n\n\"0\" in \"0987654321.\"\n\nTrue\n\n\n\n\"10.0\" in  \"0987654321.\"\n\nFalse"
  },
  {
    "objectID": "slides-05-02.html#before-we-proceed-a-refresher",
    "href": "slides-05-02.html#before-we-proceed-a-refresher",
    "title": "loops + strings (class slides)",
    "section": "Before we proceed, a refresher …",
    "text": "Before we proceed, a refresher …\nRemember the string method.isnumeric()?\n\nuser_input = \"paul\"\nuser_input.isnumeric()\n\nFalse\n\n\n\nuser_input = \"12\"\nuser_input.isnumeric()\n\nTrue\n\n\n\nuser_input = \"12.5\"\nuser_input.isnumeric()\n\nFalse"
  },
  {
    "objectID": "slides-05-02.html#write-a-function-1",
    "href": "slides-05-02.html#write-a-function-1",
    "title": "loops + strings (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a function is_numeric_one_char that takes one string argument of any length (assume length &gt; 0).\nIt returns True if the first character of the argument is a digit (0-9), False otherwise (use [ ] to index the string and the in operator).\nTest cases:\n\n  assert is_numeric_one_char(\"0\") == True\n  assert is_numeric_one_char(\"000\")  == True\n  assert is_numeric_one_char(\"9\") == True\n  assert is_numeric_one_char(\"a\") == False"
  },
  {
    "objectID": "slides-05-02.html#write-a-function-solution",
    "href": "slides-05-02.html#write-a-function-solution",
    "title": "loops + strings (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef is_numeric_one_char(string):\n  return string[0] in \"0123456789\"\n\ndef main():\n  assert is_numeric_one_char(\"0\") == True\n  assert is_numeric_one_char(\"000\")  == True\n  assert is_numeric_one_char(\"9\") == True\n  assert is_numeric_one_char(\"a\") == False\n  \nmain()"
  },
  {
    "objectID": "slides-05-02.html#improving-on-is_numeric_one_char",
    "href": "slides-05-02.html#improving-on-is_numeric_one_char",
    "title": "loops + strings (class slides)",
    "section": "Improving on is_numeric_one_char()",
    "text": "Improving on is_numeric_one_char()\nHow to check every character in a string of any length?\nFor example, how to check if every character in \"BladeRunner2049\" is a digit (0-9)?"
  },
  {
    "objectID": "slides-05-02.html#while-loops-using-an-index",
    "href": "slides-05-02.html#while-loops-using-an-index",
    "title": "loops + strings (class slides)",
    "section": "While loops – using an index",
    "text": "While loops – using an index\n\nOne technique that can be used to control the number of loop iterations is using an index variable\nFor while loops, an index variable is:\n\nDefined before the loop\nUsed in the condition of the loop\nIncremented within the loop"
  },
  {
    "objectID": "slides-05-02.html#while-loops-using-an-index-1",
    "href": "slides-05-02.html#while-loops-using-an-index-1",
    "title": "loops + strings (class slides)",
    "section": "While loops – using an index",
    "text": "While loops – using an index\nPrint characters at even indices.\n\nword = \"BladeRunner2049\"\nindex = 0\nwhile index &lt; len(word):\n    print(word[index])\n    # Can add other lines here too\n    index = index + 2\n\nB\na\ne\nu\nn\nr\n0\n9"
  },
  {
    "objectID": "slides-05-02.html#improve-on-is_numeric_one_char",
    "href": "slides-05-02.html#improve-on-is_numeric_one_char",
    "title": "loops + strings (class slides)",
    "section": "Improve on is_numeric_one_char()",
    "text": "Improve on is_numeric_one_char()\nFunction name is_numeric that takes one string argument of any length (assume length &gt; 0).\nIt returns True if every character in the argument is a digit (0-9), False otherwise (if any character is not a digit).\nUse in operator instead of built-in function isnumeric().\n\nassert is_numeric(\"0\") == True\nassert is_numeric(\"1090\") == True\nassert is_numeric(\"95\") ==  True\nassert is_numeric(\"10a\") == False"
  },
  {
    "objectID": "slides-05-02.html#is_numeric-solution",
    "href": "slides-05-02.html#is_numeric-solution",
    "title": "loops + strings (class slides)",
    "section": "is_numeric() solution",
    "text": "is_numeric() solution\n\ndef is_numeric(my_string):\n  index = 0\n  while index &lt; len(my_string):\n    if my_string[index] not in \"0123456789\":\n      return False\n    index += 1\n  return True\n\ndef main():\n  assert is_numeric(\"234\") == True\n  assert is_numeric(\"abc\") == False\n  assert is_numeric(\"12c\") == False\n  assert is_numeric(\"12.3\") == False\n  \nmain()"
  },
  {
    "objectID": "slides-05-02.html#quiz-05",
    "href": "slides-05-02.html#quiz-05",
    "title": "loops + strings (class slides)",
    "section": "Quiz 05",
    "text": "Quiz 05\n\n\ncurrent time\n\n\n\n\n\n\nYou have 10 minutes to complete the quiz.\nNo need to write main() function."
  },
  {
    "objectID": "slides-05-02.html#is_numeric-solution-1",
    "href": "slides-05-02.html#is_numeric-solution-1",
    "title": "loops + strings (class slides)",
    "section": "is_numeric() solution",
    "text": "is_numeric() solution\nHow do we change our function so that the last test case (“12.3”) returns True instead?\n\ndef is_numeric(my_string):\n  index = 0\n  while index &lt; len(my_string):\n    if my_string[index] not in \"0123456789\":\n      return False\n    index += 1\n  return True\n\ndef main():\n  assert is_numeric(\"234\") == True\n  assert is_numeric(\"abc\") == False\n  assert is_numeric(\"12c\") == False\n  assert is_numeric(\"12.3\") == False # how to return True?\n  \nmain()"
  },
  {
    "objectID": "slides-05-02.html#is_numeric-solution-2",
    "href": "slides-05-02.html#is_numeric-solution-2",
    "title": "loops + strings (class slides)",
    "section": "is_numeric() solution",
    "text": "is_numeric() solution\nHow do we change our function so that the last test case (“1.2.3”) returns False instead?\n\ndef is_numeric(my_string):\n  index = 0\n  while index &lt; len(my_string):\n    if my_string[index] not in \"0123456789.\":\n      return False\n    index += 1\n  return True\n\ndef main():\n  assert is_numeric(\"234\") == True\n  assert is_numeric(\"abc\") == False\n  assert is_numeric(\"12c\") == False\n  assert is_numeric(\"12.3\") == True\n  assert is_numeric(\"1.2.3\") == True # how to return False?\n  \nmain()"
  },
  {
    "objectID": "slides-05-02.html#is_numeric-solution-1-1",
    "href": "slides-05-02.html#is_numeric-solution-1-1",
    "title": "loops + strings (class slides)",
    "section": "is_numeric() – solution 1",
    "text": "is_numeric() – solution 1\n\ndef is_numeric(my_string):\n  index = 0\n  count_period = 0\n  while index &lt; len(my_string):\n    if my_string[index] == \".\":\n      count_period += 1\n    if my_string[index] not in \"0123456789.\" or count_period &gt; 1:\n      return False\n    index += 1\n  return True\n\ndef main():\n  assert is_numeric(\"234\") == True\n  assert is_numeric(\"abc\") == False\n  assert is_numeric(\"12c\") ==  False\n  assert is_numeric(\"12.3\") == True\n  assert is_numeric(\"1.2.3\") == False\n  \nmain()"
  },
  {
    "objectID": "slides-05-02.html#is_numeric-solution-2-1",
    "href": "slides-05-02.html#is_numeric-solution-2-1",
    "title": "loops + strings (class slides)",
    "section": "is_numeric() – solution 2",
    "text": "is_numeric() – solution 2\n\ndef is_numeric(my_string):\n  # create control variable for one decimal point\n  decimal_point = False\n  # create index variable\n  index = 0\n  while index &lt; len(my_string):\n    # first check, can character be found in a number?\n    if my_string[index] not in \"0123456789.\":\n      return False\n    # second check, if a period, has a period been found before?\n    if my_string[index] == \".\":\n      if decimal_point: # a previous period was detected\n        return False\n      else: # first period detected\n        decimal_point = True\n    # increment index  \n    index += 1\n  # while loop executed without returning False\n  # that means every character is valid, so return True\n  return True\n\ndef main():\n  assert is_numeric(\"234\") == True\n  assert is_numeric(\"abc\") == False\n  assert is_numeric(\"12c\") ==  False\n  assert is_numeric(\"12.3\") == True\n  assert is_numeric(\"1.2.3\") == False\n  \nmain()"
  },
  {
    "objectID": "exceptions.html",
    "href": "exceptions.html",
    "title": "Exceptions",
    "section": "",
    "text": "Exceptions occur when exceptional situations occur in your program. For example, what if you are going to read a file and the file does not exist? Or what if you accidentally deleted it when the program was running? Such situations are handled using exceptions.\nSimilarly, what if your program had some invalid statements? This is handled by Python which raises its hands and tells you there is an error.\n\n\nConsider a simple print function call. What if we misspelt print as Print? Note the capitalization. In this case, Python raises a syntax error.\n&gt;&gt;&gt; Print(\"Hello World\")\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'Print' is not defined\n&gt;&gt;&gt; print(\"Hello World\")\nHello World\nObserve that a NameError is raised and also the location where the error was detected is printed. This is what an error handler for this error does.\n\n\n\nWe will try to read input from the user. Enter the first line below and hit the Enter key. When your computer prompts you for input, instead press [ctrl-d] on a Mac or [ctrl-z] with Windows and see what happens. (If you’re using Windows and neither option works, you can try [ctrl-c] in the Command Prompt to generate a KeyboardInterrupt error instead).\n&gt;&gt;&gt; s = input('Enter something --&gt; ')\nEnter something --&gt; Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nEOFError\nPython raises an error called EOFError which basically means it found an end of file symbol (which is represented by ctrl-d) when it did not expect to see it.\n\n\n\nWe can handle exceptions using the try..except statement. We basically put our usual statements within the try-block and put all our error handlers in the except-block.\nExample (save as exceptions_handle.py):\nExample:\ntry:\n    text = input('Enter something --&gt; ')\nexcept EOFError:\n    print('Why did you do an EOF on me?')\nexcept KeyboardInterrupt:\n    print('You cancelled the operation.')\nelse:\n    print('You entered', text)\nOutput:\n\n# Press ctrl + d\n$ python exceptions_handle.py\nEnter something --&gt; Why did you do an EOF on me?\n\n# Press ctrl + c\n$ python exceptions_handle.py\nEnter something --&gt; ^CYou cancelled the operation.\n\n$ python exceptions_handle.py\nEnter something --&gt; No exceptions\nYou entered No exceptions\n\nHow It Works\nWe put all the statements that might raise exceptions/errors inside the try block and then put handlers for the appropriate errors/exceptions in the except clause/block. The except clause can handle a single specified error or exception, or a parenthesized list of errors/exceptions. If no names of errors or exceptions are supplied, it will handle all errors and exceptions.\nNote that there has to be at least one except clause associated with every try clause. Otherwise, what’s the point of having a try block?\nIf any error or exception is not handled, then the default Python handler is called which just stops the execution of the program and prints an error message. We have already seen this in action above.\nYou can also have an else clause associated with a try..except block. The else clause is executed if no exception occurs.\nIn the next example, we will also see how to get the exception object so that we can retrieve additional information.\n\n\n\nAcquiring a resource in the try block and subsequently releasing the resource in the finally block is a common pattern. Hence, there is also a with statement that enables this to be done in a clean manner:\nwith open(\"poem.txt\") as f:\n    for line in f:\n        print(line, end='')\nHow It Works\nWe are using here the open function with the with statement - we leave the closing of the file to be done automatically by with open.\nWhat happens behind the scenes is that there is a protocol used by the with statement. It fetches the object returned by the open statement, let’s call it “thefile” in this case."
  },
  {
    "objectID": "exceptions.html#errors",
    "href": "exceptions.html#errors",
    "title": "Exceptions",
    "section": "",
    "text": "Consider a simple print function call. What if we misspelt print as Print? Note the capitalization. In this case, Python raises a syntax error.\n&gt;&gt;&gt; Print(\"Hello World\")\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'Print' is not defined\n&gt;&gt;&gt; print(\"Hello World\")\nHello World\nObserve that a NameError is raised and also the location where the error was detected is printed. This is what an error handler for this error does."
  },
  {
    "objectID": "exceptions.html#exceptions-1",
    "href": "exceptions.html#exceptions-1",
    "title": "Exceptions",
    "section": "",
    "text": "We will try to read input from the user. Enter the first line below and hit the Enter key. When your computer prompts you for input, instead press [ctrl-d] on a Mac or [ctrl-z] with Windows and see what happens. (If you’re using Windows and neither option works, you can try [ctrl-c] in the Command Prompt to generate a KeyboardInterrupt error instead).\n&gt;&gt;&gt; s = input('Enter something --&gt; ')\nEnter something --&gt; Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nEOFError\nPython raises an error called EOFError which basically means it found an end of file symbol (which is represented by ctrl-d) when it did not expect to see it."
  },
  {
    "objectID": "exceptions.html#handling-exceptions",
    "href": "exceptions.html#handling-exceptions",
    "title": "Exceptions",
    "section": "",
    "text": "We can handle exceptions using the try..except statement. We basically put our usual statements within the try-block and put all our error handlers in the except-block.\nExample (save as exceptions_handle.py):\nExample:\ntry:\n    text = input('Enter something --&gt; ')\nexcept EOFError:\n    print('Why did you do an EOF on me?')\nexcept KeyboardInterrupt:\n    print('You cancelled the operation.')\nelse:\n    print('You entered', text)\nOutput:\n\n# Press ctrl + d\n$ python exceptions_handle.py\nEnter something --&gt; Why did you do an EOF on me?\n\n# Press ctrl + c\n$ python exceptions_handle.py\nEnter something --&gt; ^CYou cancelled the operation.\n\n$ python exceptions_handle.py\nEnter something --&gt; No exceptions\nYou entered No exceptions\n\nHow It Works\nWe put all the statements that might raise exceptions/errors inside the try block and then put handlers for the appropriate errors/exceptions in the except clause/block. The except clause can handle a single specified error or exception, or a parenthesized list of errors/exceptions. If no names of errors or exceptions are supplied, it will handle all errors and exceptions.\nNote that there has to be at least one except clause associated with every try clause. Otherwise, what’s the point of having a try block?\nIf any error or exception is not handled, then the default Python handler is called which just stops the execution of the program and prints an error message. We have already seen this in action above.\nYou can also have an else clause associated with a try..except block. The else clause is executed if no exception occurs.\nIn the next example, we will also see how to get the exception object so that we can retrieve additional information."
  },
  {
    "objectID": "exceptions.html#with",
    "href": "exceptions.html#with",
    "title": "Exceptions",
    "section": "",
    "text": "Acquiring a resource in the try block and subsequently releasing the resource in the finally block is a common pattern. Hence, there is also a with statement that enables this to be done in a clean manner:\nwith open(\"poem.txt\") as f:\n    for line in f:\n        print(line, end='')\nHow It Works\nWe are using here the open function with the with statement - we leave the closing of the file to be done automatically by with open.\nWhat happens behind the scenes is that there is a protocol used by the with statement. It fetches the object returned by the open statement, let’s call it “thefile” in this case."
  },
  {
    "objectID": "slides-05-01.html#announcements",
    "href": "slides-05-01.html#announcements",
    "title": "while loop intro (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nMidterm 1 October 2 – BRING PHOTO ID\nModules 1 to 5 – study guide under practice problems page on website"
  },
  {
    "objectID": "slides-05-01.html#while-loops",
    "href": "slides-05-01.html#while-loops",
    "title": "while loop intro (class slides)",
    "section": "While loops",
    "text": "While loops\n\nA while loop allows a programmer to repeat code\nYou can think of it as an if-statement with the potential to repeat\n\n\nstatements . . .\n\nwhile conditionA:\n    statementA\n    statementB\n    . . .\n    statementN\n\nstatements . . ."
  },
  {
    "objectID": "slides-05-01.html#what-will-happen",
    "href": "slides-05-01.html#what-will-happen",
    "title": "while loop intro (class slides)",
    "section": "What will happen?",
    "text": "What will happen?\n\nnumber = 15\nwhile number &lt; 50:\n    print('number is less than 50')"
  },
  {
    "objectID": "slides-05-01.html#while-loops-1",
    "href": "slides-05-01.html#while-loops-1",
    "title": "while loop intro (class slides)",
    "section": "While loops",
    "text": "While loops\n\nWhat if the condition never evaluates to False?\n\nInfinite loop!\n\nThere are two ways around this:\n\nBreak (do not use in this class!)\nDesigning the code such that the condition will eventually become False"
  },
  {
    "objectID": "slides-05-01.html#what-will-happen-1",
    "href": "slides-05-01.html#what-will-happen-1",
    "title": "while loop intro (class slides)",
    "section": "What will happen?",
    "text": "What will happen?\nTo ensure our condition (number &lt; 50) will eventually be evaluated as False, we need to updated number inside our loop:\n\nnumber = 15\nwhile number &lt; 50:\n    print('number is less than 50')\n    number += 5\nprint('End')"
  },
  {
    "objectID": "slides-05-01.html#while-loops-visualization",
    "href": "slides-05-01.html#while-loops-visualization",
    "title": "while loop intro (class slides)",
    "section": "While loops – visualization",
    "text": "While loops – visualization\nGo to Python Tutor to visualize how the while loop runs."
  },
  {
    "objectID": "slides-05-01.html#while-loop-example",
    "href": "slides-05-01.html#while-loop-example",
    "title": "while loop intro (class slides)",
    "section": "While loop – example",
    "text": "While loop – example\nFactorial: 5! = 1 * 2 * 3 * 4 * 5 = 120\n\ndef factorial(n):\n  result = 1\n  current_n = 1\n  while current_n &lt;= n:\n    result = result * current_n\n    current_n += 1\n  return result\n\ndef main():\n  print( factorial(5) )\n  print( factorial(6) )\n  \nmain()\n\n120\n720"
  },
  {
    "objectID": "slides-05-01.html#write-a-function",
    "href": "slides-05-01.html#write-a-function",
    "title": "while loop intro (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a function called add_up_to that takes an numeric argument n. The function should add all numbers from 1 to n in a while loop, and then (outside the loop) return the sum\n\nprint( add_up_to(5) ) # 15\nprint( add_up_to(10) ) # 55\n\nName your file sum_up.py and submit it to attendance on gradescope"
  },
  {
    "objectID": "slides-05-01.html#write-a-function-solution",
    "href": "slides-05-01.html#write-a-function-solution",
    "title": "while loop intro (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef add_up_to(n):\n  sum = 0\n  current_number = 0\n  while current_number &lt;= n:\n    sum += current_number\n    current_number += 1\n  return sum\n\ndef main():\n  print( add_up_to(5) )\n  print( add_up_to(10) )\n  \nmain()\n\n15\n55"
  },
  {
    "objectID": "slides-05-01.html#age-milestones",
    "href": "slides-05-01.html#age-milestones",
    "title": "while loop intro (class slides)",
    "section": "Age milestones",
    "text": "Age milestones\nModify main function: use a while loop to request a valid input from the user.\n\ndef age_milestones(age):\n  message = \"\"\n  if age &gt;= 18:\n      message += 'You may apply to join the military.'\n     \n  if age &gt;= 21:\n      message += ' You may drink.'\n     \n  if age &gt; 35:\n      message += ' You may run for president.'\n      \n  return message\n\ndef validate_age(age):\n  return age.isnumeric()\n     \ndef main():\n  str_age = input('How old are you?\\n')\n  if validate_age(str_age):\n    age = int(str_age)\n    print(age_milestones(age))\n  else:\n    print(\"Invalid age entered.\")\n \nmain()"
  },
  {
    "objectID": "slides-05-01.html#age-milestones-continued",
    "href": "slides-05-01.html#age-milestones-continued",
    "title": "while loop intro (class slides)",
    "section": "Age milestones continued",
    "text": "Age milestones continued\nProgram behavior in your standard output:\nHow old are you?\nabc\nHow old are you?\n10abc\nHow old are you?\n55\nYou may apply to join the military. You may drink. You may \nrun for president."
  },
  {
    "objectID": "slides-05-01.html#age-milestones-solution",
    "href": "slides-05-01.html#age-milestones-solution",
    "title": "while loop intro (class slides)",
    "section": "Age milestones – solution",
    "text": "Age milestones – solution\nModify main function: use a while loop to request a valid input from the user.\n\ndef age_milestones(age):\n  message = \"\"\n  if age &gt;= 18:\n      message += 'You may apply to join the military.'\n     \n  if age &gt;= 21:\n      message += ' You may drink.'\n     \n  if age &gt; 35:\n      message += ' You may run for president.'\n      \n  return message\n\ndef validate_age(age):\n  return age.isnumeric()\n     \ndef main():\n  str_age = input('How old are you?\\n')\n  while validate_age(str_age) == False:\n    str_age = input('How old are you?\\n')\n  age = int(str_age)\n  print(age_milestones(age))\n  \nmain()"
  },
  {
    "objectID": "slides-05-01.html#write-functions",
    "href": "slides-05-01.html#write-functions",
    "title": "while loop intro (class slides)",
    "section": "Write functions",
    "text": "Write functions\n\nWrite a function to_do that takes a numeric argument temp.\nIt returns\n\n‘go for a swim’ if is greater equal to 86 and less than 104\n‘go for a hike’ if is greater equal to 68 and less than 86\n‘stay at home’ for all other cases\n\nWrite a main function to request input from user until it is valid (only digits 0-9), print \"Let us\" and the message"
  },
  {
    "objectID": "slides-05-01.html#write-functions-continued",
    "href": "slides-05-01.html#write-functions-continued",
    "title": "while loop intro (class slides)",
    "section": "Write functions continued",
    "text": "Write functions continued\nProgram behavior in your standard output:\nEnter a temperature:\nabc\nEnter a temperature:\n100abc\nEnter a temperature:\n89\nLet us go for a swim"
  },
  {
    "objectID": "slides-05-01.html#write-functions-solution",
    "href": "slides-05-01.html#write-functions-solution",
    "title": "while loop intro (class slides)",
    "section": "Write functions – solution",
    "text": "Write functions – solution\n\ndef to_do(temp):\n    if temp &gt;= 86 and temp &lt; 104:\n        return \"go for a swim\"\n    elif temp &gt;= 68 and temp &lt; 86:\n        return \"go for a hike\"\n    else:\n        return \"stay at home\"\n    \n\ndef main():\n    str_temp = input(\"Enter a temperature:\\n\")\n    while str_temp.isnumeric() == False:\n        str_temp =  input(\"Enter a temperature:\\n\")\n    message = to_do(int(str_temp))\n    print(\"Let us\", message)\n\nmain()"
  },
  {
    "objectID": "grading.html",
    "href": "grading.html",
    "title": "About the grading in this course",
    "section": "",
    "text": "Formative assessment\nThe assignments, quizzes and exams in this course are designed to give students and instructors information on how well students are learning the materials. In other words, all assessment is meant to help you learn.\nYou should see the grades you get for these assessments as a way to adjust your studying, for example:\n\nIf you are doing well in the coding assignments, but not on quizzes, that means you are not completely grasping the concepts we are covering – try solving the coding assignments without any assistance and on paper\nIf you are not doing well on the projects, that means you probably need to block more time over multiple days to figure projects out\n\nYou will notice that assessment is frequent in this class – there is either a midterm or a quiz every Wednesday, and there are coding assignments every week. The purpose of frequent assignments is to provide students with frequent feedback, so they realize what concepts they need to practice more.\n\n\nAutomated grading\nFor the assignments you submit through gradescope, an autograder is run on your code. That means the instructors for this course wrote tests to check the output of your code.\nFor example, if you are asked to write a function that takes in a number n as argument and returns double that value, the tests that would be run would be whether your function returns 4 when the argument is 2 and -8 when the argument is -4 (and so on).\nHere are the reasons for this type of grading:\n\nWhen writing code, programmers write this type of test themselves to check whether their code works as expected (you can read more about unit testing, if you are interested)\nThis type of testing of code scales well – that means that 500 students can get instant feedback on their code at once (feedback is really important, like mentioned in the previous section of this document)\n\nThis type of grading might seem very strict, because you either pass the test or you don’t (there’s no partial credit for trying hard). That is how computers work – if I want to know what 10 times 10 is and your code says it is 99, that answer is incorrect. You are not “close” to the correct answer, so there is no partial credit awarded, because the answer is 100% incorrect.\n\n\nExams and quizzes\nThe exams and quizzes for this class are all on paper. The coding questions will be short, and you won’t be writing more than 10 lines of code per solution (most of the time your solution should be around 5 lines of code).\nThe same rules that we have for the autograder tests (see previous section) apply for grading code on paper – your code is either right or wrong. We do award partial credit if there are up to two minor syntax errors (for example, you forgot the : at the end of your conditional statement). If your solution is not generalizable and does not return the correct values, you will not be awarded any points for it.\nAgain, some students find this grading “unfair” because it does not take into account their effort to answer the question. The goal, however, is to assess whether you understand the logic of how to solve the problem and you know how to do so in Python syntax. If you do not demonstrate that you know how to solve the problem, you will be awarded a zero."
  },
  {
    "objectID": "input.html",
    "href": "input.html",
    "title": "Input from user",
    "section": "",
    "text": "Input from user\nThere will be situations where your program has to interact with the user. For example, you would want to take input from the user and then print some results back. We can achieve this using the input() function and print function respectively.\nExample:\ndef say_hi(name):\n  print(\"Hello,\", name + \"!\")\n  \nname = input(\"What's your name?\\n\")\nsay_hi(name)\nOutput:\n\nWhat's your name?\nAdriana\nHello, Adriana!\n\nHow It Works\nThe input() function takes a string as argument and saves it to a variable called name. Then it calls the function say_hi() with the name entered by the user as the argument. The function say_hi() prints the name argument concatenated with a Hello message.\n\n\nChanging types\nThe input() function will always return a string. But many times we will want the user to enter other information, such as a number.\nWe can use functions like int() to transform a type into an integer and float() to transform a type into a float number.\nExample:\ndef calculate_future(years, age):\n  print(\"In\", years, \"you will be\", age + years, \"years old.\")\n\n\nage = input(\"What's your age?\\n\")\nage_int = int(age)\ncalculate_future(10, age_int)\nOutput:\n\nWhat's your age?\n41\nIn 10 you will be 51 years old.\n\nHow It Works\nThe input() function takes a string as argument and saves it to a variable called age. Then it calls the function int() to convert the age entered by the user from string to integer and saves the value to a variable called age_int. The function calculate_future() is called with arguments 10 and the age entered by the user converted to integer, it then prints the age argument concatenated with a message saying how old the person will be in the number of years passed as argument to the function."
  },
  {
    "objectID": "slides-09-01.html#announcements",
    "href": "slides-09-01.html#announcements",
    "title": "files (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nAll CSC 110 TA office hours have moved to GS 813\nQuiz 04 this Wednesday (lists)\n\nwhen finding max or min, how to avoid error if the list is empty?"
  },
  {
    "objectID": "slides-09-01.html#files-and-file-systems",
    "href": "slides-09-01.html#files-and-file-systems",
    "title": "files (class slides)",
    "section": "Files and file systems",
    "text": "Files and file systems\n\nOn (at least most of) our computers, there is a file system via which we can create, save, modify, and remove files\n\nOn Mac: can browse with Finder\nOn Windows: can browse with windows explorer\n\nFile systems are often hierarchical"
  },
  {
    "objectID": "slides-09-01.html#opening-a-file",
    "href": "slides-09-01.html#opening-a-file",
    "title": "files (class slides)",
    "section": "Opening a file",
    "text": "Opening a file\n\nTo open a file in a python program:\na_file = open(file_name, mode)\nfile_name should be the name of the file to open\n\nIt can also be a path\n\nmode should be the mode in which to open in\n\n‘a’    ‘r’    ‘w’\n\n\nAfter opening, use the a_file object to read from or write to the file"
  },
  {
    "objectID": "slides-09-01.html#absolute-vs-relative-path",
    "href": "slides-09-01.html#absolute-vs-relative-path",
    "title": "files (class slides)",
    "section": "Absolute vs Relative path",
    "text": "Absolute vs Relative path\n\nA path describes a location.\n\n/home/doc/example.txt\n\nAn absolute path describes the location from the root directory.\nA relative path describes the location of a file relative to the current (working) directory."
  },
  {
    "objectID": "slides-09-01.html#opening-and-closing-a-file",
    "href": "slides-09-01.html#opening-and-closing-a-file",
    "title": "files (class slides)",
    "section": "Opening and closing a file",
    "text": "Opening and closing a file\ninfo.txt\nThe quick brown fox\njumped over\nthe lazy\nbear\nsitting by the tree\nread_file.py\n\ninfo = open('info.txt', 'r')\ninfo.close()"
  },
  {
    "objectID": "slides-09-01.html#reading-a-line",
    "href": "slides-09-01.html#reading-a-line",
    "title": "files (class slides)",
    "section": "Reading a line",
    "text": "Reading a line\n\nfile.readline()\n\nreads one line from a file, returns a string\nreturns an empty string if it has reached the end of the content\n\nfile.readlines()\n\nreads all of the lines\nreturns a list of strings\n\nfile.read()\n\nreturns one string"
  },
  {
    "objectID": "slides-09-01.html#reading-a-line-example",
    "href": "slides-09-01.html#reading-a-line-example",
    "title": "files (class slides)",
    "section": "Reading a line example",
    "text": "Reading a line example\ninfo.txt\nThe quick brown fox\njumped over\nthe lazy\nbear\nsitting by the tree\nread_line.py\n\ndef read_first_line(filename):\n  info = open(filename, 'r')\n  line = info.readline()\n  info.close()\n  return line\n\nassert read_first_line('info.txt') == \"The quick brown fox\\n\""
  },
  {
    "objectID": "slides-09-01.html#iterating-over-a-file-directly",
    "href": "slides-09-01.html#iterating-over-a-file-directly",
    "title": "files (class slides)",
    "section": "Iterating over a file directly",
    "text": "Iterating over a file directly\nThe type file is iterable so we can use a for x in file loop:\n\ninfo = open('info.txt', 'r')\nfor line in info:\n    print(line)\ninfo.close()\n\nThe quick brown fox\n\njumped over\n\nthe lazy\n\nbear\n\nsitting by the tree"
  },
  {
    "objectID": "slides-09-01.html#more-string-methods",
    "href": "slides-09-01.html#more-string-methods",
    "title": "files (class slides)",
    "section": "More string methods",
    "text": "More string methods\nWe worked with .isnumeric(), a string method to check if a string contains only digit characters\nHere are some other useful string methods:\n\nstring.strip(chars) – removes any of the characters in chars from the beginning or end of string, returns a string\nstring.split(chars) – splits string at the chars, returns a list"
  },
  {
    "objectID": "slides-09-01.html#more-string-methods-.strip",
    "href": "slides-09-01.html#more-string-methods-.strip",
    "title": "files (class slides)",
    "section": "More string methods – .strip()",
    "text": "More string methods – .strip()\n\ninfo = open('info.txt', 'r')\n\nfirst_line = info.readline()\nsecond_line = info.readline()\nprint(first_line)\nprint(second_line)\n\n\nfirst_line = first_line.strip(\"\\n\")\nsecond_line = second_line.strip(\"\\n\")\nprint(first_line)\nprint(second_line)\n\ninfo.close()\n\nThe quick brown fox\n\njumped over\n\nThe quick brown fox\njumped over"
  },
  {
    "objectID": "slides-09-01.html#more-string-methods-.split",
    "href": "slides-09-01.html#more-string-methods-.split",
    "title": "files (class slides)",
    "section": "More string methods – .split(\" \")",
    "text": "More string methods – .split(\" \")\n\ninfo = open('info.txt', 'r')\n\nfirst_line = info.readline().strip(\"\\n\")\nsecond_line = info.readline().strip(\"\\n\")\n\nfirst_line_words = first_line.split(\" \")\nsecond_line_words = second_line.split(\" \")\n\nprint(first_line_words)\nprint(second_line_words)\n\ninfo.close()\n\n['The', 'quick', 'brown', 'fox']\n['jumped', 'over']"
  },
  {
    "objectID": "slides-09-01.html#write-a-function",
    "href": "slides-09-01.html#write-a-function",
    "title": "files (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is lines_and_words\nIt takes a string called file_name\nIt opens the file with file_name in read mode\nIt iterates over the file’s lines, splitting each line by space (remember to strip the line breaks)\nIt returns a list of lists, where each inner-list is a line containing all the words in that line\n\nTest case (download text file):\n\nassert lines_and_words(\"info.txt\") == [ ['The', 'quick', 'brown', 'fox'], \n                                        ['jumped', 'over'], ['the', 'lazy'],\n                                        ['bear'], ['sitting', 'by', 'the', 'tree'] ]"
  },
  {
    "objectID": "slides-09-01.html#write-a-function-solution",
    "href": "slides-09-01.html#write-a-function-solution",
    "title": "files (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef lines_and_words(file_name):\n  f = open(file_name, \"r\")\n  all_words = []\n  for line in f:\n    all_words.append(line.strip(\"\\n\").split(\" \"))\n  f.close()\n  return all_words\n  \n  \ndef main():\n  assert lines_and_words(\"info.txt\") == [ ['The', 'quick', 'brown', 'fox'], \n                                          ['jumped', 'over'], ['the', 'lazy'],\n                                          ['bear'], ['sitting', 'by', 'the', 'tree'] ]\n                                     \nmain()"
  },
  {
    "objectID": "slides-09-01.html#write-a-function-1",
    "href": "slides-09-01.html#write-a-function-1",
    "title": "files (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is count_words\nIt takes a string file_name as argument\nIt returns a dictionary with word counts\n\nTest case:\n\nassert count_words(\"info.txt\") == {\"the\": 3, \"quick\": 1, \"brown\": 1,\n                                   \"fox\": 1 , \"jumped\": 1, \"over\": 1, \n                                   \"lazy\": 1, \"bear\": 1, \"sitting\": 1,\n                                   \"by\": 1, \"tree\": 1}"
  },
  {
    "objectID": "slides-09-01.html#write-a-function-solution-1",
    "href": "slides-09-01.html#write-a-function-solution-1",
    "title": "files (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef count_words(file_name):\n  f = open(file_name, \"r\")\n  counts = {}\n  for line in f:\n    words = line.strip(\"\\n\").split(\" \")\n    for w in words:\n      lower_case_w = w.lower()\n      if lower_case_w not in counts:\n        counts[lower_case_w] = 1\n      else:\n        counts[lower_case_w] += 1\n  return counts\n\ndef main():\n  assert count_words(\"info.txt\") == {\"the\": 3, \"quick\": 1, \"brown\": 1,\n                                     \"fox\": 1 , \"jumped\": 1, \"over\": 1, \n                                     \"lazy\": 1, \"bear\": 1, \"sitting\": 1,\n                                     \"by\": 1, \"tree\": 1}\n                                 \nmain()"
  },
  {
    "objectID": "slides-09-01.html#quiz-04",
    "href": "slides-09-01.html#quiz-04",
    "title": "files (class slides)",
    "section": "Quiz 04",
    "text": "Quiz 04\n\n\ncurrent time\n\n\n\n\n\n\nYou have 15 minutes. There are 2 problems.\n\nNo need for comments, no need for a main(), no test cases\nJust write your function and what’s inside the function\nyour choice of loop (for or while)\n\nBuilt-in functions you can use: round(), float(), str(), int(), len() — no need to use all of these."
  },
  {
    "objectID": "slides-05-03.html#announcement",
    "href": "slides-05-03.html#announcement",
    "title": "while loop aggregation (class slides)",
    "section": "Announcement",
    "text": "Announcement\nReview session next Tuesday, October 1, starting at 5pm.\n\nLocation: Gittings 129b (same as lecture room)."
  },
  {
    "objectID": "slides-05-03.html#while-loops",
    "href": "slides-05-03.html#while-loops",
    "title": "while loop aggregation (class slides)",
    "section": "while loops",
    "text": "while loops\n\nUsing an index variable:\n\nDefined before the loop\nUsed in the condition of the loop\nChanged within the loop\n\nUsing a temporary variable for aggregation:\n\nDefined before the loop\nChanged within the loop\nReturned outside the loop"
  },
  {
    "objectID": "slides-05-03.html#while-loops-with-aggregation",
    "href": "slides-05-03.html#while-loops-with-aggregation",
    "title": "while loop aggregation (class slides)",
    "section": "while loops with aggregation",
    "text": "while loops with aggregation\n\ntotal = 0\nindex = 1\nwhile index &lt;= 5:\n    print('adding ' + str(index))\n    total = total + index\n    index = index + 1\n    \nprint(total)\n\nadding 1\nadding 2\nadding 3\nadding 4\nadding 5\n15"
  },
  {
    "objectID": "slides-05-03.html#while-loops-table",
    "href": "slides-05-03.html#while-loops-table",
    "title": "while loop aggregation (class slides)",
    "section": "while loops table",
    "text": "while loops table\nStart with total = 0, index = 1:\n\n\n\nindex &lt;= 5\ntotal = total + index\nindex = index + 1\n\n\n\n\nTrue\ntotal = 0 + 1\nindex = 1 + 1\n\n\nTrue\ntotal = 1 + 2\nindex = 2 + 1\n\n\nTrue\ntotal = 3 + 3\nindex = 3 + 1\n\n\nTrue\ntotal = 6 + 4\nindex = 4 + 1\n\n\nTrue\ntotal = 10 + 5\nindex = 5 + 1\n\n\nFalse\n-\n-"
  },
  {
    "objectID": "slides-05-03.html#write-a-function",
    "href": "slides-05-03.html#write-a-function",
    "title": "while loop aggregation (class slides)",
    "section": "Write a function",
    "text": "Write a function\nIts name is sum_all and takes two numeric arguments: low and high. It runs a loop that iterates through the values low and high summing all values. It returns the sum of all values between low and high.\nHINT: Create a variable that will aggregate the sum. Use while (set the index as the low before the loop, use index in the while condition, update the index inside the loop).\n\nassert sum_all(1, 3) == 6\nassert sum_all(0, 5) == 15"
  },
  {
    "objectID": "slides-05-03.html#write-a-function-solution",
    "href": "slides-05-03.html#write-a-function-solution",
    "title": "while loop aggregation (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef sum_all(low, high):\n  total = 0\n  index = low\n  while index &lt;= high:\n    total += index\n    index += 1\n  return total\n    \ndef main():\n  assert sum_all(1, 3) == 6\n  assert sum_all(0, 5) == 15\n  \nmain()"
  },
  {
    "objectID": "slides-05-03.html#write-a-function-1",
    "href": "slides-05-03.html#write-a-function-1",
    "title": "while loop aggregation (class slides)",
    "section": "Write a function",
    "text": "Write a function\nWrite a function called count_vowels that takes a string as argument, and returns an integer with the number of vowels in the string.\nHINT: use in to determine if a character is a vowel. The vowels are \"a\",\"e\",\"i\",\"o\", and \"u\".\n\nassert count_vowels(\"banana\") == 3\nassert count_vowels(\"fly\") == 0"
  },
  {
    "objectID": "slides-05-03.html#write-a-function-solution-1",
    "href": "slides-05-03.html#write-a-function-solution-1",
    "title": "while loop aggregation (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef count_vowels(string):\n  index = 0\n  count = 0\n  while index &lt; len(string):\n    if string[index] in \"aeiou\":\n      count += 1\n    index += 1\n  return count\n\ndef main():\n  assert count_vowels(\"banana\") == 3\n  assert count_vowels(\"fly\") == 0\n  print(\"End of tests.\")\n  \nmain()\n\nEnd of tests."
  },
  {
    "objectID": "slides-05-03.html#write-a-function-2",
    "href": "slides-05-03.html#write-a-function-2",
    "title": "while loop aggregation (class slides)",
    "section": "Write a function",
    "text": "Write a function\nIts name is factorial and takes a numeric argument number. It returns the factorial of number. The factorial of a number is the product of that number and every number that comes before it, down to one.\nFor example, factorial of 4: 1 * 2 * 3 * 4 = 24.\nName your file factorial.py and submit to Gradescope.\n\nassert factorial(4) == 24\nassert factorial(5) == 120\nassert factorial(0) == 1"
  },
  {
    "objectID": "slides-05-03.html#write-a-function-solution-2",
    "href": "slides-05-03.html#write-a-function-solution-2",
    "title": "while loop aggregation (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef factorial(number):\n  result = 1\n  index = 1\n  while index &lt;= number:\n    result *= index\n    index += 1\n  return result\n\ndef main():\n  assert factorial(4) == 24\n  assert factorial(5) == 120\n  assert factorial(0) == 1\n  \nmain()"
  },
  {
    "objectID": "slides-05-03.html#write-a-function-3",
    "href": "slides-05-03.html#write-a-function-3",
    "title": "while loop aggregation (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is power\nIt takes two numeric arguments: base and exp\nIt returns the base to the power of exp\nDon’t use the ** operator, use a while loop (define an index before the loop, use index in the while condition, change index inside the loop)\n\n\nassert power(2, 4) == 16\nassert power(3, 2) == 9"
  },
  {
    "objectID": "slides-05-03.html#write-a-function-solution-3",
    "href": "slides-05-03.html#write-a-function-solution-3",
    "title": "while loop aggregation (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\nWrite more test cases for this function.\n\ndef power(base, exp):\n  result = 1\n  index = 1\n  while index &lt;= exp:\n    result *= base\n    index += 1\n  return result\n\ndef main():\n  assert power(2, 4) == 16\n  assert power(3, 2) == 9\n    \nmain()"
  },
  {
    "objectID": "slides-05-03.html#write-a-function-4",
    "href": "slides-05-03.html#write-a-function-4",
    "title": "while loop aggregation (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is vowels_only\nIt takes a string argument\nIt builds a new string containing only the vowels in the string argument\nIt returns new string with vowels only (define an index before the loop, use index in the while condition, change index inside the loop)\n\n\nprint( vowels_only(\"banana\") ) # \"aaa\"\nprint( vowels_only(\"fly\") ) # \"\""
  },
  {
    "objectID": "slides-05-03.html#write-a-function-solution-4",
    "href": "slides-05-03.html#write-a-function-solution-4",
    "title": "while loop aggregation (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef vowels_only(string):\n  new_string = \"\"\n  index = 0\n  while index &lt; len(string):\n    if string[index] in \"aeiou\":\n      new_string += string[index]\n    index += 1\n  return new_string\n\ndef main():\n  print( vowels_only(\"banana\") ) # \"aaa\"\n  \nmain()\n\naaa"
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "Constants, variables, and comments",
    "section": "",
    "text": "Just printing hello world is not enough, is it? You want to do more than that - you want to take some input, manipulate it and get something out of it. We can achieve this in Python using constants and variables, and we’ll learn some other concepts as well in this chapter.\n\n\nComments are any text to the right of the # symbol and is mainly useful as notes for the reader of the program.\nFor example:\nprint('hello world') # Note that print is a function\nor:\n# Note that print is a function\nprint('hello world')\nUse as many useful comments as you can in your program to:\n\nexplain assumptions\nexplain important decisions\nexplain important details\nexplain problems you’re trying to solve\nexplain problems you’re trying to overcome in your program, etc.\n\nCode tells you how, comments should tell you why.\nThis is useful for readers of your program so that they can easily understand what the program is doing. Remember, that person can be yourself after six months!\n\n\n\nAn example of a literal constant is a number like 5, 1.23, or a string like 'This is a string' or \"It's a string!\".\nIt is called a literal because it is literal - you use its value literally. The number 2 always represents itself and nothing else - it is a constant because its value cannot be changed. Hence, all these are referred to as literal constants.\n\n\n\nNumbers are mainly of two types - integers and floats.\nAn example of an integer is 2 which is just a whole number.\nExamples of floating point numbers (or floats for short) are 3.23 and 52.3E-4. The E notation indicates powers of 10. In this case, 52.3E-4 means 52.3 * 10^-4^.\n\nNote for Experienced Programmers\nThere is no separate long type. The int type can be an integer of any size.\n\n\n\n\nA string is a sequence of characters. Strings are basically just a bunch of words.\nYou will be using strings in almost every Python program that you write, so pay attention to the following part.\n\n\nYou can specify strings using single quotes such as 'Quote me on this'.\nAll white space i.e. spaces and tabs, within the quotes, are preserved as-is.\n\n\n\nStrings in double quotes work exactly the same way as strings in single quotes. An example is \"What's your name?\".\n\n\n\nYou can specify multi-line strings using triple quotes - (\"\"\" or '''). You can use single quotes and double quotes freely within the triple quotes. An example is:\n'''This is a multi-line string. This is the first line.\nThis is the second line.\n\"What's your name?,\" I asked.\nHe said \"Bond, James Bond.\"\n'''\n\n\n\nThis means that once you have created a string, you cannot change it. Although this might seem like a bad thing, it really isn’t. We will see why this is not a limitation in the various programs that we see later on.\n\nNote for C/C++ Programmers\nThere is no separate char data type in Python. There is no real need for it and I am sure you won’t miss it.\n\n\n\nNote for Perl/PHP Programmers\nRemember that single-quoted strings and double-quoted strings are the same - they do not differ in any way.\n\n\n\n\nSometimes we may want to construct strings from other information. This is where the format() method is useful.\nSave the following lines as a file str_format.py:\nage = 20\nname = 'Swaroop'\n\nprint('{0} was {1} years old when he wrote this book'.format(name, age))\nprint('Why is {0} playing with that python?'.format(name))\nOutput:\n$ python str_format.py\nSwaroop was 20 years old when he wrote this book\nWhy is Swaroop playing with that python?\nHow It Works\nA string can use certain specifications and subsequently, the format method can be called to substitute those specifications with corresponding arguments to the format method.\nObserve the first usage where we use {0} and this corresponds to the variable name which is the first argument to the format method. Similarly, the second specification is {1} corresponding to age which is the second argument to the format method. Note that Python starts counting from 0 which means that first position is at index 0, second position is at index 1, and so on.\nNotice that we could have achieved the same using string concatenation:\nname + ' is ' + str(age) + ' years old'\nbut that is much uglier and more error-prone. Second, the conversion to string would be done automatically by the format method instead of the explicit conversion to strings needed in this case. Third, when using the format method, we can change the message without having to deal with the variables used and vice-versa.\nAlso note that the numbers are optional, so you could have also written as:\nage = 20\nname = 'Swaroop'\n\nprint('{} was {} years old when he wrote this book'.format(name, age))\nprint('Why is {} playing with that python?'.format(name))\nwhich will give the same exact output as the previous program.\nWe can also name the parameters:\nage = 20\nname = 'Swaroop'\n\nprint('{name} was {age} years old when he wrote this book'.format(name=name, age=age))\nprint('Why is {name} playing with that python?'.format(name=name))\nwhich will give the same exact output as the previous program.\nPython 3.6 introduced a shorter way to do named parameters, called “f-strings”:\nage = 20\nname = 'Swaroop'\n\nprint(f'{name} was {age} years old when he wrote this book')  # notice the 'f' before the string\nprint(f'Why is {name} playing with that python?')  # notice the 'f' before the string\nwhich will give the same exact output as the previous program.\nWhat Python does in the format method is that it substitutes each argument value into the place of the specification. There can be more detailed specifications such as:\n# decimal (.) precision of 3 for float '0.333'\nprint('{0:.3f}'.format(1.0/3))\n# fill with underscores (_) with the text centered\n# (^) to 11 width '___hello___'\nprint('{0:_^11}'.format('hello'))\n# keyword-based 'Swaroop wrote A Byte of Python'\nprint('{name} wrote {book}'.format(name='Swaroop', book='A Byte of Python'))\nOutput:\n0.333\n___hello___\nSwaroop wrote A Byte of Python\nSince we are discussing formatting, note that print always ends with an invisible “new line” character (\\n) so that repeated calls to print will all print on a separate line each. To prevent this newline character from being printed, you can specify that it should end with a blank:\nprint('a', end='')\nprint('b', end='')\nOutput is:\nab\nOr you can end with a space:\nprint('a', end=' ')\nprint('b', end=' ')\nprint('c')\nOutput is:\na b c\n\n\n\nSince the default end parameter is set to \\n it always prints one line break by default. We can change end to \\n\\n to print two line breaks – that creates an empty line after whatever the print statement output.\nprint(\"This is a line\", end = \"\\n\\n\") \nWe can also use print with no arguments to print just an empty line:\nprint() # prints an empty line \n\n\n\nSuppose, you want to have a string which contains a single quote ('), how will you specify this string? For example, the string is \"What's your name?\". You cannot specify 'What's your name?' because Python will be confused as to where the string starts and ends. So, you will have to specify that this single quote does not indicate the end of the string. This can be done with the help of what is called an escape sequence. You specify the single quote as \\' : notice the backslash. Now, you can specify the string as 'What\\'s your name?'.\nAnother way of specifying this specific string would be \"What's your name?\" i.e. using double quotes. Similarly, you have to use an escape sequence for using a double quote itself in a double quoted string. Also, you have to indicate the backslash itself using the escape sequence \\\\.\nWhat if you wanted to specify a two-line string? One way is to use a triple-quoted string as shown previously or you can use an escape sequence for the newline character - \\n to indicate the start of a new line. An example is:\n'This is the first line\\nThis is the second line'\nAnother useful escape sequence to know is the tab: \\t. There are many more escape sequences but I have mentioned only the most useful ones here.\nOne thing to note is that in a string, a single backslash at the end of the line indicates that the string is continued in the next line, but no newline is added. For example:\n\"This is the first sentence. \\\nThis is the second sentence.\"\nis equivalent to\n\"This is the first sentence. This is the second sentence.\"\n\n\n\nIf you need to specify some strings where no special processing such as escape sequences are handled, then what you need is to specify a raw string by prefixing r or R to the string. An example is:\nr\"Newlines are indicated by \\n\"\n\nNote for Regular Expression Users\nAlways use raw strings when dealing with regular expressions. Otherwise, a lot of backwhacking may be required. For example, backreferences can be referred to as '\\\\1' or r'\\1'.\n\n\n\n\n\nUsing just literal constants can soon become boring - we need some way of storing any information and manipulate them as well. This is where variables come into the picture. Variables are exactly what the name implies - their value can vary, i.e., you can store anything using a variable. Variables are just parts of your computer’s memory where you store some information. Unlike literal constants, you need some method of accessing these variables and hence you give them names.\n\n\n\nVariables are examples of identifiers. Identifiers are names given to identify something. There are some rules you have to follow for naming identifiers:\n\nThe first character of the identifier must be a letter of the alphabet (uppercase ASCII or lowercase ASCII or Unicode character) or an underscore (_).\nThe rest of the identifier name can consist of letters (uppercase ASCII or lowercase ASCII or Unicode character), underscores (_) or digits (0-9).\nIdentifier names are case-sensitive. For example, myname and myName are not the same. Note the lowercase n in the former and the uppercase N in the latter.\nExamples of valid identifier names are i, name_2_3. Examples of invalid identifier names are 2things, this is spaced out, my-name and &gt;a1b2_c3.\n\n\n\n\nVariables can hold values of different types called data types. The basic types are numbers and strings, which we have already discussed.\n\n\n\nRemember, Python refers to anything used in a program as an object. This is meant in the generic sense. Instead of saying “the something”’, we say “the object”.\n\nNote for Object Oriented Programming users:\nPython is strongly object-oriented in the sense that everything is an object including numbers, strings and functions.\n\nWe will now see how to use variables along with literal constants. Save the following example and run the program.\n\n\n\nNow that we have gone through many nitty-gritty details, we can move on to more interesting stuff such as functions. Be sure to become comfortable with what you have read in this chapter."
  },
  {
    "objectID": "basics.html#comments",
    "href": "basics.html#comments",
    "title": "Constants, variables, and comments",
    "section": "",
    "text": "Comments are any text to the right of the # symbol and is mainly useful as notes for the reader of the program.\nFor example:\nprint('hello world') # Note that print is a function\nor:\n# Note that print is a function\nprint('hello world')\nUse as many useful comments as you can in your program to:\n\nexplain assumptions\nexplain important decisions\nexplain important details\nexplain problems you’re trying to solve\nexplain problems you’re trying to overcome in your program, etc.\n\nCode tells you how, comments should tell you why.\nThis is useful for readers of your program so that they can easily understand what the program is doing. Remember, that person can be yourself after six months!"
  },
  {
    "objectID": "basics.html#literal-constants",
    "href": "basics.html#literal-constants",
    "title": "Constants, variables, and comments",
    "section": "",
    "text": "An example of a literal constant is a number like 5, 1.23, or a string like 'This is a string' or \"It's a string!\".\nIt is called a literal because it is literal - you use its value literally. The number 2 always represents itself and nothing else - it is a constant because its value cannot be changed. Hence, all these are referred to as literal constants."
  },
  {
    "objectID": "basics.html#numbers",
    "href": "basics.html#numbers",
    "title": "Constants, variables, and comments",
    "section": "",
    "text": "Numbers are mainly of two types - integers and floats.\nAn example of an integer is 2 which is just a whole number.\nExamples of floating point numbers (or floats for short) are 3.23 and 52.3E-4. The E notation indicates powers of 10. In this case, 52.3E-4 means 52.3 * 10^-4^.\n\nNote for Experienced Programmers\nThere is no separate long type. The int type can be an integer of any size."
  },
  {
    "objectID": "basics.html#strings",
    "href": "basics.html#strings",
    "title": "Constants, variables, and comments",
    "section": "",
    "text": "A string is a sequence of characters. Strings are basically just a bunch of words.\nYou will be using strings in almost every Python program that you write, so pay attention to the following part.\n\n\nYou can specify strings using single quotes such as 'Quote me on this'.\nAll white space i.e. spaces and tabs, within the quotes, are preserved as-is.\n\n\n\nStrings in double quotes work exactly the same way as strings in single quotes. An example is \"What's your name?\".\n\n\n\nYou can specify multi-line strings using triple quotes - (\"\"\" or '''). You can use single quotes and double quotes freely within the triple quotes. An example is:\n'''This is a multi-line string. This is the first line.\nThis is the second line.\n\"What's your name?,\" I asked.\nHe said \"Bond, James Bond.\"\n'''\n\n\n\nThis means that once you have created a string, you cannot change it. Although this might seem like a bad thing, it really isn’t. We will see why this is not a limitation in the various programs that we see later on.\n\nNote for C/C++ Programmers\nThere is no separate char data type in Python. There is no real need for it and I am sure you won’t miss it.\n\n\n\nNote for Perl/PHP Programmers\nRemember that single-quoted strings and double-quoted strings are the same - they do not differ in any way.\n\n\n\n\nSometimes we may want to construct strings from other information. This is where the format() method is useful.\nSave the following lines as a file str_format.py:\nage = 20\nname = 'Swaroop'\n\nprint('{0} was {1} years old when he wrote this book'.format(name, age))\nprint('Why is {0} playing with that python?'.format(name))\nOutput:\n$ python str_format.py\nSwaroop was 20 years old when he wrote this book\nWhy is Swaroop playing with that python?\nHow It Works\nA string can use certain specifications and subsequently, the format method can be called to substitute those specifications with corresponding arguments to the format method.\nObserve the first usage where we use {0} and this corresponds to the variable name which is the first argument to the format method. Similarly, the second specification is {1} corresponding to age which is the second argument to the format method. Note that Python starts counting from 0 which means that first position is at index 0, second position is at index 1, and so on.\nNotice that we could have achieved the same using string concatenation:\nname + ' is ' + str(age) + ' years old'\nbut that is much uglier and more error-prone. Second, the conversion to string would be done automatically by the format method instead of the explicit conversion to strings needed in this case. Third, when using the format method, we can change the message without having to deal with the variables used and vice-versa.\nAlso note that the numbers are optional, so you could have also written as:\nage = 20\nname = 'Swaroop'\n\nprint('{} was {} years old when he wrote this book'.format(name, age))\nprint('Why is {} playing with that python?'.format(name))\nwhich will give the same exact output as the previous program.\nWe can also name the parameters:\nage = 20\nname = 'Swaroop'\n\nprint('{name} was {age} years old when he wrote this book'.format(name=name, age=age))\nprint('Why is {name} playing with that python?'.format(name=name))\nwhich will give the same exact output as the previous program.\nPython 3.6 introduced a shorter way to do named parameters, called “f-strings”:\nage = 20\nname = 'Swaroop'\n\nprint(f'{name} was {age} years old when he wrote this book')  # notice the 'f' before the string\nprint(f'Why is {name} playing with that python?')  # notice the 'f' before the string\nwhich will give the same exact output as the previous program.\nWhat Python does in the format method is that it substitutes each argument value into the place of the specification. There can be more detailed specifications such as:\n# decimal (.) precision of 3 for float '0.333'\nprint('{0:.3f}'.format(1.0/3))\n# fill with underscores (_) with the text centered\n# (^) to 11 width '___hello___'\nprint('{0:_^11}'.format('hello'))\n# keyword-based 'Swaroop wrote A Byte of Python'\nprint('{name} wrote {book}'.format(name='Swaroop', book='A Byte of Python'))\nOutput:\n0.333\n___hello___\nSwaroop wrote A Byte of Python\nSince we are discussing formatting, note that print always ends with an invisible “new line” character (\\n) so that repeated calls to print will all print on a separate line each. To prevent this newline character from being printed, you can specify that it should end with a blank:\nprint('a', end='')\nprint('b', end='')\nOutput is:\nab\nOr you can end with a space:\nprint('a', end=' ')\nprint('b', end=' ')\nprint('c')\nOutput is:\na b c\n\n\n\nSince the default end parameter is set to \\n it always prints one line break by default. We can change end to \\n\\n to print two line breaks – that creates an empty line after whatever the print statement output.\nprint(\"This is a line\", end = \"\\n\\n\") \nWe can also use print with no arguments to print just an empty line:\nprint() # prints an empty line \n\n\n\nSuppose, you want to have a string which contains a single quote ('), how will you specify this string? For example, the string is \"What's your name?\". You cannot specify 'What's your name?' because Python will be confused as to where the string starts and ends. So, you will have to specify that this single quote does not indicate the end of the string. This can be done with the help of what is called an escape sequence. You specify the single quote as \\' : notice the backslash. Now, you can specify the string as 'What\\'s your name?'.\nAnother way of specifying this specific string would be \"What's your name?\" i.e. using double quotes. Similarly, you have to use an escape sequence for using a double quote itself in a double quoted string. Also, you have to indicate the backslash itself using the escape sequence \\\\.\nWhat if you wanted to specify a two-line string? One way is to use a triple-quoted string as shown previously or you can use an escape sequence for the newline character - \\n to indicate the start of a new line. An example is:\n'This is the first line\\nThis is the second line'\nAnother useful escape sequence to know is the tab: \\t. There are many more escape sequences but I have mentioned only the most useful ones here.\nOne thing to note is that in a string, a single backslash at the end of the line indicates that the string is continued in the next line, but no newline is added. For example:\n\"This is the first sentence. \\\nThis is the second sentence.\"\nis equivalent to\n\"This is the first sentence. This is the second sentence.\"\n\n\n\nIf you need to specify some strings where no special processing such as escape sequences are handled, then what you need is to specify a raw string by prefixing r or R to the string. An example is:\nr\"Newlines are indicated by \\n\"\n\nNote for Regular Expression Users\nAlways use raw strings when dealing with regular expressions. Otherwise, a lot of backwhacking may be required. For example, backreferences can be referred to as '\\\\1' or r'\\1'."
  },
  {
    "objectID": "basics.html#variable",
    "href": "basics.html#variable",
    "title": "Constants, variables, and comments",
    "section": "",
    "text": "Using just literal constants can soon become boring - we need some way of storing any information and manipulate them as well. This is where variables come into the picture. Variables are exactly what the name implies - their value can vary, i.e., you can store anything using a variable. Variables are just parts of your computer’s memory where you store some information. Unlike literal constants, you need some method of accessing these variables and hence you give them names."
  },
  {
    "objectID": "basics.html#identifier-naming",
    "href": "basics.html#identifier-naming",
    "title": "Constants, variables, and comments",
    "section": "",
    "text": "Variables are examples of identifiers. Identifiers are names given to identify something. There are some rules you have to follow for naming identifiers:\n\nThe first character of the identifier must be a letter of the alphabet (uppercase ASCII or lowercase ASCII or Unicode character) or an underscore (_).\nThe rest of the identifier name can consist of letters (uppercase ASCII or lowercase ASCII or Unicode character), underscores (_) or digits (0-9).\nIdentifier names are case-sensitive. For example, myname and myName are not the same. Note the lowercase n in the former and the uppercase N in the latter.\nExamples of valid identifier names are i, name_2_3. Examples of invalid identifier names are 2things, this is spaced out, my-name and &gt;a1b2_c3."
  },
  {
    "objectID": "basics.html#data-types",
    "href": "basics.html#data-types",
    "title": "Constants, variables, and comments",
    "section": "",
    "text": "Variables can hold values of different types called data types. The basic types are numbers and strings, which we have already discussed."
  },
  {
    "objectID": "basics.html#object",
    "href": "basics.html#object",
    "title": "Constants, variables, and comments",
    "section": "",
    "text": "Remember, Python refers to anything used in a program as an object. This is meant in the generic sense. Instead of saying “the something”’, we say “the object”.\n\nNote for Object Oriented Programming users:\nPython is strongly object-oriented in the sense that everything is an object including numbers, strings and functions.\n\nWe will now see how to use variables along with literal constants. Save the following example and run the program."
  },
  {
    "objectID": "basics.html#summary",
    "href": "basics.html#summary",
    "title": "Constants, variables, and comments",
    "section": "",
    "text": "Now that we have gone through many nitty-gritty details, we can move on to more interesting stuff such as functions. Be sure to become comfortable with what you have read in this chapter."
  },
  {
    "objectID": "slides-09-02.html#string-methods",
    "href": "slides-09-02.html#string-methods",
    "title": "files and strings (class slides)",
    "section": "String methods",
    "text": "String methods\n\nstring.strip(chars) – removes any of the characters in chars from the beginning or end of string, returns a string\nstring.split(chars) – splits string at the chars, returns a list\nstring.lower(string) – forces all characters to lowercase, returns a string"
  },
  {
    "objectID": "slides-09-02.html#write-a-function",
    "href": "slides-09-02.html#write-a-function",
    "title": "files and strings (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is sum_all\nIt takes a string file_name as argument\nIt reads the file with file_name in read mode\nIt iterates over each line in the file, stripping the line breaks, casting each line as integer (assume each line is a single number), summing each number to a total variable\nReturn the total\nDownload the text file for the test case below\n\n\nassert sum_all(\"numbers.txt\") == 15"
  },
  {
    "objectID": "slides-09-02.html#write-a-function-solution",
    "href": "slides-09-02.html#write-a-function-solution",
    "title": "files and strings (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef sum_all(file_name):\n  total = 0\n  for line in open(file_name, \"r\"):\n    number = int(line.strip(\"\\n\"))\n    total += number\n  return total\n\ndef main():\n  assert sum_all(\"numbers.txt\") == 15\n\nmain()"
  },
  {
    "objectID": "slides-09-02.html#modes",
    "href": "slides-09-02.html#modes",
    "title": "files and strings (class slides)",
    "section": "Modes",
    "text": "Modes\n\nTo read a file:\n\nUse ‘r’ for reading the contents of a file\n\nTo write to a file: use\n\nUse ‘a’ to append to the existing file content\nUse ‘w’ to write to a file, and replace existing content"
  },
  {
    "objectID": "slides-09-02.html#writing-to-a-file",
    "href": "slides-09-02.html#writing-to-a-file",
    "title": "files and strings (class slides)",
    "section": "Writing to a file",
    "text": "Writing to a file\n\nAfter you have opened the file in either ‘a’ or ‘w’ mode\na_file = open(file_name, mode)\nUse the write function to write text content to the file\na_file.write('put this content in a file')\nWhen finished writing, close the file a_file.close()"
  },
  {
    "objectID": "slides-09-02.html#evaluate-the-code",
    "href": "slides-09-02.html#evaluate-the-code",
    "title": "files and strings (class slides)",
    "section": "Evaluate the code",
    "text": "Evaluate the code\n\nwords = open('words.txt', 'w')\nwords.write('The slow wolf')\nwords.write('jumped over')\nwords.write('the bear')\nwords.close()"
  },
  {
    "objectID": "slides-09-02.html#evaluate-the-code-1",
    "href": "slides-09-02.html#evaluate-the-code-1",
    "title": "files and strings (class slides)",
    "section": "Evaluate the code",
    "text": "Evaluate the code\n\nwords = open('words.txt', 'w')\nwords.write('The slow wolf\\n')\nwords.write('jumped over\\n')\nwords.write('the bear\\n')\nwords.close()"
  },
  {
    "objectID": "slides-09-02.html#evaluate-the-code-2",
    "href": "slides-09-02.html#evaluate-the-code-2",
    "title": "files and strings (class slides)",
    "section": "Evaluate the code",
    "text": "Evaluate the code\n\nwords = open('words.txt', 'a')\nwords.write('The slow wolf\\n')\nwords.write('jumped over\\n')\nwords.write('the bear\\n')\nwords.close()"
  },
  {
    "objectID": "slides-09-02.html#write-a-function-1",
    "href": "slides-09-02.html#write-a-function-1",
    "title": "files and strings (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is write_word_count\nIt takes a string file_name as argument, it opens the file in read mode\nIt writes a comma separated file (“out_” + original filename), with the lowercase word as first value and count second\nDownload test file\n\nTest case:\n\nwrite_word_count(\"alien.txt\")\n# writes out out_alien.txt with word counts"
  },
  {
    "objectID": "slides-09-02.html#write-a-function-solution-1",
    "href": "slides-09-02.html#write-a-function-solution-1",
    "title": "files and strings (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef count_words(file_name):\n  f = open(file_name, \"r\")\n  counts = {}\n  for line in f:\n    words = line.strip(\"\\n\").split(\" \")\n    for w in words:\n      lower_case_w = w.lower()\n      if lower_case_w not in counts:\n        counts[lower_case_w] = 1\n      else:\n        counts[lower_case_w] += 1\n  return counts\n\ndef write_word_count(file_name):\n  count_dict = count_words(file_name)\n  output_file = open(\"out_\" + file_name, \"w\")\n  for key, value in count_dict.items():\n    output_file.write(key + \",\" + str(value) + \"\\n\")\n  output_file.close()\n  \ndef main(): \n  write_word_count(\"alien.txt\")\n  \nmain()"
  },
  {
    "objectID": "fizzbuzz.html",
    "href": "fizzbuzz.html",
    "title": "FizzBuzz Problem",
    "section": "",
    "text": "The FizzBuzz Problem is a common coding problem given during interviews where candidates are asked to write a solution to the problem. The problem states the following:\n\nAn integer divisible by 3 should be labeled “Fizz”\nAn integer divisible by 5 should be labeled “Buzz”\nAn integer divisible by both 3 and 5 should be labeled “FizzBuzz”\n\nYou should try to solve this on your own, before watching my solution:"
  },
  {
    "objectID": "assignments-09.html",
    "href": "assignments-09.html",
    "title": "Module 9 Assignments",
    "section": "",
    "text": "Short Programming projects are submitted during our weekly 45-minute in-person lab sessions. Each lab sessions is guided by two TAs. The instructions for the short project will be available only during the lab sessions. To schedule your lab session go to the weekly lab session spreadsheet in Short Project Dates and Instructions."
  },
  {
    "objectID": "assignments-09.html#programming-problem-17",
    "href": "assignments-09.html#programming-problem-17",
    "title": "Module 9 Assignments",
    "section": "Programming Problem 17",
    "text": "Programming Problem 17\nDue date: Tuesday, October 29, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is read_csv\nIt takes a string as argument called file_name\nIt opens the file with file_name in read mode\nIt iterates over each line in the file, splitting each line by \",\"\nIt creates a dictionary where the keys are the first item in each line, and the values are the other values (in a list)\nIt returns the dictionary\n\nTest cases:\ncontents of stipends.csv:\n\nPeter,1000\nJoan,50500\nMary,2400\n\n\nprint( read_csv(\"stipends.csv\") ) # {\"Peter\": [1000], \n                                  #  \"Joan\": [50500],\n                                  #  \"Mary\": [2400]}\n\ncontents of population.csv:\n\nCountry,United States,Brazil,Mexico,Canada\nPopulation (in mil),331.00,212.56,128.93,37.74\n\n\nprint( read_csv(\"population.csv\") ) # {\"Country\": [\"United States\", \"Brazil\", \"Mexico\", \"Canada\"],\n                                    #  \"Population (in mil)\": [331.00, 212.56, 128.93, 37.74]}\n\nName the program read_data_file.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "assignments-09.html#programming-problem-18",
    "href": "assignments-09.html#programming-problem-18",
    "title": "Module 9 Assignments",
    "section": "Programming Problem 18",
    "text": "Programming Problem 18\nDue date: Tuesday, October 29, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is write_csv\nIt takes a dictionary and a string file_name as arguments\nIt opens the file with file_name in write mode\nIt iterates over the dictionary to write lines to the opened .csv\nEach key is the first element of the line, the values are lists that contain the other values in the line\n\nTest cases:\n\nmy_data = {\"Peter\": [1000], \"Joan\": [50500], \"Mary\": [2400]}\nwrite_csv(my_data, \"stipends.csv\")\n\nThis is what stipends.csv should contain:\n\nPeter,1000\nJoan,50500\nMary,2400\n\n\nmy_data = {\"Country\": [\"United States\", \"Brazil\", \"Mexico\", \"Canada\"],\n           \"Population (in mil)\": [331.00, 212.56, 128.93, 37.74]}\nwrite_csv(my_data, \"population.csv\")\n\nThis is what population.csv should contain:\n\nCountry,United States,Brazil,Mexico,Canada\nPopulation (in mil),331.0,212.56,128.93,37.74\n\nName the program write_data_file.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "assignments-08.html",
    "href": "assignments-08.html",
    "title": "Module 8 Assignments",
    "section": "",
    "text": "Due date: Friday, October 25, 2024 at 9pm\nShort Programming projects are submitted during our weekly 45-minute in-person lab sessions. Each lab sessions is guided by two TAs. The instructions for the short project will be available only during the lab sessions. To schedule your lab session go to the weekly lab session spreadsheet in Short Project Dates and Instructions."
  },
  {
    "objectID": "assignments-08.html#programming-problem-15",
    "href": "assignments-08.html#programming-problem-15",
    "title": "Module 8 Assignments",
    "section": "Programming Problem 15",
    "text": "Programming Problem 15\nDue date: Friday, October 25, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is count_vowels\nIt takes as argument a string\nIt iterates over the string (either with a while or for loop) counting how many lowercase and uppercase vowels the string has\nIt returns a dictionary with vowels are the keys, and integer counts as the values\n\nTest cases:\n\nprint( count_vowels(\"\") ) # {\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0,\n                          #  \"A\": 0, \"E\": 0, \"I\": 0, \"O\": 0, \"U\": 0}\n                \nprint( count_vowels(\"banana\") ) # {\"a\": 3, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0,\n                                #  \"A\": 0, \"E\": 0, \"I\": 0, \"O\": 0, \"U\": 0}\n                                \nprint( count_vowels(\"Adriana\") ) # {\"a\": 2, \"e\": 0, \"i\": 1, \"o\": 0, \"u\": 0,\n                                 #  \"A\": 1, \"E\": 0, \"I\": 0, \"O\": 0, \"U\": 0}\n                                 \nprint( count_vowels(\"Hello World!\") ) # {\"a\": 0, \"e\": 1, \"i\": 0, \"o\": 2, \"u\": 0,\n                                      #  \"A\": 0, \"E\": 0, \"I\": 0, \"O\": 0, \"U\": 0}\n\nName the program vowel_counting.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "assignments-08.html#programming-problem-16",
    "href": "assignments-08.html#programming-problem-16",
    "title": "Module 8 Assignments",
    "section": "Programming Problem 16",
    "text": "Programming Problem 16\nDue date: Friday, October 25, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is invert_dictionary\nIt takes a single dictionary as a parameter\nIt returns a new dictionary with the original dictionary values mapped as keys, and its original keys mapped as lists of values\n\nTest cases:\n\nprint( invert_dictionary({\"a\": 7, \"b\": 8}) ) # { 7: [\"a\"], 8: [\"b\"] }\nprint( invert_dictionary({\"a\": 2, \"b\": 2}) ) # { 2: [\"a\", \"b\"] }\nprint( invert_dictionary({}) ) # {}\n\nName the program inversion.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "control_flow_if.html",
    "href": "control_flow_if.html",
    "title": "Control Flow (if)",
    "section": "",
    "text": "In the programs we have seen till now, there has always been a series of statements faithfully executed by Python in exact top-down order. What if you wanted to change the flow of how it works? For example, you want the program to take some decisions and do different things depending on different situations, such as printing ‘Good Morning’ or ‘Good Evening’ depending on the time of the day?\nAs you might have guessed, this is achieved using control flow statements.\n\n\nThe if statement is used to check a condition: if the condition is true, we run a block of statements (called the if-block), else we process another block of statements (called the else-block). The else clause is optional.\nExample:\nnumber = 23\nguess = int(input('Enter an integer : '))\n\nif guess == number:\n    # New block starts here\n    print('Congratulations, you guessed it.')\n    print('(but you do not win any prizes!)')\n    # New block ends here\nelif guess &lt; number:\n    # Another block\n    print('No, it is a little higher than that')\n    # You can do whatever you want in a block ...\nelse:\n    print('No, it is a little lower than that')\n    # you must have guessed &gt; number to reach here\n\nprint('Done')\n# This last statement is always executed,\n# after the if statement is executed.\nOutput:\n\nEnter an integer : 23\nCongratulations, you guessed it.\n(but you do not win any prizes!)\nDone\n\nHow It Works\nIn this program, we take guesses from the user and check if it is the number that we have. We set the variable number to any integer we want, say 23. Then, we take the user’s guess using the input() function.\nWe supply a string to the built-in input function which prints it to the screen and waits for input from the user. Once we enter something and press the enter key, the input() function returns what we entered, as a string. We then convert this string to an integer using int and then store it in the variable guess. Actually, the int is a class but all you need to know right now is that you can use it to convert a string to an integer (assuming the string contains a valid integer in the text).\nNext, we compare the guess of the user with the number we have chosen. If they are equal, we print a success message. Notice that we use indentation levels to tell Python which statements belong to which block. This is why indentation is so important in Python. I hope you are sticking to the “consistent indentation” rule. Are you?\nNotice how the if statement contains a colon at the end - we are indicating to Python that a block of statements follows.\nThen, we check if the guess is less than the number, and if so, we inform the user that they must guess a little higher than that. What we have used here is the elif clause which actually combines two related if else-if else statements into one combined if-elif-else statement. This makes the program easier and reduces the amount of indentation required.\nThe elif and else statements must also have a colon at the end of the logical line followed by their corresponding block of statements (with proper indentation, of course)\nYou can have another if statement inside the if-block of an if statement and so on - this is called a nested if statement.\nRemember that the elif and else parts are optional. A minimal valid if statement is:\nif True:\n    print('Yes, it is true')\nAfter Python has finished executing the complete if statement along with the associated elif and else clauses, it moves on to the next statement in the block containing the if statement. In this case, it is the main block (where execution of the program starts), and the next statement is the print('Done') statement. After this, Python sees the ends of the program and simply finishes up.\nEven though this is a very simple program, I have been pointing out a lot of things that you should notice. All these are pretty straightforward (and surprisingly simple for those of you from C/C++ backgrounds). You will need to become aware of all these things initially, but after some practice you will become comfortable with them, and it will all feel ‘natural’ to you.\n\nNote for C/C++ Programmers\nThere is no switch statement in Python. You can use an if..elif..else statement to do the same thing\n\n\n\n\nWe have seen how to use if statements. These are some of the most commonly used parts of Python and hence, becoming comfortable with them is essential."
  },
  {
    "objectID": "control_flow_if.html#the-if-statement",
    "href": "control_flow_if.html#the-if-statement",
    "title": "Control Flow (if)",
    "section": "",
    "text": "The if statement is used to check a condition: if the condition is true, we run a block of statements (called the if-block), else we process another block of statements (called the else-block). The else clause is optional.\nExample:\nnumber = 23\nguess = int(input('Enter an integer : '))\n\nif guess == number:\n    # New block starts here\n    print('Congratulations, you guessed it.')\n    print('(but you do not win any prizes!)')\n    # New block ends here\nelif guess &lt; number:\n    # Another block\n    print('No, it is a little higher than that')\n    # You can do whatever you want in a block ...\nelse:\n    print('No, it is a little lower than that')\n    # you must have guessed &gt; number to reach here\n\nprint('Done')\n# This last statement is always executed,\n# after the if statement is executed.\nOutput:\n\nEnter an integer : 23\nCongratulations, you guessed it.\n(but you do not win any prizes!)\nDone\n\nHow It Works\nIn this program, we take guesses from the user and check if it is the number that we have. We set the variable number to any integer we want, say 23. Then, we take the user’s guess using the input() function.\nWe supply a string to the built-in input function which prints it to the screen and waits for input from the user. Once we enter something and press the enter key, the input() function returns what we entered, as a string. We then convert this string to an integer using int and then store it in the variable guess. Actually, the int is a class but all you need to know right now is that you can use it to convert a string to an integer (assuming the string contains a valid integer in the text).\nNext, we compare the guess of the user with the number we have chosen. If they are equal, we print a success message. Notice that we use indentation levels to tell Python which statements belong to which block. This is why indentation is so important in Python. I hope you are sticking to the “consistent indentation” rule. Are you?\nNotice how the if statement contains a colon at the end - we are indicating to Python that a block of statements follows.\nThen, we check if the guess is less than the number, and if so, we inform the user that they must guess a little higher than that. What we have used here is the elif clause which actually combines two related if else-if else statements into one combined if-elif-else statement. This makes the program easier and reduces the amount of indentation required.\nThe elif and else statements must also have a colon at the end of the logical line followed by their corresponding block of statements (with proper indentation, of course)\nYou can have another if statement inside the if-block of an if statement and so on - this is called a nested if statement.\nRemember that the elif and else parts are optional. A minimal valid if statement is:\nif True:\n    print('Yes, it is true')\nAfter Python has finished executing the complete if statement along with the associated elif and else clauses, it moves on to the next statement in the block containing the if statement. In this case, it is the main block (where execution of the program starts), and the next statement is the print('Done') statement. After this, Python sees the ends of the program and simply finishes up.\nEven though this is a very simple program, I have been pointing out a lot of things that you should notice. All these are pretty straightforward (and surprisingly simple for those of you from C/C++ backgrounds). You will need to become aware of all these things initially, but after some practice you will become comfortable with them, and it will all feel ‘natural’ to you.\n\nNote for C/C++ Programmers\nThere is no switch statement in Python. You can use an if..elif..else statement to do the same thing"
  },
  {
    "objectID": "control_flow_if.html#summary",
    "href": "control_flow_if.html#summary",
    "title": "Control Flow (if)",
    "section": "",
    "text": "We have seen how to use if statements. These are some of the most commonly used parts of Python and hence, becoming comfortable with them is essential."
  },
  {
    "objectID": "academic-integrity.html",
    "href": "academic-integrity.html",
    "title": "Academic Integrity",
    "section": "",
    "text": "All work you submit for grading in this course must be your own. Submitting work that includes (minor and/or major) components that are not your own work is considered plagiarism. Instances of plagiarism will be reported to the Dean of Students.\nKeep in mind that all assignments and practice problems provided in this course are meant to help you practice the skills that you will need to do well in all assessments (including on paper quizzes and exams), so it is generally in your best interest to avoid taking shortcuts even on practice problems (which are ungraded).\nSharing your code with others (in addition to copying code from others) is considered a break of the academic integrity code (unauthorized assistance) as well. If code that you claim is yours is found in other students’ submission(s), you will also be reported to the Dean of Students.\nGradescope has a similarity tool, which compares all submissions and create reports with submission overlaps. Similarity reports will be generated also with code generated by AI tools, and code found online."
  },
  {
    "objectID": "class-code.html",
    "href": "class-code.html",
    "title": "Code created in class",
    "section": "",
    "text": "I created a GitHub repository with the code created in class during live-coding demonstrations: TBA"
  },
  {
    "objectID": "project-5.html",
    "href": "project-5.html",
    "title": "Programming Project 5",
    "section": "",
    "text": "Programming Projects are to be submitted to gradescope.\nDue date: Thursday, October 10, 2024 at 9pm\nIn this programming project you will implement a number of Python functions to implement a simplified version of chess. Make sure you follow the provided style guide (you will be graded on it!).\nName your program one_d_chess.py to submit to gradescope. Make sure that gradescope gives you the points for passing the test cases.\nThis programming project is an adaptation of Ben Dicken’s 1 Dimensional Chess Programming Assignment.\nIn this programming project, you will be implementing a simpler variant of chess: 1D Chess! 1D chess is a variant of the game that is played on a board that has only one column of spaces, rather than a grid of spaces, as in typical chess. There are actually multiple variants of 1D chess. In this PA, you should implement a custom variant of 1D chess, which I’ll refer to as “110 1D chess”."
  },
  {
    "objectID": "project-5.html#d-chess-rules",
    "href": "project-5.html#d-chess-rules",
    "title": "Programming Project 5",
    "section": "1D Chess Rules",
    "text": "1D Chess Rules\nIn 110 1D chess, the board will be 1 by 9. Each player will get one king, and two knights. The white pieces go on the left, and the black on the right. The starting positions for the pieces of the game should be as follows:\n\n+-----------------------------------------------------+\n| WKi | WKn | WKn |     |     |     | BKn | BKn | BKi |\n+-----------------------------------------------------+\n\nKings and Knights move and kill their opponents differently. Knights can move either left or right, and when they move thy jump two pieces over. If they land on another piece, they kill them and take their spot. The king can move left or right, until they hit either another piece or an edge of the board. If a king hits another piece, they kill them and take their place. In chess, a player cannot typically kill one of their own pieces. In 110 1D chess, a king or knight can kill one of their own, if they hit or land on them, so be careful!"
  },
  {
    "objectID": "project-5.html#start-game",
    "href": "project-5.html#start-game",
    "title": "Programming Project 5",
    "section": "Start Game",
    "text": "Start Game\nWrite a function called create_board that takes no arguments. It returns a list with the initial state of the board (as shown in the test case below)\nTest case:\n\nprint( create_board() ) # [\"WKi\", \"WKn\", \"WKn\", \n                        #  \"EMPTY\", \"EMPTY\", \"EMPTY\",\n                        #  \"BKn\", \"BKn\", \"BKi\"]"
  },
  {
    "objectID": "project-5.html#print-board",
    "href": "project-5.html#print-board",
    "title": "Programming Project 5",
    "section": "Print Board",
    "text": "Print Board\nThis functions should have one parameter variable, the board list. The job of this function is to simply print out the board to standard output. If the board is passed in and in the initial game state, the output should look like so:\nTest case for initial board state:\n\nboard = create_board()\nprint( printable_board(board) ) # \"+-----------------------------------------------------+\\n\n                                #  | WKi | WKn | WKn |     |     |     | BKn | BKn | BKi |\\n\n                                #  +-----------------------------------------------------+\"\n\n\n+-----------------------------------------------------+\n| WKi | WKn | WKn |     |     |     | BKn | BKn | BKi |\n+-----------------------------------------------------+"
  },
  {
    "objectID": "project-5.html#check-move-validity",
    "href": "project-5.html#check-move-validity",
    "title": "Programming Project 5",
    "section": "Check move validity",
    "text": "Check move validity\nThis function has three parameter variables. The board (a list, representing the 1 by 9 board), the position (index) of the player to move, and player (WHITE or BLACK). This function should return a boolean (True or False). True if the desired move is valid, False otherwise. A move is valid if:\n\nThe position (index) is a valid index in the board list\nThe position is an index of one of the current player’s pieces on the board (for example, position 6 is an index of one of the BLACK’s pieces - BKn)\n\nYou do not need a while loop or for loop within this function. It can be accomplished with if statements. If the above two conditions are True, the function should return True. In any other case, return False.\nTest cases:\n\nboard = create_board()\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn | WKn |     |     |     | BKn | BKn | BKi |\n+-----------------------------------------------------+\n\n\nassert is_valid_move(board, 1, \"BLACK\" ) == False\nassert is_valid_move(board, 9, \"BLACK\" ) == False\nassert is_valid_move(board, -1, \"BLACK\" ) == False\nassert is_valid_move(board, 6, \"BLACK\" ) == True\nassert is_valid_move(board, 2, \"WHITE\" ) == True"
  },
  {
    "objectID": "project-5.html#move-a-king",
    "href": "project-5.html#move-a-king",
    "title": "Programming Project 5",
    "section": "Move a king",
    "text": "Move a king\nThis function has the same three parameters as the is_valid_move function except the third parameter should be the direction. move_king should actually move a king on the board (thus, it should change the board list). In 110 1d Chess, a king can move either left or right. The king will move until either it reaches another piece (killing that piece and taking it’s place), or an end of the board.\nThis function should move the king at the provided position in the correct direction. You should use a for-loop or while-loop to iterate through the elements in the list and determine the spot it should end up at.\nTest cases:\n\nboard = create_board()\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn | WKn |     |     |     | BKn | BKn | BKi |\n+-----------------------------------------------------+\n\n\nmove_king(board, 0, \"LEFT\") \nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn | WKn |     |     |     | BKn | BKn | BKi |\n+-----------------------------------------------------+\n\n\nmove_king(board, 8, \"LEFT\")\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn | WKn |     |     |     | BKn | BKi |     |\n+-----------------------------------------------------+"
  },
  {
    "objectID": "project-5.html#move-a-knight",
    "href": "project-5.html#move-a-knight",
    "title": "Programming Project 5",
    "section": "Move a knight",
    "text": "Move a knight\nThis function has the same three parameters as the move_king function. move_knight should actually move a knight on the board (thus, it should change the board list). In 110 1d Chess, a knight can move either left or right. A knight moves 2 locations. If it lands on a space that another piece occupies, then it kills that piece. It can jump over other pieces. If it cannot move due to the ending position of the move being out-of-bounds of the board, the knight should stay in its place. Note the biggest differences between a knight and a king here are:\n\na knight moves 2 locations each time\nit only moves once if it moves (the king may move multiple times and stop).\n\nThis function should move the knight at the provided position in the correct direction.\nTest cases:\n\nboard = create_board()\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn | WKn |     |     |     | BKn | BKn | BKi |\n+-----------------------------------------------------+\n\n\nmove_knight(board, 6, \"LEFT\") \nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn | WKn |     | BKn |     |     | BKn | BKi |\n+-----------------------------------------------------+\n\n\nmove_knight(board, 2, \"RIGHT\") \nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn |     |     | WKn |     |     | BKn | BKi |\n+-----------------------------------------------------+"
  },
  {
    "objectID": "project-5.html#make-a-move",
    "href": "project-5.html#make-a-move",
    "title": "Programming Project 5",
    "section": "Make a move",
    "text": "Make a move\nFunction name is move and it has three parameter variables. The board (a list, representing the 1 by 9 board), the position (index) of the player to move, and a direction (either \"LEFT\" or \"RIGHT\"). This function should determine if the piece to be moved is a king or a knight. If it is a king, call the move_king function. If a knight, call move_knight.\nTest case:\n\nboard = create_board()\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn | WKn |     |     |     | BKn | BKn | BKi |\n+-----------------------------------------------------+\n\n\nmove(board, 0, \"LEFT\")\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn | WKn |     |     |     | BKn | BKn | BKi |\n+-----------------------------------------------------+\n\n\nmove(board, 8, \"LEFT\") \nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn | WKn |     |     |     | BKn | BKi |     |\n+-----------------------------------------------------+"
  },
  {
    "objectID": "project-5.html#game-over",
    "href": "project-5.html#game-over",
    "title": "Programming Project 5",
    "section": "Game over",
    "text": "Game over\nThis function should be named is_game_over and it takes the board list as its only parameter, and should determine if the game is over or not. If the white king does not exist on the board, then the game is over, and black wins. In this case, the function should print Black wins! and return True. If the black king does not exist on the board, then the game is over, and white wins. In this case, the function should print White wins! and return True. If both kings are still in the board list, then the function should print nothing, and return False. Note you should print Black wins! or White wins! without adding a new line to the end of string.\nTest case:\n\nboard = create_board()\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn | WKn |     |     |     | BKn | BKn | BKi |\n+-----------------------------------------------------+\n\n\nassert is_game_over(board) == False\nmove(board, 2, \"RIGHT\")\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn |     |     | WKn |     | BKn | BKn | BKi |\n+-----------------------------------------------------+\n\n\nassert is_game_over(board) == False\nmove(board, 6, \"LEFT\")\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi | WKn |     |     | BKn |     |     | BKn | BKi |\n+-----------------------------------------------------+\n\n\nassert is_game_over(board) == False\nmove(board, 1, \"RIGHT\")\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi |     |     | WKn | BKn |     |     | BKn | BKi |\n+-----------------------------------------------------+\n\n\nassert is_game_over(board) == False\nmove(board, 4, \"LEFT\")\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n| WKi |     | BKn | WKn |     |     |     | BKn | BKi |\n+-----------------------------------------------------+\n\n\nassert is_game_over(board) == False\nmove(board, 0, \"RIGHT\")\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n|     |     | WKi | WKn |     |     |     | BKn | BKi |\n+-----------------------------------------------------+\n\n\nassert is_game_over(board) == False\nmove(board, 7, \"LEFT\")\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n|     |     | WKi | WKn |     | BKn |     |     | BKi |\n+-----------------------------------------------------+\n\n\nassert is_game_over(board) == False\nmove(board, 3, \"RIGHT\")\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n|     |     | WKi |     |     | WKn |     |     | BKi |\n+-----------------------------------------------------+\n\n\nassert is_game_over(board) == False\nmove(board, 8, \"LEFT\")\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n|     |     | WKi |     |     | BKi |     |     |     |\n+-----------------------------------------------------+\n\n\nassert is_game_over(board) == False\nmove(board, 2, \"RIGHT\")\nprint( printable_board(board) )\n\n\n+-----------------------------------------------------+\n|     |     |     |     |     | WKi |     |     |     |\n+-----------------------------------------------------+\n\n\nassert is_game_over(board) == True\n\n\nWhite wins!"
  },
  {
    "objectID": "project-4.html",
    "href": "project-4.html",
    "title": "Programming Project 4",
    "section": "",
    "text": "Programming Projects are to be submitted to gradescope.\nDue date: Monday, October 07, 2024 at 9pm\nThis assignment is an adaptation of the MIT’s 6.0001 Introduction to Computer Science and Programming in Python programming set 1.\nMake sure you follow the provided style guide (you will be graded on it!).\nAlso make sure you check the Academic Integrity and Common Gradescope Errors pages."
  },
  {
    "objectID": "project-4.html#part-1",
    "href": "project-4.html#part-1",
    "title": "Programming Project 4",
    "section": "Part 1",
    "text": "Part 1\nName the program house_hunting_1.py. Make sure that gradescope gives you the points for passing the test cases.\nIn this assignment we are going to determine how long it will take you to save enough money to make the down payment given the following assumptions:\n\nCall the cost of your first home total_cost.\nCall the portion of the cost needed for a down payment portion_down_payment . For simplicity, assume that portion_down_payment = 0.25 (25%).\nCall the amount that you have saved thus far current_savings. You start with a current savings of $0.\nAssume that you invest your current savings wisely, with an annual return of r (in other words, at the beginning of each month, you receive an additional current_savings*r/12 funds to put into your savings – the 12 is because r is an annual rate). Assume that your investments earn a return of r = 0.04 (4%).\nAssume your annual salary is annual_salary .\nAssume you are going to dedicate a certain amount of your salary each month to saving for the down payment. Call that portion_saved. This variable should be in decimal form (i.e. 0.1 for 10%).\nAt the end of each month, your savings will be increased by the return on your investment, plus a percentage of your monthly salary (annual salary / 12).\n\nWrite a program to calculate how many months it will take you to save up enough money for a down payment.\n\nTest cases – Part 1\nTry different arguments and see how long it takes to save for a down payment. Please make your program print results in the format shown in the test cases below.\n\nTest Case 1\n\nannual_salary = 120000\nportion_saved = .1\ntotal_cost = 1000000\ntotal_months = calculate_months(annual_salary, portion_saved, total_cost)\nprint(\"Number of months:\", total_months)\n\nNumber of months: 183\n\n\n\nTest Case 2\n\nannual_salary = 80000\nportion_saved = .15\ntotal_cost = 500000\ntotal_months = calculate_months(annual_salary, portion_saved, total_cost)\nprint(\"Number of months:\", total_months)\n\nNumber of months: 105"
  },
  {
    "objectID": "project-4.html#part-2",
    "href": "project-4.html#part-2",
    "title": "Programming Project 4",
    "section": "Part 2",
    "text": "Part 2\nName the program house_hunting_2.py. Make sure that gradescope gives you the points for passing the test cases.\nIn Part 1, we unrealistically assumed that your salary didn’t change. So we are going to build on your solution to Part 1 by factoring in a raise every six months.\nIn house_hunting_2.py, copy your solution to Part 1 (as we are going to reuse much of that machinery). Modify your program to include the following:\n\nUse a variable for a semi-annual salary raise semi_annual_raise (as a decimal percentage)\nAfter the 6th month, increase your salary by that percentage. Do the same after the 12th month, the 18 month, and so on.\n\nWrite a program to calculate how many months it will take you save up enough money for a down payment. Like before, assume that your investments earn a return of r = 0.04 (or 4%) and the required down payment percentage is 0.25 (or 25%).\nBe careful about when you increase your salary – this should only happen after the 6th, 12th, 18th month, and so on.\n\nTest cases – Part 2\nTry different arguments and see how long it takes to save for a down payment. Please make your program print results in the format shown in the test cases below.\n\nTest Case 1\n\nannual_salary = 120000\nportion_saved = .05\ntotal_cost =  500000\nsemi_annual_raise = .03\ntotal_months = calculate_months(annual_salary, portion_saved, total_cost, semi_annual_raise)\nprint(\"Number of months:\", total_months)\n\nNumber of months: 142\n\n\n\nTest Case 2\n\nannual_salary =  80000\nportion_saved = .1\ntotal_cost =   800000\nsemi_annual_raise = .03\ntotal_months = calculate_months(annual_salary, portion_saved, total_cost, semi_annual_raise)\nprint(\"Number of months:\", total_months)\n\nNumber of months: 159\n\n\n\nTest Case 3\n\nannual_salary =   75000\nportion_saved = .05\ntotal_cost =    1500000\nsemi_annual_raise = .05\ntotal_months = calculate_months(annual_salary, portion_saved, total_cost, semi_annual_raise)\nprint(\"Number of months:\", total_months)\n\nNumber of months: 261"
  },
  {
    "objectID": "project-6.html",
    "href": "project-6.html",
    "title": "Programming Project 6",
    "section": "",
    "text": "Programming Projects are to be submitted to gradescope.\nDue date: Thursday, October 17, 2024 at 9pm\nFor this programming project, you will create and manipulate 2D lists – which are lists that contain lists."
  },
  {
    "objectID": "project-6.html#create-the-random-background",
    "href": "project-6.html#create-the-random-background",
    "title": "Programming Project 6",
    "section": "Create the random background",
    "text": "Create the random background\nThe first function you should write is the create_background function, which takes a width (how wide the pattern will be in number of stitches), a length (how many rows the pattern has), and number of unique symbols. Note how the last argument, 2, makes it so the pattern is created with the first two symbols in the SYMBOLS list provided in the starter code.\nMake sure you have random.seed(123) in this function so that every time we generate the same random number.\n\npattern = create_background(20, 10, 2)\nprint_pattern(pattern)\n\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│ ◎ │ △ │ ◎ │ △ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ ◎ │ △ │ △ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ △ │ △ │ △ │ △ │ △ │ ◎ │ △ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ◎ │ △ │ △ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ △ │ ◎ │ △ │ △ │ △ │ ◎ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ ◎ │ ◎ │ △ │ ◎ │ △ │ ◎ │ △ │ ◎ │ △ │ △ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ △ │ △ │ △ │ ◎ │ △ │ △ │ △ │ ◎ │ ◎ │ △ │ ◎ │ ◎ │ △ │ ◎ │ ◎ │ ◎ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ △ │ △ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ △ │ △ │ △ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ◎ │ △ │ ◎ │ △ │ ◎ │ △ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │ △ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ △ │ △ │ △ │ ◎ │ △ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ △ │ △ │\n└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘"
  },
  {
    "objectID": "project-6.html#add-a-vertical-stripe-to-the-pattern",
    "href": "project-6.html#add-a-vertical-stripe-to-the-pattern",
    "title": "Programming Project 6",
    "section": "Add a vertical stripe to the pattern",
    "text": "Add a vertical stripe to the pattern\nWrite the function add_v_stripe that modifies and returns the pattern, by adding a stripe of certain width, using a specific symbol. The stripe should start at the first row of symbols (y = 0) and end at the last row of symbols.\n\npattern = create_background(20, 10, 2)\n# add vertical stripe at y = 2, of width = 4,\n# using the symbol at index 3 in the list of symbols\npattern = add_v_stripe(pattern, 2, 4, 3)\nprint_pattern(pattern)\n\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│ ◎ │ △ │ ● │ ● │ ● │ ● │ ◎ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ ● │ ● │ ● │ ● │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ △ │ △ │ △ │ △ │ △ │ ◎ │ △ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ● │ ● │ ● │ ● │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ △ │ ◎ │ △ │ △ │ △ │ ◎ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ ● │ ● │ ● │ ● │ △ │ ◎ │ △ │ ◎ │ △ │ △ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ● │ ● │ ● │ ● │ △ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ ● │ ● │ ● │ ● │ △ │ △ │ △ │ ◎ │ ◎ │ △ │ ◎ │ ◎ │ △ │ ◎ │ ◎ │ ◎ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ● │ ● │ ● │ ● │ ◎ │ ◎ │ △ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ △ │ △ │ △ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ● │ ● │ ● │ ● │ ◎ │ △ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ● │ ● │ ● │ ● │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │ △ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ △ │ ● │ ● │ ● │ ● │ △ │ △ │ △ │ △ │ ◎ │ △ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ △ │ △ │\n└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘"
  },
  {
    "objectID": "project-6.html#add-a-horizontal-stripe-to-the-pattern",
    "href": "project-6.html#add-a-horizontal-stripe-to-the-pattern",
    "title": "Programming Project 6",
    "section": "Add a horizontal stripe to the pattern",
    "text": "Add a horizontal stripe to the pattern\nWrite the function add_h_stripe that modifies and returns the pattern, by adding a stripe of certain height, using a specific symbol. The stripe should start at the first column of symbols (x = 0) and end at the last column of symbols.\n\npattern = create_background(20, 10, 2)\n# add vertical stripe at x = 2, of height = 5,\n# using the symbol at index 6 in the list of symbols\npattern = add_h_stripe(pattern, 2, 5, 6)\nprint_pattern(pattern)\n\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│ ◎ │ △ │ ◎ │ △ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ ◎ │ △ │ △ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ △ │ △ │ △ │ △ │ △ │ ◎ │ △ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │ ▲ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ◎ │ △ │ ◎ │ △ │ ◎ │ △ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │ △ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ △ │ △ │ △ │ ◎ │ △ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ △ │ △ │\n└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘"
  },
  {
    "objectID": "project-6.html#add-a-square-to-the-pattern",
    "href": "project-6.html#add-a-square-to-the-pattern",
    "title": "Programming Project 6",
    "section": "Add a square to the pattern",
    "text": "Add a square to the pattern\nWrite the function add_square that modifies and returns the pattern, by adding a square of certain size, using a specific symbol.\n\npattern = create_background(20, 10, 2)\n# add a square to the pattern at coordinates x and y,\n# of size 8 using symbol at index 14\npattern = add_square(pattern, 1, 5, 8, 14)\nprint_pattern(pattern)\n\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│ ◎ │ △ │ ◎ │ △ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ ◎ │ △ │ △ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ △ │ △ │ △ │ ◎ │ △ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ◎ │ △ │ △ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ◎ │ △ │ △ │ △ │ ◎ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ ◎ │ ◎ │ △ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ △ │ ◎ │ ◎ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ △ │ △ │ △ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ◎ │ △ │ ◎ │ ◎ │ ◎ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ △ │ △ │ ◎ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ◎ │ △ │ △ │ △ │ △ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ◎ │ △ │ ◎ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ △ │ △ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ◎ │ ◎ │ △ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ ♦ │ △ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ △ │ △ │ △ │ ◎ │ △ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ △ │ △ │\n└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘"
  },
  {
    "objectID": "project-6.html#add-a-rectangle-to-the-pattern",
    "href": "project-6.html#add-a-rectangle-to-the-pattern",
    "title": "Programming Project 6",
    "section": "Add a rectangle to the pattern",
    "text": "Add a rectangle to the pattern\nWrite the function add_rectangle that modifies and returns the pattern, by adding a rectangle of certain width and height, using a specific symbol.\n\npattern = create_background(20, 10, 2)\n# add a rectangle to the pattern at coordinates x and y,\n# of width 5 and height 3, using the symbol at index 4\nadd_rectangle(pattern, 2, 3, 5, 3, 4)\nprint_pattern(pattern)\n\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│ ◎ │ △ │ ◎ │ △ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ ◎ │ △ │ △ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ △ │ △ │ △ │ △ │ △ │ ◎ │ △ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ◎ │ ▣ │ ▣ │ ▣ │ ▣ │ ▣ │ ◎ │ ◎ │ ◎ │ △ │ △ │ ◎ │ △ │ △ │ △ │ ◎ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ ◎ │ ▣ │ ▣ │ ▣ │ ▣ │ ▣ │ △ │ ◎ │ △ │ △ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ △ │ ▣ │ ▣ │ ▣ │ ▣ │ ▣ │ △ │ △ │ ◎ │ ◎ │ ◎ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ ◎ │ △ │ △ │ △ │ ◎ │ △ │ △ │ △ │ ◎ │ ◎ │ △ │ ◎ │ ◎ │ △ │ ◎ │ ◎ │ ◎ │ △ │ △ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ △ │ △ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ △ │ △ │ △ │ △ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ◎ │ △ │ ◎ │ △ │ ◎ │ △ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ ◎ │ △ │ △ │ △ │ △ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ △ │ △ │ ◎ │ ◎ │ △ │ △ │ △ │ △ │ △ │ △ │ ◎ │ △ │ △ │ ◎ │ ◎ │ △ │ ◎ │ △ │ △ │ △ │\n└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘"
  },
  {
    "objectID": "project-6.html#add-four-different-triangles-to-the-pattern",
    "href": "project-6.html#add-four-different-triangles-to-the-pattern",
    "title": "Programming Project 6",
    "section": "Add four different triangles to the pattern",
    "text": "Add four different triangles to the pattern\nYou should write four different functions to add four types of triangles to the pattern.\nEach triangle function modifies and returns the pattern, by adding a triangle of certain size, using a specific symbol. Each triangle is half of a square – each of the four options slices the square diagonally is four different ways.\n\npattern = create_background(10, 10, 1)\n# add a triangle to the pattern at coordinates x and y,\n# of size 6, using the symbol at index 17\n# the first 2 is x, the second 2 is y\nadd_triangle_a(pattern, 2, 2, 6, 17)\nprint_pattern(pattern)\n\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◘ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘\n\n\npattern = create_background(10, 10, 1)\n# add a triangle to the pattern at coordinates x and y,\n# of size 6, using the symbol at index 17\nadd_triangle_b(pattern, 2, 2, 6, 17)\nprint_pattern(pattern)\n\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◘ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘\n\n\npattern = create_background(10, 10, 1)\n# add a triangle to the pattern at coordinates x and y,\n# of size 6, using the symbol at index 17\nadd_triangle_c(pattern, 2, 2, 6, 17)\nprint_pattern(pattern)\n\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◘ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘\n\n\npattern = create_background(10, 10, 1)\n# add a triangle to the pattern at coordinates x and y,\n# of size 6, using the symbol at index 17\nadd_triangle_d(pattern, 2, 2, 6, 17)\nprint_pattern(pattern)\n\n┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◘ │ ◘ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◘ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◘ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤\n│ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │ ◎ │\n└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘"
  },
  {
    "objectID": "slides-11-01.html#lists-within-lists",
    "href": "slides-11-01.html#lists-within-lists",
    "title": "more on for loops (class slides)",
    "section": "lists within lists",
    "text": "lists within lists\nWe’ve worked with lists of integers, list of strings, and lists of floats – but we can also have lists of lists:\n\nlists = [[9,  8,  7,  8],\n         [10, 20, 30, 4],\n         [5,  50, 55, 4]]\nlists[0]\n\n[9, 8, 7, 8]\n\n\n\nlists[0][0]\n\n9"
  },
  {
    "objectID": "slides-11-01.html#d-lists",
    "href": "slides-11-01.html#d-lists",
    "title": "more on for loops (class slides)",
    "section": "2D lists",
    "text": "2D lists\n\nThe “first dimension” is the outer list\nThe “second dimension” are the inner lists\n\n\nlists = [[9,  8,  7,  8], # index 0 of outer list\n         [10, 20, 30, 4], # index 1 of outer list\n         [5,  50, 55, 4]] # index 2 of outer list"
  },
  {
    "objectID": "slides-11-01.html#evaluate-the-expressions",
    "href": "slides-11-01.html#evaluate-the-expressions",
    "title": "more on for loops (class slides)",
    "section": "Evaluate the Expressions",
    "text": "Evaluate the Expressions\n\nnumbers = [[4, 2, 3],\n           [0, 2, 5]]\nnumbers[1][2]   \n\nitems = [[9, 7, 8],\n         [1, 2, 3, 4, 5, 6],\n         [5],\n         [10, 20, 30]]\nitems[1][5]\nitems[2][5]\nitems[3][2]"
  },
  {
    "objectID": "slides-11-01.html#evaluate-the-expressions-1",
    "href": "slides-11-01.html#evaluate-the-expressions-1",
    "title": "more on for loops (class slides)",
    "section": "Evaluate the Expressions",
    "text": "Evaluate the Expressions\n\nnumbers = [[4, 2, 3],\n           [0, 2, 5]]\nnumbers[1][2]\n\n5\n\n\n\nitems = [[9, 7, 8],\n         [1, 2, 3, 4, 5, 6],\n         [5],\n         [10, 20, 30]]\nitems[1][5]\n\n6\n\n\n\nitems[2][5] # will throw error\n\n\nitems[3][2]\n\n30"
  },
  {
    "objectID": "slides-11-01.html#for-loops-with-lists-of-lists",
    "href": "slides-11-01.html#for-loops-with-lists-of-lists",
    "title": "more on for loops (class slides)",
    "section": "for loops with lists of lists",
    "text": "for loops with lists of lists\n\nitems = [[9, 7, 8],\n         [5],\n         [10, 20, 30]]\n         \nfor i in range(len(items)):\n  for j in range(len(items[i])):\n    print( items[i][j] )\n\n9\n7\n8\n5\n10\n20\n30"
  },
  {
    "objectID": "slides-11-01.html#write-a-function",
    "href": "slides-11-01.html#write-a-function",
    "title": "more on for loops (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is flatten\nIt takes one parameter, which is a list of lists of integers: numbers\nIt returns a single list that flattens that list of lists into a single list that contains exactly the same values\nDo not use any list methods besides .append()\n\n\nassert flatten([]) == []\nassert flatten([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert flatten([[1, 2, 3], [4]]) == [1, 2, 3, 4]"
  },
  {
    "objectID": "slides-11-01.html#write-a-function-solution",
    "href": "slides-11-01.html#write-a-function-solution",
    "title": "more on for loops (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef flatten(numbers):\n  new_list = []\n  for i in range(len(numbers)):\n    for j in range(len(numbers[i])):\n      new_list.append(numbers[i][j])\n  return new_list\n\ndef main():\n  assert flatten([]) == []\n  assert flatten([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\n  assert flatten([[1, 2, 3], [4]]) == [1, 2, 3, 4]\n\nmain()"
  },
  {
    "objectID": "slides-11-01.html#write-a-function-1",
    "href": "slides-11-01.html#write-a-function-1",
    "title": "more on for loops (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is get_highest_average\nIt takes an argument, lists, which is a 2D list of numbers (floats or integers)\nIt calculates the mean of each sublist, and returns the highest average\n\n\nassert get_highest_average([[1, 1, 1], [2, 2]]) == 2"
  },
  {
    "objectID": "slides-11-01.html#write-a-function-2",
    "href": "slides-11-01.html#write-a-function-2",
    "title": "more on for loops (class slides)",
    "section": "Write a function",
    "text": "Write a function\nAn illustration:\n\n\n\n\nflowchart LR\n  A[\"[[ ],  &lt;br&gt;  [2, 3, 7], &lt;br&gt; [15, 21, 3, 24], &lt;br&gt; [6, 4] ]\"] --&gt; B(\"len([]) &gt; 0 ?\") \n  A --&gt; SS(\"len([2, 3, 7]) &gt; 0 ?\") --&gt; K[\"[2, 3, 7]\"]\n  A --&gt; SSS(\"len([15, 2, 3, 8]) &gt; 0 ?\") --&gt; S[\"[15, 2, 3, 8]\"]\n  A --&gt; SSSS(\"len([6, 4]) &gt; 0 ?\") --&gt; F[\"[6, 4]\"]\n  K --&gt;id1[calculate mean: 4]\n  S --&gt; id2[calculate mean: 7]\n  F --&gt; id3[calculate mean: 5]\n  id1 --&gt; E[\"[4, 7, 5]\"]\n  id2 --&gt; E\n  id3 --&gt; E\n  \n  L(\"len([4, 7, 5]) &gt; 0 ?\") --&gt; id4[calculate highest mean: 7]\n  \n\n  style id1 fill:#ffd5f1,stroke:#333,stroke-width:2px\n  style id2 fill:#ffd5f1,stroke:#333,stroke-width:2px\n  style id3 fill:#ffd5f1,stroke:#333,stroke-width:2px\n  style id4 fill:#feffad,stroke:#333,stroke-width:2px"
  },
  {
    "objectID": "slides-11-01.html#write-a-function-solution-1",
    "href": "slides-11-01.html#write-a-function-solution-1",
    "title": "more on for loops (class slides)",
    "section": "Write a function – solution 1",
    "text": "Write a function – solution 1\n\ndef get_highest_average(numbers):\n  means = []\n  for i in range(len(numbers)):\n    if len(numbers[i]) &gt; 0:\n      total_sublist = 0\n      for j in range(len(numbers[i])):\n        total_sublist += numbers[i][j]\n      mean_sublist = total_sublist / len(numbers[i])\n      means.append(mean_sublist)\n  \n  if len(means) &gt; 0:\n    highest_mean = means[0]\n    for i in range(len(means)):\n      if means[i] &gt; highest_mean:\n        highest_mean = means[i]\n        \n    return highest_mean\n\ndef main():\n  assert get_highest_average([[1, 1, 1], [2, 2]]) == 2\n  assert get_highest_average([[1, 1, 1], []]) == 1\n  assert get_highest_average([[], []]) == None\n  assert get_highest_average([]) == None\n  \n  weeks = [ [100, 100, 105, 105, 102, 102, 100],\n            [70, 71, 75, 72, 81, 80, 74],\n            [78, 72, 74, 71, 70, 70, 70],\n            [30, 32, 40, 38, 31, 32, 30] ]\n  average = get_highest_average(weeks)\n  assert average == 102\n  \nmain()"
  },
  {
    "objectID": "slides-11-01.html#write-a-function-solution-2",
    "href": "slides-11-01.html#write-a-function-solution-2",
    "title": "more on for loops (class slides)",
    "section": "Write a function – solution 2",
    "text": "Write a function – solution 2\n\ndef get_highest_average(number_lists):\n    max_average = None\n    for i in range(len(number_lists)):\n        if len(number_lists[i]) &gt; 0:\n            total_sublist = 0\n            for j in range(len(number_lists[i])):\n                total_sublist += number_lists[i][j]\n            average = total_sublist/len(number_lists[i])\n            if max_average == None or average &gt; max_average:\n                max_average = average\n    return max_average\n\ndef main():\n  assert get_highest_average([[1, 1, 1], [2, 2]]) == 2\n  assert get_highest_average([[1, 1, 1], []]) == 1\n  assert get_highest_average([[], []]) == None\n  assert get_highest_average([]) == None\n  \n  weeks = [ [100, 100, 105, 105, 102, 102, 100],\n            [70, 71, 75, 72, 81, 80, 74],\n            [78, 72, 74, 71, 70, 70, 70],\n            [30, 32, 40, 38, 31, 32, 30] ]\n  average = get_highest_average(weeks)\n  assert average == 102\n  \nmain()"
  },
  {
    "objectID": "slides-13-01.html#announcements",
    "href": "slides-13-01.html#announcements",
    "title": "mutating lists (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nQuiz 06 will be on next Wednesday, Apr 10 (mutate nested lists & sets)\nReview Module 11 and 12"
  },
  {
    "objectID": "slides-13-01.html#lists-are-mutable",
    "href": "slides-13-01.html#lists-are-mutable",
    "title": "mutating lists (class slides)",
    "section": "Lists are mutable",
    "text": "Lists are mutable\n\nchanges to a list in a function will remain after the function finishes running\nchanges to individual list elements do not change the list itself"
  },
  {
    "objectID": "slides-13-01.html#changing-a-list-in-a-loop",
    "href": "slides-13-01.html#changing-a-list-in-a-loop",
    "title": "mutating lists (class slides)",
    "section": "Changing a list in a loop",
    "text": "Changing a list in a loop\nChanges to individual list elements do not change the list itself\n\nnumbers = [1, 2, 1, 4, 5]\nfor n in numbers:\n  n += 1\nnumbers\n\n[1, 2, 1, 4, 5]\n\n\nUse a for i in range loop instead:\n\nnumbers = [1, 2, 1, 4, 5]\nfor i in range(len(numbers)):\n  numbers[i] += 1\nnumbers\n\n[2, 3, 2, 5, 6]"
  },
  {
    "objectID": "slides-13-01.html#write-a-function",
    "href": "slides-13-01.html#write-a-function",
    "title": "mutating lists (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is square_all\nIt takes a list of integers as argument\nIt mutates the list, squaring each integer (n**2)\n\n\ntest_list = [1, 2, 3, 4]\nsquare_all(test_list)\nassert test_list == [1, 4, 9, 16]\nassert square_all([-1, -2, -4]) == [1, 4, 16]"
  },
  {
    "objectID": "slides-13-01.html#write-a-function-solution",
    "href": "slides-13-01.html#write-a-function-solution",
    "title": "mutating lists (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef square_all(numbers):\n  for i in range(len(numbers)):\n    numbers[i] = numbers[i]**2\n  return numbers\n    \ndef main():\n  test_list = [1, 2, 3, 4]\n  square_all(test_list)\n  assert test_list == [1, 4, 9, 16]\n  assert square_all([-1, -2, -4]) == [1, 4, 16]\n  print(test_list) # [1, 4, 9, 16]\n  \nmain()\n\n[1, 4, 9, 16]"
  },
  {
    "objectID": "slides-13-01.html#removing-elements-from-a-list-in-a-loop",
    "href": "slides-13-01.html#removing-elements-from-a-list-in-a-loop",
    "title": "mutating lists (class slides)",
    "section": "Removing elements from a list in a loop",
    "text": "Removing elements from a list in a loop\nUsing a for i in range when removing items in a list throws an error\n\nnumbers = [1, 2, 1, 4, 5]\nfor i in range(len(numbers)):\n  numbers.pop(i)\nnumbers\n\nERROR"
  },
  {
    "objectID": "slides-13-01.html#removing-elements-from-a-list-in-a-loop-1",
    "href": "slides-13-01.html#removing-elements-from-a-list-in-a-loop-1",
    "title": "mutating lists (class slides)",
    "section": "Removing elements from a list in a loop",
    "text": "Removing elements from a list in a loop\nUse a while loop instead (remember to adjust i if doing conditional removal)\n\nnumbers = [1, 2, 1, 4, 5]\ni = 0\nwhile i &lt; len(numbers):\n  numbers.pop(i)\nnumbers\n\n[]\n\n\nOr go backwards\n\nnumbers = [1, 2, 1, 4, 5]\nfor i in range(len(numbers)-1, -1, -1):\n  numbers.pop(i)\nnumbers\n\n[]"
  },
  {
    "objectID": "slides-13-01.html#write-a-function-1",
    "href": "slides-13-01.html#write-a-function-1",
    "title": "mutating lists (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is remove_names\nIt takes one argument: a list of strings\nIt mutates and returns the argument list removing all strings that end in vowel\n\n\nnames = [\"Beatrice\", \"Philip\", \"Anna\", \"Peter\"]\nremove_names(names)\nassert names == [\"Philip\", \"Peter\"]"
  },
  {
    "objectID": "slides-13-01.html#write-a-function-solution-1",
    "href": "slides-13-01.html#write-a-function-solution-1",
    "title": "mutating lists (class slides)",
    "section": "Write a function – solution 1",
    "text": "Write a function – solution 1\n\ndef remove_names(string_list):\n  i = 0\n  while i &lt; len(string_list):\n    if string_list[i][-1] in \"aeiou\":\n      string_list.pop(i)\n    else:\n      i += 1\n  return string_list\n      \ndef main():\n  names = [\"Beatrice\", \"Philip\", \"Anna\", \"Peter\"]\n  remove_names(names)\n  assert names == [\"Philip\", \"Peter\"]\n  print(names) # [\"Philip\", \"Peter\"]\n\nmain()\n\n['Philip', 'Peter']"
  },
  {
    "objectID": "slides-13-01.html#write-a-function-solution-2",
    "href": "slides-13-01.html#write-a-function-solution-2",
    "title": "mutating lists (class slides)",
    "section": "Write a function – solution 2",
    "text": "Write a function – solution 2\n\ndef remove_names(string_list):\n  for i in range(len(string_list)-1, -1, -1):\n    if string_list[i][-1] in \"aeiou\":\n      string_list.pop(i)\n  return string_list\n      \ndef main():\n  names = [\"Beatrice\", \"Philip\", \"Anna\", \"Peter\"]\n  remove_names(names)\n  assert names == [\"Philip\", \"Peter\"]\n  print(names) # [\"Philip\", \"Peter\"]\n\nmain()\n\n['Philip', 'Peter']"
  },
  {
    "objectID": "slides-13-01.html#removing-elements-from-inner-lists-in-2d-lists",
    "href": "slides-13-01.html#removing-elements-from-inner-lists-in-2d-lists",
    "title": "mutating lists (class slides)",
    "section": "Removing elements from inner lists in 2D lists",
    "text": "Removing elements from inner lists in 2D lists\n\nlists_of_numbers = [ [2, 3, 1, 2], [4, 5, 2, 1] ]\nfor inner_list in lists_of_numbers:\n  for i in range(len(inner_list)-1, -1, -1):\n    inner_list.pop(i)\n    \nprint(lists_of_numbers)\n\n[[], []]"
  },
  {
    "objectID": "slides-13-01.html#write-a-function-2",
    "href": "slides-13-01.html#write-a-function-2",
    "title": "mutating lists (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is remove_odds\nIt takes a list of lists of integers as argument\nIt mutates the inner list, removing odd numbers\n\n\nlists_of_numbers = [ [2, 3, 1, 2], [4, 5, 2, 1] ]\nremove_odds(lists_of_numbers)\nassert lists_of_numbers == [ [2, 2], [4, 2] ]"
  },
  {
    "objectID": "slides-13-01.html#write-a-function-solution-3",
    "href": "slides-13-01.html#write-a-function-solution-3",
    "title": "mutating lists (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef remove_odds(lists_of_numbers):\n  for inner_list in lists_of_numbers:\n    for i in range(len(inner_list)-1, -1, -1):\n      if inner_list[i] % 2 != 0:\n        inner_list.pop(i)\n  return lists_of_numbers\n\ndef main():\n  test_list = [ [2, 3, 1, 2], [4, 5, 2, 1] ]\n  remove_odds(test_list)\n  assert test_list == [ [2, 2], [4, 2] ]\n  print(test_list) # [ [2, 2], [4, 2] ]\n  \nmain()\n\n[[2, 2], [4, 2]]"
  },
  {
    "objectID": "slides-01-01.html#welcome-to-csc-110",
    "href": "slides-01-01.html#welcome-to-csc-110",
    "title": "Course Introduction (class slides)",
    "section": "Welcome to CSc 110",
    "text": "Welcome to CSc 110\n\nThis is CSc 110, Introduction to Computer Programming I\nWant to learn how to program? . . . You’re in the right class!"
  },
  {
    "objectID": "slides-01-01.html#who-am-i",
    "href": "slides-01-01.html#who-am-i",
    "title": "Course Introduction (class slides)",
    "section": "Who am I?",
    "text": "Who am I?\n\nXinchen Yu (you can call me Xinchen or Dr. Yu)\nOffice: Gould-Simpson 829"
  },
  {
    "objectID": "slides-01-01.html#who-are-the-teaching-assistants-tas",
    "href": "slides-01-01.html#who-are-the-teaching-assistants-tas",
    "title": "Course Introduction (class slides)",
    "section": "Who are the teaching assistants? (TAs)",
    "text": "Who are the teaching assistants? (TAs)\nThe TAs are responsible for:\n\nHelping you, the students, succeed\nGrading assignments, quizzes, and exams\nHelping students on office hours\n\n. . . So get to know them!"
  },
  {
    "objectID": "slides-01-01.html#what-is-this-class-anyways",
    "href": "slides-01-01.html#what-is-this-class-anyways",
    "title": "Course Introduction (class slides)",
    "section": "What is this class, anyways?",
    "text": "What is this class, anyways?\n\nYou will learn how to program in Python (version 3)\nWill cover many of the basic principles and concepts, such as\n\ninput/output\nconditionals and loops (control flow)\nfunctions\ndata structures and more!\n\nPrerequisites: College Algebra or CSc 101 or appropriate math placement score"
  },
  {
    "objectID": "slides-01-01.html#the-intro-sequence",
    "href": "slides-01-01.html#the-intro-sequence",
    "title": "Course Introduction (class slides)",
    "section": "The intro sequence",
    "text": "The intro sequence\nThis is the intro course sequence for the CS department:\n\n\n\nCSc 101 - Intro to Computer Science\n\n\n\nCSc 110 - Intro to Computer Programming I\n\n\n\nCSc 120 - Intro to Computer Programming II"
  },
  {
    "objectID": "slides-01-01.html#what-do-you-need-to-succeed-in-this-class",
    "href": "slides-01-01.html#what-do-you-need-to-succeed-in-this-class",
    "title": "Course Introduction (class slides)",
    "section": "What do you need to succeed in this class?",
    "text": "What do you need to succeed in this class?\nA willingness to:\n\nbe curious about how things work\ntry and fail"
  },
  {
    "objectID": "slides-01-01.html#what-do-you-need-to-succeed-in-this-class-1",
    "href": "slides-01-01.html#what-do-you-need-to-succeed-in-this-class-1",
    "title": "Course Introduction (class slides)",
    "section": "What do you need to succeed in this class?",
    "text": "What do you need to succeed in this class?\n\nAccess to a computer with internet (you can get one from the library)\nInstall Python and an IDE/editor (Visual Studio Code is recommended)\nDo the readings, watch the videos, come to class, come to lab sessions, come to office hours, do the assignments yourself"
  },
  {
    "objectID": "slides-01-01.html#how-is-the-structure-of-this-class-designed-to-help-you-succeed",
    "href": "slides-01-01.html#how-is-the-structure-of-this-class-designed-to-help-you-succeed",
    "title": "Course Introduction (class slides)",
    "section": "How is the structure of this class designed to help you succeed?",
    "text": "How is the structure of this class designed to help you succeed?\n\nActive learning – you are expected to engage in the in-class activities\nSmall sequential steps – each week we build on top of the content of the previous week, make sure you are following along\nSpaced repetition – this is not the type of course you can cram for 2 hours before the exam\nMastery checks – frequent assessment"
  },
  {
    "objectID": "slides-01-01.html#assessment-structure",
    "href": "slides-01-01.html#assessment-structure",
    "title": "Course Introduction (class slides)",
    "section": "Assessment structure",
    "text": "Assessment structure\n\nProgramming Problems\nShort Projects (to be completed in the lab sessions)\nProjects\nExams and Quizzes (on paper)"
  },
  {
    "objectID": "slides-01-01.html#exams-and-quizzes",
    "href": "slides-01-01.html#exams-and-quizzes",
    "title": "Course Introduction (class slides)",
    "section": "Exams and Quizzes",
    "text": "Exams and Quizzes\nExams are on paper. Why?\n\nImportant skill to develop\nYou are able to show what you learned\nWhiteboard coding interviews are common"
  },
  {
    "objectID": "slides-01-01.html#exams-and-quizzes-1",
    "href": "slides-01-01.html#exams-and-quizzes-1",
    "title": "Course Introduction (class slides)",
    "section": "Exams and Quizzes",
    "text": "Exams and Quizzes\n\nMidterm exams and weekly quizzes are always on Wednesday (same room as our lectures)\nOur first quiz will be on this Wednesday, August 28"
  },
  {
    "objectID": "slides-01-01.html#syllabus-activity",
    "href": "slides-01-01.html#syllabus-activity",
    "title": "Course Introduction (class slides)",
    "section": "Syllabus Activity",
    "text": "Syllabus Activity\n\nWhat is the grade distribution for this class?\nHow many days you have for regrade requests?\nWhen are the exams?"
  },
  {
    "objectID": "slides-01-01.html#attendance",
    "href": "slides-01-01.html#attendance",
    "title": "Course Introduction (class slides)",
    "section": "Attendance",
    "text": "Attendance\nAccess gradescope and answer the attendance question."
  },
  {
    "objectID": "slides-01-01.html#other-important-dates",
    "href": "slides-01-01.html#other-important-dates",
    "title": "Course Introduction (class slides)",
    "section": "Other Important Dates",
    "text": "Other Important Dates\n\nLast day for students to add themselves to a course using UAccess is September 2\nLast day for students to drop without a grade of W (withdraw) is September 8"
  },
  {
    "objectID": "slides-01-01.html#academic-integrity",
    "href": "slides-01-01.html#academic-integrity",
    "title": "Course Introduction (class slides)",
    "section": "Academic integrity",
    "text": "Academic integrity\n\nYou yourself do the work\n\nExamples of breaches of academic integrity:\n\nHaving a friend do the assignments for you\nUsing generative AI (for example, ChatGPT) solve the assignments for you\nCopying a solution from the internet"
  },
  {
    "objectID": "slides-01-01.html#academic-integrity-1",
    "href": "slides-01-01.html#academic-integrity-1",
    "title": "Course Introduction (class slides)",
    "section": "Academic integrity",
    "text": "Academic integrity\n\nTAs are not to debug and give answers\nTAs work with you and answer clarification questions\nRun things on your computer (it will help you with debugging)\nSharing code is cheating"
  },
  {
    "objectID": "slides-01-01.html#materials",
    "href": "slides-01-01.html#materials",
    "title": "Course Introduction (class slides)",
    "section": "Materials",
    "text": "Materials\n\nReadings, videos, exercises, slides, assignment instructions will be available on the website\nHOWEVER, you are still responsible for things said/announced in class"
  },
  {
    "objectID": "slides-01-01.html#how-to-get-help",
    "href": "slides-01-01.html#how-to-get-help",
    "title": "Course Introduction (class slides)",
    "section": "How to get help?",
    "text": "How to get help?\nBefore you ask for help:\n\nCheck for typos (read your error messages)\nGoogle is your friend (use it wisely). Copy and paste the exact error message on a Google search. (this step also includes read the documentation on the functions you’re trying to use)."
  },
  {
    "objectID": "slides-01-01.html#how-to-get-help-1",
    "href": "slides-01-01.html#how-to-get-help-1",
    "title": "Course Introduction (class slides)",
    "section": "How to get help?",
    "text": "How to get help?\nBefore you ask for help: try rubber duck debugging"
  },
  {
    "objectID": "slides-01-01.html#how-to-get-help-2",
    "href": "slides-01-01.html#how-to-get-help-2",
    "title": "Course Introduction (class slides)",
    "section": "How to get help?",
    "text": "How to get help?\nBefore you ask for help: - Try rubber duck debugging.\nDescribe the problem aloud, explaining it line-by-line, to a rubber duck or another person (who might not have any experience with programming). This is also a good preparation step to asking other people for help (next section)."
  },
  {
    "objectID": "slides-01-01.html#how-to-get-help-3",
    "href": "slides-01-01.html#how-to-get-help-3",
    "title": "Course Introduction (class slides)",
    "section": "How to get help?",
    "text": "How to get help?\nOnce you read your error messages, tried different things, read the Python documentation, and have the line-by-line explanation of what you are trying to do, then ask other people for help.\nBe precise and informative.\nThe more context you can provide about what you’re trying to do and what errors you’re getting, the better.\nAlso describe the steps you took to try to solve the problem yourself."
  },
  {
    "objectID": "slides-01-01.html#how-to-get-help-4",
    "href": "slides-01-01.html#how-to-get-help-4",
    "title": "Course Introduction (class slides)",
    "section": "How to get help?",
    "text": "How to get help?\n\nCome to office hours!\n\nBut come prepared – do not expect the TAs to solve problems or debug for you (you wouldn’t learn to solve them yourself if you are always asking other people to do it for you)\n\n1 point of extra credit if you show up to office hours (read the syllabus for specifics on this)"
  },
  {
    "objectID": "slides-01-01.html#how-to-get-help-5",
    "href": "slides-01-01.html#how-to-get-help-5",
    "title": "Course Introduction (class slides)",
    "section": "How to get help?",
    "text": "How to get help?\n\nCome to office hours!\nJoin Piazza and ask questions there\nIf you have private questions, generally please make a private Piazza post"
  },
  {
    "objectID": "project-2.html",
    "href": "project-2.html",
    "title": "Programming Project 2",
    "section": "",
    "text": "Programming Projects are to be submitted to gradescope.\nDue date: Thursday, September 19, 2024 at 9pm\nIn this programming project you will implement a number of Python functions to validate or transform values conditionally. Make sure you follow the provided style guide (you will be graded on it!). You are allowed to use round(), str() and len(), but other than that you are not allowed to use any other built-in method or function from any Python library.\nAlso make sure you check the Academic Integrity and Common Gradescope Errors pages.\nName the program grades.py. Make sure that gradescope gives you the points for passing the test cases."
  },
  {
    "objectID": "project-2.html#letter_grade",
    "href": "project-2.html#letter_grade",
    "title": "Programming Project 2",
    "section": "letter_grade()",
    "text": "letter_grade()\nThis function determines a letter grade (“A”, “B”, and so on) based on a float argument representing a percentage grade.\nIt returns a letter grade based on the following rules:\n-   Greater or equal to 90, return \"A\"\n-   Greater or equal to 80, return \"B\"\n-   Greater or equal to 70, return \"C\"\n-   Greater or equal to 60, return \"D\"\n-   Anything less, than 60 return \"E\" but greater or equal to 0\n-   If argument is negative or greater than 100, return \"X\""
  },
  {
    "objectID": "project-2.html#pass_or_fail",
    "href": "project-2.html#pass_or_fail",
    "title": "Programming Project 2",
    "section": "pass_or_fail",
    "text": "pass_or_fail\nThis function determines if a student passed or failed a class, based on their final letter grade. Letter grades equal to “A”, “B”, “C”, or “D” are passing grades (\"Pass\")."
  },
  {
    "objectID": "project-2.html#calculate-percentage-point_grade-function",
    "href": "project-2.html#calculate-percentage-point_grade-function",
    "title": "Programming Project 2",
    "section": "Calculate percentage – point_grade function",
    "text": "Calculate percentage – point_grade function\nThis function calculates a percentage grade based on a score and total_points. It calculates the percentage grade by dividing score by total_points, and multiplies result by 100. It returns the calculated percentage as a float rounded at two decimals"
  },
  {
    "objectID": "project-2.html#calculate-final-grade-get_grade_results-function",
    "href": "project-2.html#calculate-final-grade-get_grade_results-function",
    "title": "Programming Project 2",
    "section": "Calculate final grade – get_grade_results function",
    "text": "Calculate final grade – get_grade_results function\nThis function takes two score and total_points, and it calls the previous functions you’ve written – DO NOT recalculate percentage of grade, letter grade, etc. in this function. You are required to call the other functions. It returns a message similar to: Your grade is 92.34 (A - Pass) or Your grade is 35.78 (E - Fail)"
  },
  {
    "objectID": "project-2.html#test-cases",
    "href": "project-2.html#test-cases",
    "title": "Programming Project 2",
    "section": "Test Cases",
    "text": "Test Cases\n\ndef main():\n  # test letter_grade function\n  assert letter_grade(90) == \"A\"\n  assert letter_grade(80) == \"B\"\n  assert letter_grade(70) == \"C\"\n  assert letter_grade(60) == \"D\"\n  assert letter_grade(59) == \"E\"\n  assert letter_grade(-59) == \"X\"\n  assert letter_grade(110) == \"X\"\n  \n  # test pass_or_fail function\n  assert pass_or_fail(\"B\") == \"Pass\"\n  assert pass_or_fail(\"E\") == \"Fail\"\n  assert pass_or_fail(\"ABCD\") == \"Error\"\n  \n  # test point_grade function\n  assert point_grade(0, 100) == 0.0\n  assert point_grade(100, 100) == 100.0\n  assert point_grade(45, 80) == 56.25\n  assert point_grade(37, 40) == 92.5\n  \n  # test get_grade_results function\n  assert get_grade_results(0, 100) == \"Your grade is 0.0 (E - Fail)\"\n  assert get_grade_results(45, 80) == \"Your grade is 56.25 (E - Fail)\"\n  assert get_grade_results(37, 40) == \"Your grade is 92.5 (A - Pass)\"\n  \nmain()"
  },
  {
    "objectID": "slides-13-02.html#announcements",
    "href": "slides-13-02.html#announcements",
    "title": "mutating dictionaries (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nCheck your grades on D2L\nQuiz 06 this Wednesday (check practice problems Module 11 and 12)"
  },
  {
    "objectID": "slides-13-02.html#dictionaries-are-mutable",
    "href": "slides-13-02.html#dictionaries-are-mutable",
    "title": "mutating dictionaries (class slides)",
    "section": "Dictionaries are mutable",
    "text": "Dictionaries are mutable\n\nchanges to a dictionary in a function will remain after the function finishes running\nyou can change dictionary values using keys"
  },
  {
    "objectID": "slides-13-02.html#changing-values-in-a-dictionary",
    "href": "slides-13-02.html#changing-values-in-a-dictionary",
    "title": "mutating dictionaries (class slides)",
    "section": "Changing values in a dictionary",
    "text": "Changing values in a dictionary\nYou can change dictionary values using keys\n\nnames_ages = {\"Paul\": 32, \"Patricia\": 44, \"Eduardo\": 27}\nfor key in names_ages:\n  names_ages[key] += 1\nnames_ages\n\n{'Paul': 33, 'Patricia': 45, 'Eduardo': 28}"
  },
  {
    "objectID": "slides-13-02.html#write-a-function",
    "href": "slides-13-02.html#write-a-function",
    "title": "mutating dictionaries (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is sales_tax\nIt takes a dictionary as argument, with string keys and float values\nIt mutates the dictionary argument, multiplying each value by 0.056 and rounding the result to two decimals\n\n\ngroceries = {\"banana\": 2.50, \"milk\": 4.25, \"bread\": 3.68}\nsales_tax(groceries)\nassert groceries == {'banana': 0.14, 'milk': 0.24, 'bread': 0.21}"
  },
  {
    "objectID": "slides-13-02.html#write-a-function-solution",
    "href": "slides-13-02.html#write-a-function-solution",
    "title": "mutating dictionaries (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef sales_tax(dictionary):\n  for key in dictionary:\n    dictionary[key] = round(dictionary[key] * 0.056, 2)\n  return dictionary\n\ndef main():\n  groceries = {\"banana\": 2.50, \"milk\": 4.25, \"bread\": 3.68}\n  sales_tax(groceries)\n  assert groceries == {'banana': 0.14, 'milk': 0.24, 'bread': 0.21}\n  print(groceries)\n  \nmain()\n\n{'banana': 0.14, 'milk': 0.24, 'bread': 0.21}"
  },
  {
    "objectID": "slides-13-02.html#write-a-function-1",
    "href": "slides-13-02.html#write-a-function-1",
    "title": "mutating dictionaries (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is sales_tax\nIt takes a dictionary as argument, with string keys and float values\nIt returns a new dictionary, multiplying each value by 0.056 and rounding the result to two decimals\n\n\ngroceries = {\"banana\": 2.50, \"milk\": 4.25, \"bread\": 3.68}\nassert sales_tax(groceries) == {'banana': 0.14, 'milk': 0.24, 'bread': 0.21}"
  },
  {
    "objectID": "slides-13-02.html#write-a-function-solution-1",
    "href": "slides-13-02.html#write-a-function-solution-1",
    "title": "mutating dictionaries (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef sales_tax(dictionary):\n  result = {}\n  for key, value in dictionary.items():\n    result[key] = round(value * 0.056, 2)\n  return result\n\ndef main():\n  groceries = {\"banana\": 2.50, \"milk\": 4.25, \"bread\": 3.68}\n  assert sales_tax(groceries) == {'banana': 0.14, 'milk': 0.24, 'bread': 0.21}\n  print( sales_tax(groceries) )\n\nmain()\n\n{'banana': 0.14, 'milk': 0.24, 'bread': 0.21}"
  },
  {
    "objectID": "slides-13-02.html#removing-key-value-from-a-dictionary",
    "href": "slides-13-02.html#removing-key-value-from-a-dictionary",
    "title": "mutating dictionaries (class slides)",
    "section": "Removing key: value from a dictionary",
    "text": "Removing key: value from a dictionary\nCannot iterate over a dictionary and change its size:\n\ncounts = {\"a\": 10, \"e\": 4, \"i\": 3}\nfor key in counts:\n  counts.pop(key)\n\nRuntimeError: dictionary changed size during iteration"
  },
  {
    "objectID": "slides-13-02.html#removing-key-value-from-a-dictionary-1",
    "href": "slides-13-02.html#removing-key-value-from-a-dictionary-1",
    "title": "mutating dictionaries (class slides)",
    "section": "Removing key: value from a dictionary",
    "text": "Removing key: value from a dictionary\nUse another data structure (like a set) instead\n\ncounts = {\"a\": 10, \"e\": 4, \"i\": 3}\nkeys = set(counts)\nfor k in keys:\n  counts.pop(k)\ncounts\n\n{}"
  },
  {
    "objectID": "slides-13-02.html#write-a-function-2",
    "href": "slides-13-02.html#write-a-function-2",
    "title": "mutating dictionaries (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is remove_records\nIt takes a dictionary as argument, with string keys\nIt mutates and returns the dictionary argument removing keys that start and end with the same character\n\n\nstudents = {\"Anna\": \"A\", \"Peter\": \"B\", \"Bob\": \"D\", \"Cedric\": \"A\"}\nremove_records(students)\nassert students == {\"Peter\": \"B\"}"
  },
  {
    "objectID": "slides-13-02.html#write-a-function-solution-2",
    "href": "slides-13-02.html#write-a-function-solution-2",
    "title": "mutating dictionaries (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef remove_records(dictionary):\n  for k in set(dictionary):\n    if len(k) &gt; 0 and k[0].lower() == k[-1].lower():\n      dictionary.pop(k)\n  return dictionary\n      \ndef main():\n  students = {\"Anna\": \"A\", \"Peter\": \"B\", \"Bob\": \"D\", \"Cedric\": \"A\"}\n  remove_records(students)\n  assert students == {\"Peter\": \"B\"}\n  print(students)\n  \nmain()\n\n{'Peter': 'B'}"
  },
  {
    "objectID": "slides-13-02.html#write-a-function-3",
    "href": "slides-13-02.html#write-a-function-3",
    "title": "mutating dictionaries (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is repetition\nIt takes a dictionary as argument, with strings as keys and integers as values (you can assume the values are never negative)\nIt mutates and returns the dictionary, replacing each value with a list of the key repeated by the value\n\n\ntest_dictionary = {\"a\": 5, \"b\": 2, \"c\": 3}\nrepetition(test_dictionary)\nassert test_dictionary == {\"a\": [\"a\", \"a\", \"a\", \"a\", \"a\"], \n                           \"b\": [\"b\", \"b\"], \"c\": [\"c\", \"c\", \"c\"] }"
  },
  {
    "objectID": "slides-13-02.html#write-a-function-solution-3",
    "href": "slides-13-02.html#write-a-function-solution-3",
    "title": "mutating dictionaries (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef repetition(dictionary):\n  for key, value in dictionary.items():\n    dictionary[key] = [key] * value\n  return dictionary\n\ndef main():\n  test_dictionary = {\"a\": 5, \"b\": 2, \"c\": 3}\n  repetition(test_dictionary)\n  assert test_dictionary == {\"a\": [\"a\", \"a\", \"a\", \"a\", \"a\"], \n                           \"b\": [\"b\", \"b\"], \"c\": [\"c\", \"c\", \"c\"] }\n  print(test_dictionary) # {\"a\": [\"a\", \"a\", \"a\", \"a\", \"a\"], \n                         #  \"b\": [\"b\", \"b\"], \"c\": [\"c\", \"c\", \"c\"] }\nmain()\n\n{'a': ['a', 'a', 'a', 'a', 'a'], 'b': ['b', 'b'], 'c': ['c', 'c', 'c']}"
  },
  {
    "objectID": "slides-13-02.html#write-a-function-4",
    "href": "slides-13-02.html#write-a-function-4",
    "title": "mutating dictionaries (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is get_names\nIt has two parameters: a dictionary that maps one_letter strings to lists of strings, and a string\nIt returns a list with strings (names) from the lists in the dictionary that include the second parameter (string) as a substring (this search is not case sensitive)\n\nTest case:\n\nnames = {\"R\": [\"Randy\", \"Roger\"], \"S\": [\"Steve\", \"Sally\"], \"T\": [\"Tanner\"]}\nassert get_names(names, \"er\") == [\"Roger\", \"Tanner\"]"
  },
  {
    "objectID": "slides-13-02.html#write-a-function-solution-4",
    "href": "slides-13-02.html#write-a-function-solution-4",
    "title": "mutating dictionaries (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef get_names(dictionary, string):\n  new_list = []\n  for name_list in dictionary.values():\n    for name in name_list:\n      if string.lower() in name.lower():\n        new_list.append(name)\n  return new_list\n\ndef main():\n  names = { \"R\": [\"Randy\", \"Roger\"], \n            \"S\": [\"Steve\", \"Sally\"], \n            \"T\": [\"Tanner\"] }\n  print( get_names(names, \"er\") ) # [\"Roger\", \"Tanner\"]\n  \nmain()\n\n['Roger', 'Tanner']"
  },
  {
    "objectID": "slides-13-02.html#quiz-06",
    "href": "slides-13-02.html#quiz-06",
    "title": "mutating dictionaries (class slides)",
    "section": "Quiz 06",
    "text": "Quiz 06\n\n\ncurrent time\n\n\n\n\n\n\nYou have 15 minutes to complete. There are 2 problems.\n\nNo need for comments and a main.py\nJust write your function\nDO NOT USE NESTED CONDITIONALS\n\nBuilt-in functions you can use: round(), input(), float(), str(), int(), len(), range(), set(), list() — you don’t have to use all of these"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSc 110 Computer Programming I",
    "section": "",
    "text": "Welcome to CSc 110!\nThis is an introduction to programming with an emphasis on solving problems drawn from a variety of domains. Topics include basic control and data structures, problem solving strategies, and software development tools and techniques. Specifically, the Python programming language will be taught.\n\nD2L: d2l\nGradescope: Gradescope\nPiazza: Piazza (Access code: wildcats)\n\nWhere to start:\n\nSyllabus\nSchedule\n\n\n\nInstructor Information\n\nXinchen Yu\n\nOffice: Gould-Simpson 829\nEmail: xinchenyu@arizona.edu\nInstructor Website: xinchenyu.github.io\nOffice hours (open door, drop in, my office GS 829):\n\nWednesday 10:00am to 12:00pm"
  },
  {
    "objectID": "slides-13-03.html#combining-lists",
    "href": "slides-13-03.html#combining-lists",
    "title": "more on lists (class slides)",
    "section": "Combining lists",
    "text": "Combining lists\nWhat will happen? Run this code on your computer and on Python Tutor\n\nvegetables = [\"kale\", \"carrot\", \"peas\", \"celery\"]\nfruits = [\"banana\", \"tomato\", \"pear\"]\nvegetables + fruits\n\nWhat will happen below? Will vegetables be mutated?\n\ndef combine_lists(list_1, list_2):\n  list_1 = list_1 + list_2\n  return list_1\n  \nif __name__ == \"__main__\":\n  vegetables = [\"kale\", \"carrot\", \"peas\", \"celery\"]\n  fruits = [\"banana\", \"tomato\", \"pear\"]\n  combine_lists(vegetables, fruits)\n  print(vegetables)"
  },
  {
    "objectID": "slides-13-03.html#combining-lists-1",
    "href": "slides-13-03.html#combining-lists-1",
    "title": "more on lists (class slides)",
    "section": "Combining lists",
    "text": "Combining lists\nWhat will happen? Run this code on your computer and on Python Tutor the difference between the two chunks of code (the one above and the one below)?\n\ndef combine_lists(list_1, list_2):\n  for item in list_2:\n    list_1.append(item)\n  return list_1\n  \nif __name__ == \"__main__\":\n  vegetables = [\"kale\", \"carrot\", \"peas\", \"celery\"]\n  fruits = [\"banana\", \"tomato\", \"pear\"]\n  combine_lists(vegetables, fruits)\n  print(vegetables)\n\n['kale', 'carrot', 'peas', 'celery', 'banana', 'tomato', 'pear']"
  },
  {
    "objectID": "slides-13-03.html#combining-lists-2",
    "href": "slides-13-03.html#combining-lists-2",
    "title": "more on lists (class slides)",
    "section": "Combining lists",
    "text": "Combining lists\nWhat will happen? Run this code on your computer and on Python Tutor the difference between the two chunks of code (the one above and the one below)?\n\ndef combine_lists(list_1, list_2):\n  list_1.extend(list_2)\n  return list_1\n  \nif __name__ == \"__main__\":\n  vegetables = [\"kale\", \"carrot\", \"peas\", \"celery\"]\n  fruits = [\"banana\", \"tomato\", \"pear\"]\n  combine_lists(vegetables, fruits)\n  print(vegetables)\n\n['kale', 'carrot', 'peas', 'celery', 'banana', 'tomato', 'pear']"
  },
  {
    "objectID": "slides-13-03.html#list-methods",
    "href": "slides-13-03.html#list-methods",
    "title": "more on lists (class slides)",
    "section": "list methods",
    "text": "list methods\n\n.append(value)\n.insert(index, value)\n.pop(index)\n.remove(value)\n.extend(list)"
  },
  {
    "objectID": "slides-13-03.html#evaluate-the-code",
    "href": "slides-13-03.html#evaluate-the-code",
    "title": "more on lists (class slides)",
    "section": "Evaluate the code",
    "text": "Evaluate the code\nIndicate when an error occurs.\n\nnumbers = [1, 2, 31, 0, 2]\nnumbers.append(40)\nnumbers # evaluate this at this point\n\nnumbers.insert(3, 10)\nnumbers # evaluate this at this point\n\nnumbers.remove(2)\nnumbers # evaluate this at this point\n\nnumbers.pop(2)\nnumbers # evaluate this at this point\n\nnew_list = [40, 50, 60]\nnumbers.extend(new_list)\nnumbers # evaluate this at this point"
  },
  {
    "objectID": "slides-13-03.html#evaluate-the-code-solution",
    "href": "slides-13-03.html#evaluate-the-code-solution",
    "title": "more on lists (class slides)",
    "section": "Evaluate the code – solution",
    "text": "Evaluate the code – solution\n\nnumbers = [1, 2, 31, 0, 2]\nnumbers.append(40)\nnumbers # evaluate this at this point\n\n[1, 2, 31, 0, 2, 40]\n\n\n\nnumbers.insert(3, 10)\nnumbers # evaluate this at this point\n\n[1, 2, 31, 10, 0, 2, 40]\n\n\n\nnumbers.remove(2)\nnumbers # evaluate this at this point\n\n[1, 31, 10, 0, 2, 40]\n\n\n\nnumbers.pop(2)\nnumbers # evaluate this at this point\n\n[1, 31, 0, 2, 40]\n\n\n\nnew_list = [40, 50, 60]\nnumbers.extend(new_list)\nnumbers # evaluate this at this point\n\n[1, 31, 0, 2, 40, 40, 50, 60]"
  },
  {
    "objectID": "slides-13-03.html#write-a-function",
    "href": "slides-13-03.html#write-a-function",
    "title": "more on lists (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is remove_and_append\nIt has three parameters, all lists: original_list, to_remove_list, to_append_list\nIt mutates the original_list removing values found in to_remove_list and then appending the values in to_append_list\n\nTest case:\n\ntest_list = [1, 2, 3]\nremove_and_append(test_list, [2, 3, 4], [10, 11])\nassert test_list == [1, 10, 11]"
  },
  {
    "objectID": "slides-13-03.html#write-a-function-solution",
    "href": "slides-13-03.html#write-a-function-solution",
    "title": "more on lists (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef remove_and_append(original_list, to_remove_list, to_append_list):\n  for item in to_remove_list:\n    if item in original_list:\n      original_list.remove(item)\n  original_list.extend(to_append_list)\n  return original_list\n\nif __name__ == \"__main__\":\n  test_list = [1, 2, 3]\n  remove_and_append(test_list, [2, 3, 4], [10, 11])\n  assert test_list == [1, 10, 11]\n  print(test_list) # [1, 10, 11]\n\n[1, 10, 11]"
  },
  {
    "objectID": "slides-13-03.html#write-python-code",
    "href": "slides-13-03.html#write-python-code",
    "title": "more on lists (class slides)",
    "section": "Write python code",
    "text": "Write python code\nWrite python code that determines if a number is prime or not."
  },
  {
    "objectID": "slides-13-03.html#write-python-code-1",
    "href": "slides-13-03.html#write-python-code-1",
    "title": "more on lists (class slides)",
    "section": "Write python code",
    "text": "Write python code\nA number n is NOT prime if it is divisible by any number between 2 and n / 2.\nThe integer 1 is not a prime number.\nYour code should have different functions to deal with lists of numbers in different ways (see test cases on next slide)"
  },
  {
    "objectID": "slides-13-03.html#determining-prime-number---solution",
    "href": "slides-13-03.html#determining-prime-number---solution",
    "title": "more on lists (class slides)",
    "section": "Determining prime number - solution",
    "text": "Determining prime number - solution\n\ndef is_prime(n):\n    if n == 1:\n         return False\n    # If num is divisible by any number between\n    # 2 and n / 2, it is not prime\n    for denominator in range(2, int(n/2 + 1)):\n          if n % denominator == 0:\n               return False\n    return True"
  },
  {
    "objectID": "slides-13-03.html#write-python-code-2",
    "href": "slides-13-03.html#write-python-code-2",
    "title": "more on lists (class slides)",
    "section": "Write python code",
    "text": "Write python code\nTest cases:\n\nif __name__ == \"__main__\":\n    original_list = [1, 2, 453, 3, 32, 5, 7]\n    result = create_dictionary(original_list)\n    assert result == {1: False, 2: True, 453: False, 3: True, 32: False, 5: True, 7: True}\n\n    original_list = [102, 250, 509, 345, 2, 4, 547, 563]\n    result = create_dictionary(original_list)\n    assert result == {102: False, 250: False, 509: True, 345: False, 2: True,\n                      4: False, 547: True, 563: True}\n\n    original_list = [102, 250, 509, 345, 2, 4, 547, 563]\n    mutate_list(original_list)\n    assert original_list == [False, False, True, False, True, False, True, True]\n\n    original_list = [102, 250, 509, 345, 2, 4, 547, 563]\n    remove_primes(original_list)\n    assert original_list == [102, 250, 345, 4]"
  },
  {
    "objectID": "slides-13-03.html#write-a-function-solution-1",
    "href": "slides-13-03.html#write-a-function-solution-1",
    "title": "more on lists (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef create_dictionary(numbers):\n    result = {}\n    for n in numbers:\n        result[n] = is_prime(n)\n    return result\n\ndef mutate_list(numbers):\n    for i in range(len(numbers)):\n        numbers[i] = is_prime(numbers[i])\n    return numbers\n          \ndef remove_primes(numbers):\n    for i in range(len(numbers)-1, -1, -1):\n        if is_prime(numbers[i]):\n            numbers.pop(i)\n    return numbers"
  },
  {
    "objectID": "slides-08-02.html#announcements",
    "href": "slides-08-02.html#announcements",
    "title": "for loops – iterating over items (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nWe will add one more quiz. The quiz 04 will be on Mar 13 (list and dictionary).\nMidterm 2 will be on Mar 27."
  },
  {
    "objectID": "slides-08-02.html#review-of-for-in-range",
    "href": "slides-08-02.html#review-of-for-in-range",
    "title": "for loops – iterating over items (class slides)",
    "section": "Review of for in range():",
    "text": "Review of for in range():\n\nfor n in range(5):\n  print(n)\n\n0\n1\n2\n3\n4\n\n\n\nnumbers = [2, 1, 4, 6, 23, 2]\nfor i in range(len(numbers)):\n  print(numbers[i])\n\n2\n1\n4\n6\n23\n2"
  },
  {
    "objectID": "slides-08-02.html#introducing-for-x-in-string",
    "href": "slides-08-02.html#introducing-for-x-in-string",
    "title": "for loops – iterating over items (class slides)",
    "section": "Introducing for x in string:",
    "text": "Introducing for x in string:\n\nstring = \"hello\"\nfor n in string:\n  print(n)\n\nh\ne\nl\nl\no"
  },
  {
    "objectID": "slides-08-02.html#introducing-for-x-in-list",
    "href": "slides-08-02.html#introducing-for-x-in-list",
    "title": "for loops – iterating over items (class slides)",
    "section": "Introducing for x in list:",
    "text": "Introducing for x in list:\n\nnumbers = [2, 1, 4, 6, 23, 2]\nfor n in numbers:\n  print(n)\n\n2\n1\n4\n6\n23\n2"
  },
  {
    "objectID": "slides-08-02.html#write-a-function",
    "href": "slides-08-02.html#write-a-function",
    "title": "for loops – iterating over items (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is count_vowels\nIt takes a string argument\nIt creates a dictionary\nIt returns the dictionary with the count of every lowercase vowel in string\n\n\nassert count_vowels(\"\") == {\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0}\nassert count_vowels(\"banana\") == {\"a\": 3, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0}"
  },
  {
    "objectID": "slides-08-02.html#write-a-function-solution",
    "href": "slides-08-02.html#write-a-function-solution",
    "title": "for loops – iterating over items (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef count_vowels(string):\n  counts = {\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0}\n  for char in string:\n    if char in counts:\n      counts[char] += 1\n  return counts\n\ndef main():\n  assert count_vowels(\"\") == {\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0}\n  assert count_vowels(\"banana\") == {\"a\": 3, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0}\n  print(\"Passed all tests.\")\n  \nmain()\n\nPassed all tests."
  },
  {
    "objectID": "slides-08-02.html#write-a-function-1",
    "href": "slides-08-02.html#write-a-function-1",
    "title": "for loops – iterating over items (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is count_chars\nIt takes a string argument\nIt creates a dictionary\nIt returns the dictionary with the count of every characters in string\n\n\nassert count_chars(\"\") == {}\nassert count_chars(\"banana\") == {\"b\": 1, \"a\": 3, \"n\": 2}"
  },
  {
    "objectID": "slides-08-02.html#write-a-function-solution-1",
    "href": "slides-08-02.html#write-a-function-solution-1",
    "title": "for loops – iterating over items (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef count_chars(string):\n  counts = {}\n  for char in string:\n    if char in counts:\n      counts[char] += 1\n    else:\n      counts[char] = 1\n      \n  return counts\n\ndef main():\n  assert count_chars(\"\") == {}\n  assert count_chars(\"banana\") == {\"b\": 1, \"a\": 3, \"n\": 2}\n  print(\"Passed all tests.\")\n\nmain()\n\nPassed all tests."
  },
  {
    "objectID": "slides-08-02.html#write-a-function-2",
    "href": "slides-08-02.html#write-a-function-2",
    "title": "for loops – iterating over items (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is tally_negatives\nIt takes a list of numbers as argument\nIt returns a dictionary that maps each negative value in numbers to its frequency in numbers\n\nTest cases:\n\nassert  tally_negatives([1, -2, 0, -4, -2]) == {-2: 2, -4: 1}\nassert tally_negatives([]) == {}"
  },
  {
    "objectID": "slides-08-02.html#write-a-function-solution-2",
    "href": "slides-08-02.html#write-a-function-solution-2",
    "title": "for loops – iterating over items (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef tally_negatives(numbers):\n  tally = {}\n  for n in numbers:\n    if n &lt; 0:\n      if n not in tally:\n        tally[n] = 0\n      tally[n] += 1\n  return tally\n\ndef main():\n  assert  tally_negatives([1, -2, 0, -4, -2]) == {-2: 2, -4: 1}\n  assert tally_negatives([]) == {}\n  print(\"Passed all tests.\")\n  \nmain()\n\nPassed all tests."
  },
  {
    "objectID": "slides-08-02.html#attendance",
    "href": "slides-08-02.html#attendance",
    "title": "for loops – iterating over items (class slides)",
    "section": "Attendance",
    "text": "Attendance\nSubmit your tally_negatives function to Gradescope for attendance.\nName your file tally_negatives.py"
  },
  {
    "objectID": "slides-08-02.html#what-happens-when-we-do-for-k-in-dictionary",
    "href": "slides-08-02.html#what-happens-when-we-do-for-k-in-dictionary",
    "title": "for loops – iterating over items (class slides)",
    "section": "What happens when we do for k in dictionary:",
    "text": "What happens when we do for k in dictionary:\n\nscores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}\nfor key in scores:\n  print(key)\n\nA\nB\nC\nD\nE"
  },
  {
    "objectID": "slides-08-02.html#methods-for-dictionaries",
    "href": "slides-08-02.html#methods-for-dictionaries",
    "title": "for loops – iterating over items (class slides)",
    "section": "Methods for dictionaries",
    "text": "Methods for dictionaries\nWe can use .values() to get only the values in a dictionary:\n\nscores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}\nscores.values()\n\ndict_values([10, 25, 27, 10, 5])\n\n\nWe can use .keys() to get only the keys in a dictionary:\n\nscores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}\nscores.keys()\n\ndict_keys(['A', 'B', 'C', 'D', 'E'])\n\n\nWe can use .items() to get tuples for keys and values:\n\nscores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}\nscores.items()\n\ndict_items([('A', 10), ('B', 25), ('C', 27), ('D', 10), ('E', 5)])"
  },
  {
    "objectID": "slides-08-02.html#for-x-in-list",
    "href": "slides-08-02.html#for-x-in-list",
    "title": "for loops – iterating over items (class slides)",
    "section": "for x in list",
    "text": "for x in list\n\nscores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}\nfor value in scores.values():\n  print(value)\n\n10\n25\n27\n10\n5\n\n\n\nscores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}\nfor key in scores.keys():\n  print(key)\n\nA\nB\nC\nD\nE"
  },
  {
    "objectID": "slides-08-02.html#for-key-value-in-dictionary.items",
    "href": "slides-08-02.html#for-key-value-in-dictionary.items",
    "title": "for loops – iterating over items (class slides)",
    "section": "for key, value in dictionary.items()",
    "text": "for key, value in dictionary.items()\n\nscores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}\nfor key, value in scores.items():\n  print(key, value)\n\nA 10\nB 25\nC 27\nD 10\nE 5"
  },
  {
    "objectID": "slides-08-02.html#write-a-function-3",
    "href": "slides-08-02.html#write-a-function-3",
    "title": "for loops – iterating over items (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is keys_and_values\nIt takes a dictionary as argument\nIt returns a list with all the keys and values in the dictionary\n\nTest cases:\n\nassert keys_and_values({'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}) == \\\n    ['A', 10, 'B', 25, 'C', 27, 'D', 10, 'E', 5]"
  },
  {
    "objectID": "slides-08-02.html#write-a-function-solution-3",
    "href": "slides-08-02.html#write-a-function-solution-3",
    "title": "for loops – iterating over items (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef keys_and_values(dictionary):\n  new_list = []\n  for key, value in dictionary.items():\n    new_list.append(key)\n    new_list.append(value)\n  return new_list\n\ndef main():\n  assert keys_and_values({'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}) == ['A', 10, 'B', 25, 'C', 27, 'D', 10, 'E', 5]\n  \nmain()"
  },
  {
    "objectID": "slides-08-02.html#write-a-function-4",
    "href": "slides-08-02.html#write-a-function-4",
    "title": "for loops – iterating over items (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is merge_dictionaries\nIt takes two arguments: dict_1 and dict_2\nIt mutates dict_1, by adding to it all key-values pairs in dict_2\nIf a key is in both dictionaries, the values are added\nDon’t use .update()\n\nTest cases:\n\ndict_1 = {\"a\": 20, \"e\": 5}\ndict_2 = {\"e\": 10, \"i\": 2}\nassert merge_dictionaries(dict_1, dict_2) == {\"a\": 20, \"e\": 15, \"i\": 2}"
  },
  {
    "objectID": "slides-08-02.html#write-a-function-solution-4",
    "href": "slides-08-02.html#write-a-function-solution-4",
    "title": "for loops – iterating over items (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef merge_dictionaries(dict_1, dict_2):\n  for key, value in dict_2.items():\n    if key in dict_1:\n      dict_1[key] += value\n    else:\n      dict_1[key] = value\n  return dict_1\n      \ndef main():\n  dict_1 = {\"a\": 20, \"e\": 5}\n  dict_2 = {\"e\": 10, \"i\": 2}\n  assert merge_dictionaries(dict_1, dict_2) == {\"a\": 20, \"e\": 15, \"i\": 2}\n  \nmain()"
  },
  {
    "objectID": "control_flow_for.html",
    "href": "control_flow_for.html",
    "title": "Control Flow (for)",
    "section": "",
    "text": "The for..in statement is another looping statement which iterates over a sequence of objects i.e. go through each item in a sequence (like a list or a string).\nExample:\nfor i in range(1, 5):\n    print(i)\nelse:\n    print('The for loop is over')\nOutput:\n\n1\n2\n3\n4\nThe for loop is over\n\nHow It Works\nIn this program, we are printing a sequence of numbers. We generate this sequence of numbers using the built-in range function.\nWhat we do here is supply it two numbers and range returns a sequence of numbers starting from the first number and up to the second number. For example, range(1,5) gives the sequence [1, 2, 3, 4]. By default, range takes a step count of 1. If we supply a third number to range, then that becomes the step count. For example, range(1,5,2) gives [1,3]. Remember that the range extends up to the second number i.e. it does not include the second number.\nNote that range() generates only one number at a time, if you want the full list of numbers, call list() on the range(), for example, list(range(5)) will result in [0, 1, 2, 3, 4]. Lists are explained in the data structures chapter.\nThe for loop then iterates over this range - for i in range(1,5) is equivalent to for i in [1, 2, 3, 4] which is like assigning each number (or object) in the sequence to i, one at a time, and then executing the block of statements for each value of i. In this case, we just print the value in the block of statements.\nRemember that the else part is optional. When included, it is always executed once after the for loop is over unless a break statement is encountered.\nRemember that the for..in loop works for any sequence. Here, we have a list of numbers generated by the built-in range function, but in general we can use any kind of sequence of any kind of objects! We will explore this idea in detail in later chapters.\n\nNote for C/C++/Java/C# Programmers\nThe Python for loop is radically different from the C/C++ for loop. C# programmers will note that the for loop in Python is similar to the foreach loop in C#. Java programmers will note that the same is similar to for (int i : IntArray) in Java 1.5.\nIn C/C++, if you want to write for (int i = 0; i &lt; 5; i++), then in Python you write just for i in range(0,5). As you can see, the for loop is simpler, more expressive and less error prone in Python.\n\n\n\n\nWe have seen how to use the three control flow statements - if, while and for statements. These are some of the most commonly used parts of Python and hence, becoming comfortable with them is essential."
  },
  {
    "objectID": "control_flow_for.html#the-for-loop",
    "href": "control_flow_for.html#the-for-loop",
    "title": "Control Flow (for)",
    "section": "",
    "text": "The for..in statement is another looping statement which iterates over a sequence of objects i.e. go through each item in a sequence (like a list or a string).\nExample:\nfor i in range(1, 5):\n    print(i)\nelse:\n    print('The for loop is over')\nOutput:\n\n1\n2\n3\n4\nThe for loop is over\n\nHow It Works\nIn this program, we are printing a sequence of numbers. We generate this sequence of numbers using the built-in range function.\nWhat we do here is supply it two numbers and range returns a sequence of numbers starting from the first number and up to the second number. For example, range(1,5) gives the sequence [1, 2, 3, 4]. By default, range takes a step count of 1. If we supply a third number to range, then that becomes the step count. For example, range(1,5,2) gives [1,3]. Remember that the range extends up to the second number i.e. it does not include the second number.\nNote that range() generates only one number at a time, if you want the full list of numbers, call list() on the range(), for example, list(range(5)) will result in [0, 1, 2, 3, 4]. Lists are explained in the data structures chapter.\nThe for loop then iterates over this range - for i in range(1,5) is equivalent to for i in [1, 2, 3, 4] which is like assigning each number (or object) in the sequence to i, one at a time, and then executing the block of statements for each value of i. In this case, we just print the value in the block of statements.\nRemember that the else part is optional. When included, it is always executed once after the for loop is over unless a break statement is encountered.\nRemember that the for..in loop works for any sequence. Here, we have a list of numbers generated by the built-in range function, but in general we can use any kind of sequence of any kind of objects! We will explore this idea in detail in later chapters.\n\nNote for C/C++/Java/C# Programmers\nThe Python for loop is radically different from the C/C++ for loop. C# programmers will note that the for loop in Python is similar to the foreach loop in C#. Java programmers will note that the same is similar to for (int i : IntArray) in Java 1.5.\nIn C/C++, if you want to write for (int i = 0; i &lt; 5; i++), then in Python you write just for i in range(0,5). As you can see, the for loop is simpler, more expressive and less error prone in Python."
  },
  {
    "objectID": "control_flow_for.html#summary",
    "href": "control_flow_for.html#summary",
    "title": "Control Flow (for)",
    "section": "",
    "text": "We have seen how to use the three control flow statements - if, while and for statements. These are some of the most commonly used parts of Python and hence, becoming comfortable with them is essential."
  },
  {
    "objectID": "structures-review.html",
    "href": "structures-review.html",
    "title": "Review of Data Structures",
    "section": "",
    "text": "Here are the four data structures that we’ve worked with in Python:"
  },
  {
    "objectID": "structures-review.html#list-methods",
    "href": "structures-review.html#list-methods",
    "title": "Review of Data Structures",
    "section": "List methods",
    "text": "List methods\n\n.append(value)\n.insert(index, value)\n.pop(index)\n.remove(value)"
  },
  {
    "objectID": "structures-review.html#dictionary-methods",
    "href": "structures-review.html#dictionary-methods",
    "title": "Review of Data Structures",
    "section": "Dictionary methods",
    "text": "Dictionary methods\n\n.values()\n.items()\n.pop()"
  },
  {
    "objectID": "structures-review.html#set-methods",
    "href": "structures-review.html#set-methods",
    "title": "Review of Data Structures",
    "section": "Set methods",
    "text": "Set methods\n\n.add(value) adds an element to the set\n.discard(value) discards the specified value\n\nYou can also use the operator in and the function len() with sets\nUse the function set() to convert a list to a set, and list() to convert a set into a list"
  },
  {
    "objectID": "structures-review.html#iterating-over-dictionaries",
    "href": "structures-review.html#iterating-over-dictionaries",
    "title": "Review of Data Structures",
    "section": "Iterating over dictionaries",
    "text": "Iterating over dictionaries\n\nmy_dictionary = {3: \"a\", 5: \"b\"}\nfor key in my_dictionary:\n  print(key)\n\n3\n5\n\n\nYou can change values in a dictionary with for key in dictionary\n\nmy_dictionary = {\"a\": 2, \"b\": 3}\nfor key in my_dictionary:\n  my_dictionary[key] += 1\nmy_dictionary\n\n{'a': 3, 'b': 4}\n\n\nUse for x in data_structure.method() for dictionaries\n\nmy_dictionary = {3: \"a\", 5: \"b\"}\nfor value in my_dictionary.values():\n  print(value)\n\na\nb\n\n\n\nmy_dictionary = {3: \"a\", 5: \"b\"}\nfor key, value in my_dictionary.items():\n  print(value)\n  print(key)\n\na\n3\nb\n5"
  },
  {
    "objectID": "structures-review.html#cannot-change-size-of-data-structure",
    "href": "structures-review.html#cannot-change-size-of-data-structure",
    "title": "Review of Data Structures",
    "section": "Cannot change size of data structure",
    "text": "Cannot change size of data structure\nIt is not possible to remove or add items to a list, a dictionary, or a set inside a for x in data_structure loop. This is what happens when you try to do so:\nWeird behavior:\n\nmy_list = [2, 3, 1, 2]\nfor value in my_list:\n  my_list.remove(value)\nmy_list\n\n[3, 2]\n\n\nInfinite loop:\n\nmy_list = [2, 3, 1, 2]\nfor value in my_list:\n  my_list.append(value + 1) # this causes an infinite loop\n\nError:\n\nmy_dict = {2: 0, 3: 1, 1: 0}\nfor key in my_dict:\n  my_dict.pop(key) # this causes an error\n\nError:\n\nmy_set = {2, 1, 4, 5, 7, 10, 23, 44}\nfor value in my_set:\n  my_set.discard(value) # this causes an error"
  },
  {
    "objectID": "slides-08-01.html#announcements",
    "href": "slides-08-01.html#announcements",
    "title": "intro to dictionaries (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nLast lab for short project 06 is Today – no lab for the rest of the week, we re-start lab sessions Monday March 11"
  },
  {
    "objectID": "slides-08-01.html#data-structure",
    "href": "slides-08-01.html#data-structure",
    "title": "intro to dictionaries (class slides)",
    "section": "Data Structure",
    "text": "Data Structure\n\nA data-structure is a way of arranging and organizing data in a computer program\nPython has several useful data-structures built into the language\n\nOne is a list (already covered)\nAnother, dictionary"
  },
  {
    "objectID": "slides-08-01.html#mapping",
    "href": "slides-08-01.html#mapping",
    "title": "intro to dictionaries (class slides)",
    "section": "Mapping",
    "text": "Mapping\n\nMany data structures allow data to be stored and retrieved using a concept called mapping\nMapping is the process of associating one value with another (a key with a value)\n\nSometimes also referred to as Hashing or Associativity"
  },
  {
    "objectID": "slides-08-01.html#mapping-1",
    "href": "slides-08-01.html#mapping-1",
    "title": "intro to dictionaries (class slides)",
    "section": "Mapping",
    "text": "Mapping\n\nLists map keys to values too!\n\nIndices of the list are the keys\nElements in the list are the values\n\nKeys (indices) are used to acess or modify the elements in the list"
  },
  {
    "objectID": "slides-08-01.html#mapping-and-lists",
    "href": "slides-08-01.html#mapping-and-lists",
    "title": "intro to dictionaries (class slides)",
    "section": "Mapping and Lists",
    "text": "Mapping and Lists\n\nnumbers = [12, 49, -2, 26, 5, 17, -6]\n\n\nWhat are the keys?\nWhat are the values?\nWhich keys map to which values?"
  },
  {
    "objectID": "slides-08-01.html#mapping-and-lists-1",
    "href": "slides-08-01.html#mapping-and-lists-1",
    "title": "intro to dictionaries (class slides)",
    "section": "Mapping and Lists",
    "text": "Mapping and Lists\n\nnumbers = [12, 49, -2, 26, 5, 17, -6]\n\n# Using the key 3 to lookup the associated value of 26\n# and then save the value into variable\nnew = numbers[3]\n\n# Modifying the list so that the key 5 now maps to 77\n# instead of 17\nnumbers[5] = 77"
  },
  {
    "objectID": "slides-08-01.html#dictionary",
    "href": "slides-08-01.html#dictionary",
    "title": "intro to dictionaries (class slides)",
    "section": "Dictionary",
    "text": "Dictionary\n\nLike lists:\n\nAssociates a set of keys to their corresponding values\nEach key has exactly 1 associated value\n\nUnlike lists:\n\nThe keys can be types other than ints: strings"
  },
  {
    "objectID": "slides-08-01.html#dictionary-1",
    "href": "slides-08-01.html#dictionary-1",
    "title": "intro to dictionaries (class slides)",
    "section": "Dictionary",
    "text": "Dictionary\nExample (mapping strings to integers)\n\nplayers = { \"Lebron James\": 38,\n            \"Steph Curry\":  35,\n            \"Devin Booker\":  12 }\n            \n# Using the key \"Lebron James\" \n# to lookup the number 38\nplayers[\"Lebron James\"]\n\n# Modifying the number associated with \n# \"Devin Booker\" from 12 to 26\nplayers[\"Devin Booker\"] = 26"
  },
  {
    "objectID": "slides-08-01.html#evaluate-the-expressions",
    "href": "slides-08-01.html#evaluate-the-expressions",
    "title": "intro to dictionaries (class slides)",
    "section": "Evaluate the expressions",
    "text": "Evaluate the expressions\n\nword_count = {\"and\": 324, \"why\": 134, \"cannot\": 76, \"sanded\": 13}\nword_count[\"cannot\"] = 90\nword_count[\"and\"] = 110\nword_count[\"foot\"] = \"feet\"\nword_count[\"and\"] += 10\n\n# what will these evaluate to?\nword_count[\"and\"] \nword_count[\"cannot\"]\nword_count[\"foot\"]"
  },
  {
    "objectID": "slides-08-01.html#evaluate-the-expressions-1",
    "href": "slides-08-01.html#evaluate-the-expressions-1",
    "title": "intro to dictionaries (class slides)",
    "section": "Evaluate the expressions",
    "text": "Evaluate the expressions\n\nword_count = {\"and\": 324, \"why\": 134, \"cannot\": 76, \"sanded\": 13}\nword_count[\"cannot\"] = 90\nword_count[\"and\"] = 110\nword_count[\"foot\"] = \"feet\"\nword_count[\"and\"] += 10\n\n# what will these evaluate to?\nword_count[\"and\"]\n\n120\n\n\n\nword_count[\"cannot\"]\n\n90\n\n\n\nword_count[\"foot\"]\n\n'feet'"
  },
  {
    "objectID": "slides-08-01.html#evaluate-the-expressions-2",
    "href": "slides-08-01.html#evaluate-the-expressions-2",
    "title": "intro to dictionaries (class slides)",
    "section": "Evaluate the expressions",
    "text": "Evaluate the expressions\n\nnum_to_player = {}   # A valid, but empty dictionary\nnum_to_player[13] = \"Paul George\"\nnum_to_player[3]  = \"Chris Paul\"\nnum_to_player[23] = \"Lebron James\"\nnum_to_player[13] = \"James Harden\"\n\n# what will these evaluate to?\nnum_to_player[23] \nnum_to_player[3]\nnum_to_player[13]\nnum_to_player"
  },
  {
    "objectID": "slides-08-01.html#evaluate-the-expressions-3",
    "href": "slides-08-01.html#evaluate-the-expressions-3",
    "title": "intro to dictionaries (class slides)",
    "section": "Evaluate the expressions",
    "text": "Evaluate the expressions\n\nnum_to_player = {}   # A valid, but empty dictionary\nnum_to_player[13] = \"Paul George\"\nnum_to_player[3]  = \"Chris Paul\"\nnum_to_player[23] = \"Lebron James\"\nnum_to_player[13] = \"James Harden\"\n\n# what will these evaluate to?\nnum_to_player[23]\n\n'Lebron James'\n\n\n\nnum_to_player[3]\n\n'Chris Paul'\n\n\n\nnum_to_player[13]\n\n'James Harden'\n\n\n\nnum_to_player\n\n{13: 'James Harden', 3: 'Chris Paul', 23: 'Lebron James'}"
  },
  {
    "objectID": "slides-08-01.html#attendance",
    "href": "slides-08-01.html#attendance",
    "title": "intro to dictionaries (class slides)",
    "section": "Attendance",
    "text": "Attendance\nAttendance Evaluate the expression on Gradescope."
  },
  {
    "objectID": "slides-08-01.html#review-list-methods",
    "href": "slides-08-01.html#review-list-methods",
    "title": "intro to dictionaries (class slides)",
    "section": "Review: list methods",
    "text": "Review: list methods\n\n.append(value)\n.remove(value)\n.pop(index)"
  },
  {
    "objectID": "slides-08-01.html#dictionary-operations",
    "href": "slides-08-01.html#dictionary-operations",
    "title": "intro to dictionaries (class slides)",
    "section": "Dictionary operations",
    "text": "Dictionary operations\n\nscores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}\n \nscores['A+'] = 7     # Adds a key/value pair\n\nscores['B'] = 20     # Changes value associated with a key\n\nscores['C']    # Retrieves a value, given a key\n\nscores.pop('E')      # Removes a key/value pair"
  },
  {
    "objectID": "slides-08-01.html#the-in-operator",
    "href": "slides-08-01.html#the-in-operator",
    "title": "intro to dictionaries (class slides)",
    "section": "The in operator",
    "text": "The in operator\nWith strings:\n\n\"a\" in \"aeiou\"\n\nTrue\n\n\nWith lists:\n\n1 in [1, 2, 3, 4, 5]\n\nTrue\n\n\nAnd dictionary keys:\n\nword_count = {\"and\": 324, \"why\": 134, \"cannot\": 76, \"Sanded\": 13}\n\"why\" in word_count\n\nTrue"
  },
  {
    "objectID": "slides-08-01.html#write-a-function",
    "href": "slides-08-01.html#write-a-function",
    "title": "intro to dictionaries (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is count_vowels\nIt takes a string argument\nIt creates a dictionary\nIt returns the dictionary with the count of every lowercase vowel in string (iterate over the string with a for loop)\n\n\nprint( count_vowels(\"\") ) # {\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0}\nprint( count_vowels(\"pineapple\") ) # {\"a\": 1, \"e\": 2, \"i\": 1, \"o\": 0, \"u\": 0}"
  },
  {
    "objectID": "slides-08-01.html#write-a-function-solution",
    "href": "slides-08-01.html#write-a-function-solution",
    "title": "intro to dictionaries (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef count_vowels(string):\n  counts = {\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0}\n  for i in range(len(string)):\n    char = string[i]\n    if char in counts:\n      counts[char] += 1\n  return counts\n\ndef main():\n  print( count_vowels(\"\") ) # {\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0}\n  print( count_vowels(\"pineapple\") ) # {\"a\": 1, \"e\": 2, \"i\": 1, \"o\": 0, \"u\": 0}\n  \nmain()\n\n{'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n{'a': 1, 'e': 2, 'i': 1, 'o': 0, 'u': 0}"
  },
  {
    "objectID": "slides-08-01.html#write-a-function-1",
    "href": "slides-08-01.html#write-a-function-1",
    "title": "intro to dictionaries (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is count_chars\nIt takes a string argument\nIt creates a dictionary\nIt returns the dictionary with the count of every characters in string\n\n\nprint( count_chars(\"\") ) # {}\nprint( count_chars(\"banana\") ) # {\"b\": 1, \"a\": 3, \"n\": 2}"
  },
  {
    "objectID": "slides-08-01.html#write-a-function-solution-1",
    "href": "slides-08-01.html#write-a-function-solution-1",
    "title": "intro to dictionaries (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef count_chars(string):\n  counts = {}\n  for i in range(len(string)):\n    char = string[i]\n    if char in counts:\n      counts[char] += 1\n    else:\n      counts[char] = 1\n      \n  return counts\n\ndef main():\n  print( count_chars(\"\") ) # {}\n  print( count_chars(\"banana\") ) # {\"b\": 1, \"a\": 3, \"n\": 2}\n\nmain()\n\n{}\n{'b': 1, 'a': 3, 'n': 2}"
  },
  {
    "objectID": "slides-14-01.html#announcements",
    "href": "slides-14-01.html#announcements",
    "title": "combining data structures (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nFill out SCS at scsonline.ucatt.arizona.edu\nIf 80% of students complete the survey, I’ll replace one of your lowest quizzes grade with full points (5/5 pts)\nQuiz 07 this Wednesday (combining data structures)\nMidterm 3 on April 24, Final exam on May 3"
  },
  {
    "objectID": "slides-14-01.html#tuples-as-dictionary-keys",
    "href": "slides-14-01.html#tuples-as-dictionary-keys",
    "title": "combining data structures (class slides)",
    "section": "Tuples as dictionary keys",
    "text": "Tuples as dictionary keys\n\nWe can only use immutable types as dictionary keys (strings, integers, and tuples)\nValues in a dictionary can be of any type"
  },
  {
    "objectID": "slides-14-01.html#tuples-as-dictionary-keys-1",
    "href": "slides-14-01.html#tuples-as-dictionary-keys-1",
    "title": "combining data structures (class slides)",
    "section": "Tuples as dictionary keys",
    "text": "Tuples as dictionary keys\nTuples are useful as keys since keys need to be unique (no repeated key is allowed)\n\ncourse_schedule = { (\"CSC 110\", \"section 1\") : (\"Gittings\", \"129b\"),\n                    (\"CSC 110\", \"section 2\") : (\"Gittings\", \"129b\"),\n                    (\"CSC 110\", \"section 3\") : (\"Gittings\", \"129b\"),\n                    (\"CSC 120\", \"section 1\") : (\"Gittings\", \"129b\"),\n                    (\"CSC 144\", \"section 1\") : (\"Social Sciences\", \"100\"),\n                    (\"CSC 120\", \"section 2\") : (\"Gittings\", \"129b\")}\n\n\nHow would you retrieve the room where CSC 144, section 1 takes place?\nHow would you retrieve all rooms for CSC 120?"
  },
  {
    "objectID": "slides-14-01.html#write-a-function",
    "href": "slides-14-01.html#write-a-function",
    "title": "combining data structures (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is retrieve_room\nIt takes three arguments: a dictionary with course information, a string for course code and number (e.g., \"CSC 110\") and a string for section (e.g., \"section 3\")\nIt returns a string with the building and room numbers (concatenated)\n\n\ncourse = \"CSC 110\"\nsection = \"section 3\"\nprint( retrieve_room(course_schedule, course, section) ) \n# \"Gittings 129b\""
  },
  {
    "objectID": "slides-14-01.html#write-a-function-solution",
    "href": "slides-14-01.html#write-a-function-solution",
    "title": "combining data structures (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef retrieve_room(course_dict, course, section):\n  c, s =  course_dict[(course, section)]\n  return c + \" \" + s\n\ndef main():\n  course_schedule = { (\"CSC 110\", \"section 1\") : (\"Gittings\", \"129b\"),\n                      (\"CSC 110\", \"section 2\") : (\"Gittings\", \"129b\"),\n                      (\"CSC 110\", \"section 3\") : (\"Gittings\", \"129b\"),\n                      (\"CSC 120\", \"section 1\") : (\"Gittings\", \"129b\"),\n                      (\"CSC 144\", \"section 1\") : (\"Social Sciences\", \"100\"),\n                      (\"CSC 120\", \"section 2\") : (\"Gittings\", \"129b\")}\n  print( retrieve_room(course_schedule, \n                       \"CSC 110\", \"section 3\")) # \"Gittings 129b\"\n  \nmain()\n\nGittings 129b"
  },
  {
    "objectID": "slides-14-01.html#dictionaries-as-values",
    "href": "slides-14-01.html#dictionaries-as-values",
    "title": "combining data structures (class slides)",
    "section": "Dictionaries as values",
    "text": "Dictionaries as values\n\ncourse_schedule = { \"CSC 110\": \n                      {1: {\"building\": \"Gittings\", \"room\": \"129b\"},\n                       2: {\"building\": \"Gittings\", \"room\": \"129b\"},\n                       3: {\"building\": \"Gittings\", \"room\": \"129b\"} },\n                    \"CSC 120\":\n                       {1: {\"building\": \"Gittings\", \"room\": \"129b\"},\n                        2: {\"building\": \"Gittings\", \"room\": \"129b\"} },\n                    \"CSC 144\":\n                       {1: {\"building\": \"Social Sciences\", \"room\": \"100\"}}}\n                       \ncourse_schedule[\"CSC 110\"][3][\"building\"]\n\n'Gittings'\n\n\n\nHow would you retrieve the room for the section 3 of CSC 110?"
  },
  {
    "objectID": "slides-06-01.html#sequences",
    "href": "slides-06-01.html#sequences",
    "title": "lists (class slides)",
    "section": "Sequences",
    "text": "Sequences\nWe’ve worked with strings, which are sequences in Python. Sequences can be indexed with [ ]:\n\nword = \"uncopyrightable\"\nword[0] # returns first character in string\n\n'u'\n\n\n\nword[1] # returns second character in string\n\n'n'\n\n\nWe also have lists in Python, which are also sequences and can indexed with [ ]:\n\nnumbers = [4, 2, 5, 7]\nnumbers[0] # returns first item in list\n\n4"
  },
  {
    "objectID": "slides-06-01.html#data-structures",
    "href": "slides-06-01.html#data-structures",
    "title": "lists (class slides)",
    "section": "Data Structures",
    "text": "Data Structures\n\nData structures is a way to organize data when coding\nData structures allow for easy access and modification of values\nYou can see data structures as a collection of data values\nIn Python lists are a data structure that is:\n\nmutable (you can change the values in it)\nunordered – you can have repeated elements in a list"
  },
  {
    "objectID": "slides-06-01.html#creating-lists",
    "href": "slides-06-01.html#creating-lists",
    "title": "lists (class slides)",
    "section": "Creating lists",
    "text": "Creating lists\n\n# empty list\nno_numbers = []\n\n# list of integers\nnumbers = [1, 5, 2, 10, 7]\n\n# list of strings\nnames = ['ron', 'joe', 'kyle']\n\n# mixed types list\nvalues = [1, 1.15, 7, 1.75, 'those']"
  },
  {
    "objectID": "slides-06-01.html#evaluate-the-expressions",
    "href": "slides-06-01.html#evaluate-the-expressions",
    "title": "lists (class slides)",
    "section": "Evaluate the expressions",
    "text": "Evaluate the expressions\n\nnumbers = [2, 3, 2, 4, 5]\nnumbers[1] + numbers[4]\n\nnumbers = [2.0, 3, 1.3, 4]\nnumbers[0] * numbers[2]\n\nwords = ['the', 'bear', 'in', 'the', 'tree']\nwords[3] + words[4] + words[1]\n\nfloats = [1.2, 3.4, 0.3, 1.0, 3.2]\nlen(floats)"
  },
  {
    "objectID": "slides-06-01.html#evaluate-the-expressions-1",
    "href": "slides-06-01.html#evaluate-the-expressions-1",
    "title": "lists (class slides)",
    "section": "Evaluate the expressions",
    "text": "Evaluate the expressions\n\nnumbers = [2, 3, 2, 4, 5]\nnumbers[1] + numbers[4]\n\n8\n\n\n\nnumbers = [2.0, 3, 1.3, 4]\nnumbers[0] * numbers[2]\n\n2.6\n\n\n\nwords = ['the', 'bear', 'in', 'the', 'tree']\nwords[3] + words[4] + words[1]\n\n'thetreebear'\n\n\n\nfloats = [1.2, 3.4, 0.3, 1.0, 3.2]\nlen(floats)\n\n5"
  },
  {
    "objectID": "slides-06-01.html#write-a-function",
    "href": "slides-06-01.html#write-a-function",
    "title": "lists (class slides)",
    "section": "Write a function",
    "text": "Write a function\nIts name is sum_all that takes a list of values as an argument. It runs a loop that iterates through the number in values summing all numbers. It returns the sum of all numbers in values. HINT: a) create a variable that accumulate the sum and b) use while.\nName your file sum_list.py and submit to Gradescope.\n\nassert sum_all([2, 2, 2]) == 6\nassert sum_all([1, 2, 1, 1]) == 5\nassert sum_all([]) == 0"
  },
  {
    "objectID": "slides-06-01.html#write-a-function-solution",
    "href": "slides-06-01.html#write-a-function-solution",
    "title": "lists (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\nAdd test cases to the solution below:\n\ndef sum_all(values):\n  total = 0\n  index = 0\n  while index &lt; len(values):\n    total += values[index]\n    index += 1\n  return total\n\ndef main():\n  assert sum_all([2, 2, 2]) == 6\n  assert sum_all([1, 2, 1, 1]) == 5\n  assert sum_all([]) == 0\n    \nmain()"
  },
  {
    "objectID": "slides-06-01.html#loop-table",
    "href": "slides-06-01.html#loop-table",
    "title": "lists (class slides)",
    "section": "Loop Table",
    "text": "Loop Table\nWe start with index = 0 and total = 0:\n\nsum_all([2, 1, 5, 2, 3])\n\n\n\n\n\n\nindex\nindex &lt; len(values)\nvalues[index]\ntotal\n\n\n\n\n0\nTrue\n2\n0 + 2 = 2\n\n\n1\nTrue\n1\n2 + 1 = 3\n\n\n2\nTrue\n5\n3 + 5 = 8\n\n\n3\nTrue\n2\n8 + 2 = 10\n\n\n4\nTrue\n3\n10 + 3 = 13\n\n\n5\nFalse\n-\n13"
  },
  {
    "objectID": "slides-06-01.html#loop-table-1",
    "href": "slides-06-01.html#loop-table-1",
    "title": "lists (class slides)",
    "section": "Loop Table",
    "text": "Loop Table\nStart with index = 0 and total = 0:\n\nsum_all([2, 1, 3, 4])\n\n\n\n\n\n\nindex\nindex &lt; len(values)\nvalues[index]\ntotal\n\n\n\n\n|\n\n\n\n\n\n|\n\n\n\n\n\n|\n\n\n\n\n\n|\n\n\n\n\n\n|\n\n\n\n\n\n|"
  },
  {
    "objectID": "slides-06-01.html#loop-table-solution",
    "href": "slides-06-01.html#loop-table-solution",
    "title": "lists (class slides)",
    "section": "Loop Table – solution",
    "text": "Loop Table – solution\n\nsum_all([2, 1, 3, 4])\n\n\n\n\n\n\nindex\nindex &lt; len(numbers)\nnumbers[index]\ntotal\n\n\n\n\n0\nTrue\n2\n2\n\n\n1\nTrue\n1\n3\n\n\n2\nTrue\n3\n6\n\n\n3\nTrue\n4\n10\n\n\n4\nFalse\n-\n10"
  },
  {
    "objectID": "slides-06-01.html#using-a-control-variable",
    "href": "slides-06-01.html#using-a-control-variable",
    "title": "lists (class slides)",
    "section": "Using a control variable",
    "text": "Using a control variable\nRemember how to get the max of three numbers?\n\ndef max3(x, y, z):\n  max = x # assume max is first number\n  if y &gt; max:\n    max = y # assumption is incorrect, assume y is max\n  if z &gt; max:\n    max = z # assumption is incorrect, z is max\n  return max\n\ndef main():\n  print( max3(1, 2, 2) ) # 2\n  \nmain()\n\n2\n\n\nAdapt this function (max_list) to take a list of numbers (for example [1, 2, 2, 1, 3, 1, 1]) instead of three numbers (use while)."
  },
  {
    "objectID": "slides-06-01.html#max-of-list-solution",
    "href": "slides-06-01.html#max-of-list-solution",
    "title": "lists (class slides)",
    "section": "Max of list – solution",
    "text": "Max of list – solution\n\ndef max_list(numbers):\n  '''\n  Given a list of number, this function returns the highest number.\n  Args:\n    List of numeric values\n  Returns:\n    Max (float or integer, whatever value type is the highest)\n  '''\n  max = numbers[0]\n  index = 1\n  while index &lt; len(numbers):\n    if numbers[index] &gt; max:\n      max = numbers[index]\n    index += 1\n  return max\n\ndef main():\n  print( max_list([1, 2, 2, 1, 3, 1, 1]) ) # 3\n  print( max_list([3, 2, 2, 1, 0, 1, 1]) ) # 3\n  \nmain()\n\n3\n3"
  },
  {
    "objectID": "slides-06-01.html#loop-table-2",
    "href": "slides-06-01.html#loop-table-2",
    "title": "lists (class slides)",
    "section": "Loop table",
    "text": "Loop table\nWe start with index = 1 and max = 2:\n\nmax_list([2, 1, 3, 1])\n\n\n\n\n\n\nindex\nindex &lt; len(numbers)\nnumbers[index]\nmax\n\n\n\n\n|\n\n\n\n\n\n|\n\n\n\n\n\n|\n\n\n\n\n\n|\n\n\n\n\n\n|\n\n\n\n\n\n|"
  },
  {
    "objectID": "slides-06-01.html#loop-table-solution-1",
    "href": "slides-06-01.html#loop-table-solution-1",
    "title": "lists (class slides)",
    "section": "Loop table – solution",
    "text": "Loop table – solution\nWe start with index = 1 and max = 2:\n\nmax_list([2, 1, 3, 1])\n\n\n\n\n\n\nindex\nindex &lt; len(numbers)\nnumbers[index]\nmax\n\n\n\n\n1\nTrue\n1\n2\n\n\n2\nTrue\n3\n3\n\n\n3\nTrue\n1\n3\n\n\n4\nFalse\n-\n3"
  },
  {
    "objectID": "slides-06-01.html#max-solution",
    "href": "slides-06-01.html#max-solution",
    "title": "lists (class slides)",
    "section": "Max solution",
    "text": "Max solution\n\nWhat about empty lists?\nHow to get the min instead?"
  },
  {
    "objectID": "slides-06-01.html#max-solution---empty-lists",
    "href": "slides-06-01.html#max-solution---empty-lists",
    "title": "lists (class slides)",
    "section": "Max solution - empty lists",
    "text": "Max solution - empty lists\n\ndef max_list(numbers):\n  max = None\n  index = 0\n  while index &lt; len(numbers):\n    if max == None or numbers[index] &gt; max:\n      max = numbers[index]\n    index += 1\n  return max\n\ndef main():\n  print( max_list([2, 1, 3, 1]) ) # 3\n  print( max_list([]) ) # None\n\nmain()\n\n3\nNone"
  },
  {
    "objectID": "slides-06-01.html#write-a-function-1",
    "href": "slides-06-01.html#write-a-function-1",
    "title": "lists (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is double\nIt takes a list of numeric variables as argument\nIt iterates over the list (use while) doubling (multiplying by two) each value in the list\nIt returns the modified list\n\n\nassert double([0, 1, 2, 3]) == [0, 2, 4, 6]"
  },
  {
    "objectID": "slides-06-01.html#write-a-function-solution-1",
    "href": "slides-06-01.html#write-a-function-solution-1",
    "title": "lists (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef double(numbers):\n  index = 0\n  while index &lt; len(numbers):\n    numbers[index] *= 2\n    index += 1\n  return numbers\n\ndef main():\n  original_list = [0, 1, 2, 3]\n  new_list = double(original_list)\n  assert original_list == new_list\n  assert original_list == [0, 2, 4, 6]\n  \n  print(\"Passed all tests\")\n  \nmain()"
  },
  {
    "objectID": "slides-06-01.html#submit-attendance",
    "href": "slides-06-01.html#submit-attendance",
    "title": "lists (class slides)",
    "section": "Submit attendance",
    "text": "Submit attendance\nName your file double.py and submit it to gradescope."
  },
  {
    "objectID": "slides-06-01.html#slicing-lists",
    "href": "slides-06-01.html#slicing-lists",
    "title": "lists (class slides)",
    "section": "Slicing lists",
    "text": "Slicing lists\n\nRange – list[2:4]\nWhole list – list[:]\nEverything but last character – list[:-1]\n\nThe same slicing can be done with strings"
  },
  {
    "objectID": "slides-14-02.html#sorting",
    "href": "slides-14-02.html#sorting",
    "title": "sorting (class slides)",
    "section": "Sorting",
    "text": "Sorting\n\nA number of reasons to want sorted data\n\nFor doing binary search!\nFinding a median value\nFinding the min and max\nOthers?"
  },
  {
    "objectID": "slides-14-02.html#sorting-1",
    "href": "slides-14-02.html#sorting-1",
    "title": "sorting (class slides)",
    "section": "Sorting",
    "text": "Sorting\n\nlists have built-in functionality to rearrange the elements to be in sorted order\n\nlist_var.sort()\nsorted(list_var)\n\nBut, someone at some point had to come up with an algorithm for this!\nHow does sorting work, behind the scenes?"
  },
  {
    "objectID": "slides-14-02.html#what-is-a-sorted-list",
    "href": "slides-14-02.html#what-is-a-sorted-list",
    "title": "sorting (class slides)",
    "section": "What is a sorted list?",
    "text": "What is a sorted list?\n\nA sorting algorithm is an algorithm that puts elements of a list in a certain order\nHowever, there are different types of “ordering”\n\nAscending numeric order (numbers)\nDescending numeric order (numbers)\nLexicographic (strings)\nOthers…\n\nWe will mostly stick with Ascending numeric for the examples in this lecture"
  },
  {
    "objectID": "slides-14-02.html#what-is-a-sorted-list-1",
    "href": "slides-14-02.html#what-is-a-sorted-list-1",
    "title": "sorting (class slides)",
    "section": "What is a sorted list?",
    "text": "What is a sorted list?\n\nitems = [5, 10, 20, 6, 7, 9, 43, 10, 12]\n\nNot sorted\n\n\n[5, 10, 20, 6, 7, 9, 43, 10, 12]\n\n\nSorted\n\n\n[5, 6, 7, 9, 10, 10, 12, 20, 43]"
  },
  {
    "objectID": "slides-14-02.html#discuss",
    "href": "slides-14-02.html#discuss",
    "title": "sorting (class slides)",
    "section": "Discuss",
    "text": "Discuss\nCome up with a sorting algorithm\n\nDiscuss ideas for how to sort numbers\nDepict your algorithm with drawings/diagrams or with pseudocode\nCan’t use the .sort() method"
  },
  {
    "objectID": "slides-14-02.html#in-place-and-out-of-place",
    "href": "slides-14-02.html#in-place-and-out-of-place",
    "title": "sorting (class slides)",
    "section": "In-place and out-of-place",
    "text": "In-place and out-of-place\n\nIn-place sorting: does not require a secondary data structure\nOut-of-place sorting: may require a secondary data structure"
  },
  {
    "objectID": "slides-14-02.html#selection-sort",
    "href": "slides-14-02.html#selection-sort",
    "title": "sorting (class slides)",
    "section": "Selection sort",
    "text": "Selection sort\nSelection sort is a very simple sorting algorithm\n\nScan the list and find the smallest element\nSwap this element with the beginning element\nContinue these steps for the remaining list, not including the element just swapped\nRepeat"
  },
  {
    "objectID": "slides-14-02.html#selection-sort-1",
    "href": "slides-14-02.html#selection-sort-1",
    "title": "sorting (class slides)",
    "section": "Selection sort",
    "text": "Selection sort\n\nVisualizing sorting algorithms with graphics can give one a better understanding\nhttps://visualgo.net/en/sorting"
  },
  {
    "objectID": "slides-14-02.html#write-selection-sort---step-1",
    "href": "slides-14-02.html#write-selection-sort---step-1",
    "title": "sorting (class slides)",
    "section": "Write selection sort - step 1",
    "text": "Write selection sort - step 1\n\nFunction name is find_min_index\nIt takes a list of numbers as argument\nIt iterates over the list, scanning the list to find the smallest number\nReturn the index of the smallest number\n\n\nassert find_min_index([]) == None\nassert find_min_index([5, 10, 1, 20, 7, 3, 9]) == 2"
  },
  {
    "objectID": "slides-14-02.html#write-selection-sort-step-1-solution",
    "href": "slides-14-02.html#write-selection-sort-step-1-solution",
    "title": "sorting (class slides)",
    "section": "Write selection sort – step 1 solution",
    "text": "Write selection sort – step 1 solution\n\ndef find_min_index(items):\n  min_index = None\n  for i in range(len(items)):\n    if min_index == None or items[min_index] &gt; items[i]:\n      min_index = i\n  return min_index\n    \ndef main():\n  test_list = [5, 10, 20, 1, 7, 9, 43, 10, 12]\n  print(find_min_index(test_list)) # 3\n  \nmain()\n\n3"
  },
  {
    "objectID": "slides-14-02.html#write-selection-sort---step-1-continue",
    "href": "slides-14-02.html#write-selection-sort---step-1-continue",
    "title": "sorting (class slides)",
    "section": "Write selection sort - step 1 continue",
    "text": "Write selection sort - step 1 continue\n\nCall your find_min_index function\nFind the smallest number starting from a specified index\nReturn the index of that smallest number\n\n\nbegin_index = 3\nitems = [5, 10, 1, 20, 7, 3, 9]\n\nprint(items[begin_index:]) # [20, 7, 3, 9]\n\nprint(find_min_index(items[begin_index:])) # 2\nprint(find_min_index(items[begin_index:]) + begin_index) # 5"
  },
  {
    "objectID": "slides-14-02.html#write-selection-sort---step-2",
    "href": "slides-14-02.html#write-selection-sort---step-2",
    "title": "sorting (class slides)",
    "section": "Write selection sort - step 2",
    "text": "Write selection sort - step 2\n\nFunction name is selection_sort\nIt takes a list as argument\nIt mutates the list argument, sorting it\nIt iterates over the list, call find_min_index to find the index of smallest element\nIt swaps the smallest element found in each iteration with the beginning element"
  },
  {
    "objectID": "slides-14-02.html#write-selection-sort-solution",
    "href": "slides-14-02.html#write-selection-sort-solution",
    "title": "sorting (class slides)",
    "section": "Write selection sort – solution",
    "text": "Write selection sort – solution\n\ndef find_min_index(items):\n  min_index = None\n  for i in range(len(items)):\n    if min_index == None or items[min_index] &gt; items[i]:\n      min_index = i\n  return min_index\n\ndef selection_sort(items):\n  begin_index = 0\n  while begin_index &lt; len(items)-1:\n    # get min of sublist, add begin_index to shift it\n    min_index = find_min_index(items[begin_index:]) + begin_index\n    items[begin_index], items[min_index] = items[min_index], items[begin_index]\n    begin_index += 1\n    \ndef main():\n  test_list = [5, 10, 20, 6, 7, 9, 43, 10, 12]\n  selection_sort(test_list)\n  print(test_list)\n  \nmain()\n\n[5, 6, 7, 9, 10, 10, 12, 20, 43]"
  },
  {
    "objectID": "slides-14-02.html#how-many-total-sweeps-and-swaps-to-sort-this-list",
    "href": "slides-14-02.html#how-many-total-sweeps-and-swaps-to-sort-this-list",
    "title": "sorting (class slides)",
    "section": "How many total sweeps and swaps to sort this list?",
    "text": "How many total sweeps and swaps to sort this list?\n\nnumbers = [ 3, 1, 7, 2, 4 ]"
  },
  {
    "objectID": "slides-14-02.html#how-many-total-sweeps-and-swaps-to-sort-this-list-1",
    "href": "slides-14-02.html#how-many-total-sweeps-and-swaps-to-sort-this-list-1",
    "title": "sorting (class slides)",
    "section": "How many total sweeps and swaps to sort this list?",
    "text": "How many total sweeps and swaps to sort this list?\n[3, 1, 7, 2, 4] sweep\n[1, 3, 7, 2, 4] swap and sweep\n[1, 2, 7, 3, 4] swap and sweep\n[1, 2, 3, 7, 4] swap and sweep\n[1, 2, 3, 4, 7] swap\n4 sweeps\n4 swaps (worst case scenario)"
  },
  {
    "objectID": "slides-14-02.html#how-many-total-sweeps-and-swaps-to-sort-this-list-2",
    "href": "slides-14-02.html#how-many-total-sweeps-and-swaps-to-sort-this-list-2",
    "title": "sorting (class slides)",
    "section": "How many total sweeps and swaps to sort this list?",
    "text": "How many total sweeps and swaps to sort this list?\n\nnumbers = [ 3, 0, 7, 2, 4, 8 ]"
  },
  {
    "objectID": "slides-14-02.html#how-many-total-sweeps-and-swaps-to-sort-this-list-3",
    "href": "slides-14-02.html#how-many-total-sweeps-and-swaps-to-sort-this-list-3",
    "title": "sorting (class slides)",
    "section": "How many total sweeps and swaps to sort this list?",
    "text": "How many total sweeps and swaps to sort this list?\n[ 3, 0, 7, 2, 4, 8 ] sweep\n[ 0, 3, 7, 2, 4, 8] swap and sweep\n[ 0, 2, 7, 3, 4, 8 ] swap and sweep\n[ 0, 2, 3, 7, 4, 8 ] swap and sweep\n[ 0, 2, 3, 4, 7, 8 ] swap and sweep\n5 sweeps, 4 swaps"
  },
  {
    "objectID": "slides-14-02.html#bubble-sort",
    "href": "slides-14-02.html#bubble-sort",
    "title": "sorting (class slides)",
    "section": "Bubble sort",
    "text": "Bubble sort\n\nBubble Sort: another sorting algorithm\n\nScan through each element in the list, comparing the current element with the next one\nIf the next one is smaller, swap the elements\nContinue these iterations until the whole list is sorted\n\nThis causes the large elements to “bubble up” to the top"
  },
  {
    "objectID": "slides-14-02.html#write-bubble-sort---step-1",
    "href": "slides-14-02.html#write-bubble-sort---step-1",
    "title": "sorting (class slides)",
    "section": "Write bubble sort - step 1",
    "text": "Write bubble sort - step 1\n\nFunction name is single_sweep_swap\nIt takes a list as argument\nIt mutates the list, sorting it\nIt iterates over the list, comparing each element with the next one, if the next one is smaller, swap elements\nIt sweeps the list only once\n\n\nassert single_sweep_swap([8, 3, 5, 7, 1]) == [3, 5, 7, 1, 8]"
  },
  {
    "objectID": "slides-14-02.html#write-bubble-sort-step-1-solution",
    "href": "slides-14-02.html#write-bubble-sort-step-1-solution",
    "title": "sorting (class slides)",
    "section": "Write bubble sort – step 1 solution",
    "text": "Write bubble sort – step 1 solution\n\ndef single_sweep_swap(numbers):\n    end = len(numbers) - 1\n    for i in range(end):\n        if numbers[i] &gt; numbers[i+1]:\n            numbers[i], numbers[i+1] = numbers[i+1], numbers[i]\n    return numbers\n\ndef main():\n    assert single_sweep_swap([8, 3, 5, 7, 1]) == [3, 5, 7, 1, 8]\n    assert single_sweep_swap([3, 5, 7, 1, 9]) == [3, 5, 1, 7, 9]\n    \nmain()"
  },
  {
    "objectID": "slides-14-02.html#write-bubble-sort---step-2",
    "href": "slides-14-02.html#write-bubble-sort---step-2",
    "title": "sorting (class slides)",
    "section": "Write bubble sort - step 2",
    "text": "Write bubble sort - step 2\n\nFunction name is bubble_sort\nIt sweeps the list, comparing elements\nIf it is sorted, return the list. Otherwise, swap elements\nIt sweeps the list in a iteration. The end starts at len(items)-1\nIn each iteration, subtract 1 from the end index\n\n\nassert bubble_sort([8, 3, 5, 7, 1]) == [1, 3, 5, 7, 8]"
  },
  {
    "objectID": "slides-14-02.html#write-bubble-sort-solution",
    "href": "slides-14-02.html#write-bubble-sort-solution",
    "title": "sorting (class slides)",
    "section": "Write bubble sort – solution",
    "text": "Write bubble sort – solution\n\ndef bubble_sort(items):\n  is_sorted = False\n  end = len(items)-1\n  while not is_sorted:\n    is_sorted = True\n    for i in range(end):\n      if items[i] &gt; items[i+1]:\n        items[i], items[i+1] = items[i+1], items[i]\n        is_sorted = False\n    end -= 1\n      \ndef main():\n  test_list = [5, 10, 20, 6, 7, 9, 43, 10, 12]\n  bubble_sort(test_list)\n  print(test_list)\n  \nmain()\n\n[5, 6, 7, 9, 10, 10, 12, 20, 43]"
  },
  {
    "objectID": "slides-14-02.html#how-many-total-sweeps-and-swaps-to-sort-this-list-4",
    "href": "slides-14-02.html#how-many-total-sweeps-and-swaps-to-sort-this-list-4",
    "title": "sorting (class slides)",
    "section": "How many total sweeps and swaps to sort this list?",
    "text": "How many total sweeps and swaps to sort this list?\n\nnumbers = [ 3, 1, 7, 2, 4 ]"
  },
  {
    "objectID": "slides-14-02.html#how-many-total-sweeps-and-swaps-to-sort-this-list-5",
    "href": "slides-14-02.html#how-many-total-sweeps-and-swaps-to-sort-this-list-5",
    "title": "sorting (class slides)",
    "section": "How many total sweeps and swaps to sort this list?",
    "text": "How many total sweeps and swaps to sort this list?\n\n[ 3, 1, 7, 2, 4 ] first sweep\n\n[ 1, 3, 7, 2, 4 ] swap\n[ 1, 3, 2, 7, 4 ] swap\n[ 1, 3, 2, 4, 7 ] swap\n\n[ 1, 3, 2, 4, 7 ] second sweep\n\n[ 1, 2, 3, 4, 7 ] swap\n\n[ 1, 2, 3, 4, 7 ] third sweep"
  },
  {
    "objectID": "slides-14-02.html#how-many-total-sweeps-and-swaps",
    "href": "slides-14-02.html#how-many-total-sweeps-and-swaps",
    "title": "sorting (class slides)",
    "section": "How many total sweeps and swaps?",
    "text": "How many total sweeps and swaps?\n\nnumbers = [ 3, 1, 7, 2, 4, 8, 5 ]"
  },
  {
    "objectID": "slides-14-02.html#how-many-sweeps-swaps-part-1",
    "href": "slides-14-02.html#how-many-sweeps-swaps-part-1",
    "title": "sorting (class slides)",
    "section": "How many sweeps, swaps? (part 1)",
    "text": "How many sweeps, swaps? (part 1)\n\n[ 3, 1, 7, 2, 4, 8, 5 ] first sweep\n\n[ 1, 3, 7, 2, 4, 8, 5 ] swap\n[ 1, 3, 2, 7, 4, 8, 5 ] swap\n[ 1, 3, 2, 4, 7, 8, 5 ] swap\n[ 1, 3, 2, 4, 7, 5, 8 ] swap"
  },
  {
    "objectID": "slides-14-02.html#how-many-sweeps-swaps-part-2",
    "href": "slides-14-02.html#how-many-sweeps-swaps-part-2",
    "title": "sorting (class slides)",
    "section": "How many sweeps, swaps? (part 2)",
    "text": "How many sweeps, swaps? (part 2)\n\n[ 1, 3, 2, 4, 7, 5, 8 ] second sweep\n\n[ 1, 2, 3, 4, 7, 5, 8 ] swap\n[ 1, 2, 3, 4, 5, 7, 8 ] swap\n\n[ 1, 2, 3, 4, 5, 7, 8 ] third sweep"
  },
  {
    "objectID": "slides-14-02.html#lots-of-algorithms",
    "href": "slides-14-02.html#lots-of-algorithms",
    "title": "sorting (class slides)",
    "section": "Lots of algorithms",
    "text": "Lots of algorithms\n\nThere are many sorting algorithms\n\nBogo sort\nSelection sort\nBubble sort\nInsertion sort\nMerge sort\nQuick sort\n...more..."
  },
  {
    "objectID": "slides-14-02.html#visualization",
    "href": "slides-14-02.html#visualization",
    "title": "sorting (class slides)",
    "section": "Visualization",
    "text": "Visualization\nhttps://www.youtube.com/watch?v=kPRA0W1kECg"
  },
  {
    "objectID": "project-11.html",
    "href": "project-11.html",
    "title": "Programming Project 11",
    "section": "",
    "text": "Programming Projects are to be submitted to gradescope.\nDue date: Wednesday, December 11, 2024 at 9pm\nThis programming project is an adaptation of Ben Dicken’s WordSearch Programming Assignment."
  },
  {
    "objectID": "project-11.html#words-text-file",
    "href": "project-11.html#words-text-file",
    "title": "Programming Project 11",
    "section": "Words text file",
    "text": "Words text file\nYour program should open up and read a text file name which determines which words you are searching for in your puzzle file! You can assume that each line in the input text file is formatted as follows: each line of the file is a word from the “word bank”.\nContents of words.txt:\n\ncomputer\nscience"
  },
  {
    "objectID": "project-11.html#puzzle-text-file",
    "href": "project-11.html#puzzle-text-file",
    "title": "Programming Project 11",
    "section": "Puzzle text file",
    "text": "Puzzle text file\nThis file contains a grid of letters and hidden within those letters are certain words you will need to be searching for. You will use the words in words.txt to figure out what letter combination of words you need to find. This is an example of what this word-grid file would look like:\nW O D I W S M Z H \nN R M E W A N D A \nL Z H I N O K L H \nS R E G N E V A V \nI F R C X H C Q X \nA H T Z B A Y K Q \nA R A M E R I C A\n\nThe puzzle file could have more or less Rows/Columns depending on each test case."
  },
  {
    "objectID": "project-11.html#output",
    "href": "project-11.html#output",
    "title": "Programming Project 11",
    "section": "Output",
    "text": "Output\nThe program should return a dictionary with the starting row / col locations for each word found. Your code should have a function called search that returns this dictionary. The formatting of the return dictionary should be something like:\n\n{\"word1\": [1, 1], \"word2\": [5, 5]}"
  },
  {
    "objectID": "project-11.html#reading-in-input-files",
    "href": "project-11.html#reading-in-input-files",
    "title": "Programming Project 11",
    "section": "(1) Reading in input files",
    "text": "(1) Reading in input files\nCreate a function that will be responsible for opening up the words file and reading in the information. You can pass the file name into this function via arguments / parameters. The function should iterate through the lines and create a dictionary that maps the forwards-spelling to the backwards spelling. After the data is read in, the function should return the dictionary back to main.\nNext, open word input grid file up.\nYour functions for this part should be called text_to_dictionary and load_search_grid."
  },
  {
    "objectID": "project-11.html#word-search",
    "href": "project-11.html#word-search",
    "title": "Programming Project 11",
    "section": "(2) Word search",
    "text": "(2) Word search\nHorizontal search is a bit easier than vertical mode, so I recommend that you work on this first. Create a function for this, and pass it the word dictionary, the grid file, and the mode. Iterate through the lines of the file one-at-a-time. For each line you encounter, you can search for all of the words in the word dictionary to see if you can find it.\nIf you try to do all of this in one function, you will probably end up with 3 or 4 levels of nested loops, which can get rather disorganized. I recommend that you create another function, perhaps called something like search_within_line that handles processing one line of searching. The horizontal function can call this for each line that it encounters.\nThere will be separate test cases for horizontal and for vertical. I recommend that you get the horizontal ones to pass before moving on to vertical.\nIn vertical search, you have to search for the words in the columns of the grid, rather than the rows. This is a bit more complex, but still very do-able. The way you should go about this is create a loop where you iterate through the column indexes. Within this loop, create another loop that goes through every character in that column and creates a list of those characters. Then, you can treat this column as if it is a row."
  },
  {
    "objectID": "slides-06-02.html#random-module",
    "href": "slides-06-02.html#random-module",
    "title": "random (class slides)",
    "section": "random module",
    "text": "random module\nWe need to import the module random\nWhat do the functions .random() and .randint() return?\n\nimport random\n\nn = random.random()\nprint(n)\n\nn = random.randint(0, 9)\nprint(n)\n\n0.49707204107132374\n2"
  },
  {
    "objectID": "slides-06-02.html#write-a-function",
    "href": "slides-06-02.html#write-a-function",
    "title": "random (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nFunction name is pick_winner\nIt takes a list as argument\nIt generates a random index, and returns the item at that position\n\n\nwinner = pick_winner([\"Peter\", \"Joan\", \"Mary\", \"June\"])\nprint(winner)"
  },
  {
    "objectID": "slides-06-02.html#write-a-function-solution",
    "href": "slides-06-02.html#write-a-function-solution",
    "title": "random (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\nimport random\n\ndef pick_winner(names):\n  index = random.randint(0, len(names) - 1)\n  return names[index]\n\nif __name__ == \"__main__\":\n  winner = pick_winner([\"Peter\", \"Joan\", \"Mary\", \"June\"])\n  print(winner)\n\nMary"
  },
  {
    "objectID": "slides-06-02.html#setting-a-seed",
    "href": "slides-06-02.html#setting-a-seed",
    "title": "random (class slides)",
    "section": "Setting a seed",
    "text": "Setting a seed\nWhat happens when you run pick_winner multiple times?\nTo get always the same result (for autograding purposes, for example) we can set a seed.\n\nimport random\n\ndef pick_winner(names):\n  index = random.randint(0, len(names) - 1)\n  return names[index]\n\nif __name__ == \"__main__\":\n  random.seed(123)\n  winner = pick_winner([\"Peter\", \"Joan\", \"Mary\", \"June\"])\n  print(winner)\n\nPeter"
  },
  {
    "objectID": "slides-06-02.html#changing-a-list-with-random-numbers",
    "href": "slides-06-02.html#changing-a-list-with-random-numbers",
    "title": "random (class slides)",
    "section": "Changing a list with random numbers",
    "text": "Changing a list with random numbers\nWrite a function that takes as argument a list of integers. Iterate over each list element (with a while loop), replacing each integer with a random number between zero and the original integer.\nTest case:\n\nnumbers = [3, 2, 1, 3, 5]\nnumbers = random_list(numbers)\nprint(numbers)\n\n[0, 1, 0, 3, 2]"
  },
  {
    "objectID": "slides-14-02-old.html#tuples-as-dictionary-keys",
    "href": "slides-14-02-old.html#tuples-as-dictionary-keys",
    "title": "combining data structures (class slides)",
    "section": "Tuples as dictionary keys",
    "text": "Tuples as dictionary keys\n\nWe can only use immutable types as dictionary keys (strings, integers, and tuples)\nValues in a dictionary can be of any type"
  },
  {
    "objectID": "slides-14-02-old.html#tuples-as-dictionary-keys-1",
    "href": "slides-14-02-old.html#tuples-as-dictionary-keys-1",
    "title": "combining data structures (class slides)",
    "section": "Tuples as dictionary keys",
    "text": "Tuples as dictionary keys\nTuples are useful as keys since keys need to be unique (no repeated key is allowed)\n\ncourse_schedule = { (\"CSC 110\", \"section 1\") : (\"Gittings\", \"129b\"),\n                    (\"CSC 110\", \"section 2\") : (\"Gittings\", \"129b\"),\n                    (\"CSC 120\", \"section 1\") : (\"Gittings\", \"129b\"),\n                    (\"CSC 120\", \"section 2\") : (\"Gittings\", \"129b\"),\n                    (\"CSC 144\", \"section 1\") : (\"Social Sciences\", \"100\"),\n                    (\"CSC 210\", \"section 1\") : (\"Gittings\", \"129b\")}\n\n\nHow would you retrieve the room where CSC 144, section 1 takes place?\nHow would you retrieve all rooms for CSC 120?"
  },
  {
    "objectID": "slides-14-02-old.html#write-a-function",
    "href": "slides-14-02-old.html#write-a-function",
    "title": "combining data structures (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is retrieve_room\nIt takes three arguments: a dictionary with course information, a string for course code and number (e.g., \"CSC 110\") and a string for section (e.g., \"section 1\")\nIt returns a string with the building and room numbers (concatenated)\n\n\nprint( retrieve_room(course_schedule, \"CSC 110\", \"section 1\") ) \n# \"Gittings 129b\""
  },
  {
    "objectID": "slides-14-02-old.html#write-a-function-solution",
    "href": "slides-14-02-old.html#write-a-function-solution",
    "title": "combining data structures (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef retrieve_room(course_dict, course, section):\n  c, s =  course_dict[(course, section)]\n  return c + \" \" + s\n\ndef main():\n  course_schedule = { (\"CSC 110\", \"section 1\") : (\"Gittings\", \"129b\"),\n                    (\"CSC 110\", \"section 2\") : (\"Gittings\", \"129b\"),\n                    (\"CSC 120\", \"section 1\") : (\"Gittings\", \"129b\"),\n                    (\"CSC 120\", \"section 2\") : (\"Gittings\", \"129b\"),\n                    (\"CSC 144\", \"section 1\") : (\"Social Sciences\", \"100\"),\n                    (\"CSC 210\", \"section 1\") : (\"Gittings\", \"129b\")}\n  print( retrieve_room(course_schedule, \n                       \"CSC 110\", \"section 1\")) # \"Gittings 129b\"\n  \nmain()\n\nGittings 129b"
  },
  {
    "objectID": "slides-14-02-old.html#dictionaries-as-values",
    "href": "slides-14-02-old.html#dictionaries-as-values",
    "title": "combining data structures (class slides)",
    "section": "Dictionaries as values",
    "text": "Dictionaries as values\n\ncourse_schedule = { \"CSC 110\": \n                      {1: {\"building\": \"Gittings\", \"room\": \"129b\"},\n                       2: {\"building\": \"Gittings\", \"room\": \"129b\"} },\n                    \"CSC 120\":\n                       {1: {\"building\": \"Gittings\", \"room\": \"129b\"},\n                        2: {\"building\": \"Gittings\", \"room\": \"129b\"} },\n                    \"CSC 144\":\n                       {1: {\"building\": \"Social Sciences\", \"room\": \"100\"}}}\n                       \ncourse_schedule[\"CSC 110\"][1][\"building\"]\n\n'Gittings'\n\n\n\nHow would you retrieve the room for the section 1 of CSC 120?"
  },
  {
    "objectID": "slides-14-02-old.html#how-to-organize-data",
    "href": "slides-14-02-old.html#how-to-organize-data",
    "title": "combining data structures (class slides)",
    "section": "How to organize data?",
    "text": "How to organize data?\nA common programming task is to read data from a file into some data structure in python – how the data structure is structured is very much up to the developer.\nDownload the csv (comma separate value) file with course information and discuss with your table mates: How would you structure these data in Python?"
  },
  {
    "objectID": "project-10.html",
    "href": "project-10.html",
    "title": "Programming Project 10",
    "section": "",
    "text": "Programming Projects are to be submitted to gradescope.\nDue date: Thursday, December 05, 2024 at 9pm\nThis programming project is an adaptation of Ben Dicken’s Minesweeper Programming Assignment.\nYou should name the file minesweeper.py."
  },
  {
    "objectID": "project-10.html#minesweeper-rules",
    "href": "project-10.html#minesweeper-rules",
    "title": "Programming Project 10",
    "section": "Minesweeper Rules",
    "text": "Minesweeper Rules\nFor this assignment, we are going to simplify some of the rules of the original game while still keeping the core of the game intact. Instead of clicking on squares your program will be given coordinates. The primary gameplay loop is going to be generating coordinates to a square on the board upon which the square is revealed. There are two possibilities for what a square can contain.\nIf a “X” is revealed, this is a mine which results in an instant loss.\nOtherwise, an integer is revealed, which is the number of adjacent (including diagonally) mines from the revealed square (including 0, which is handled differently by the original game). All integers around the given coordinates are also revealed (the mines remain hidden).\nFor example, let’s say a player is provided the given board:\n 2[ ][ ][ ]\n 1[ ][ ][ ]\n 0[ ][ ][ ]\n   a  b  c\n\nIf the the coordinates (0, \"a\")are provided, a result may be:\n 2[ ][ ][ ]\n 1[1][ ][ ]\n 0[1][2][ ]\n   a  b  c\n\nThis means that at (0, \"a\") there is not a mine, however there is one nearby. We know there’s no mine in (1, \"a\") because the integer 1 was also revealed. Specifically there is probably a mine in (1, \"b\"), (2, \"b\") or (2, \"a\"). Similarly, there is not a mine at (0, \"b\") because the integer 2. There are two mines in (1, \"b\"), (0, \"c\") or (1, \"c\").\nSuppose the player’s next move is (0, \"c\"), which would produce:\n 2[ ][ ][ ]\n 1[1][ ][ ]\n 0[1][2][2]\n   a  b  c\n\nThe 2 in (0, \"c\") revealed means that there would be 2 mines somewhere among (1, \"b\") and (1, \"c\"). After this let’s say the next move is (1, \"b\").\n 2[ ][ ][ ]\n 1[1][X][ ]\n 0[1][2][2]\n   a  b  c\n\nSince this reveals an X in (1, \"b\"), the game has ended and results in a loss. When revealing an X, the player lost the game and the nearby coordinates would not be revealed. If all non-mine squares were revealed, the player would have won."
  },
  {
    "objectID": "project-10.html#input-file-format",
    "href": "project-10.html#input-file-format",
    "title": "Programming Project 10",
    "section": "Input File Format",
    "text": "Input File Format\nAll files used for testing are going to follow the same formatting. The first line will contain an integer which is the width of the board. Similarly, the second line will contain the height. There will then be N (Height of the board) more lines. Each of these lines will contain X (Width of the board) elements separated by commas. Each element may be either a 1 or 0. Provided below is what an example file would look like:\n\n2\n3\n0, 1\n1, 0\n0, 1"
  },
  {
    "objectID": "project-10.html#functions-to-implement",
    "href": "project-10.html#functions-to-implement",
    "title": "Programming Project 10",
    "section": "Functions to Implement",
    "text": "Functions to Implement\n\nread_file\nFor this file, for example:\n\n5\n5\n1, 0, 0, 0, 0\n1, 0, 0, 0, 0\n0, 1, 0, 0, 0\n0, 0, 0, 0, 1\n1, 0, 0 ,0, 1\n\nYour function should return:\n\n[['X', '0', '0', '0', '0'],\n ['X', '0', '0', '0', '0'],\n ['0', 'X', '0', '0', '0'],\n ['0', '0', '0', '0', 'X'],\n ['X', '0', '0', '0', 'X']]\n\n\n\nmake_empty_grid\nReturn a 2D list that has the same dimensions of a passed in 2D list where every inner element is an empty space. For example, if the passed in the grid is:\n\n[['X', '3', 'X'], ['2', 'X', '2']]\n\nReturn:\n\n[[' ', ' ', ' '], [' ', ' ', ' ']]\n\n\n\nupdate_grid\nTakes in a single 2D list where every value is either “X” or “0” (Note the formatting is going to be the same as the list returned by read_file). The function should then replace all the 0’s with the number of adjacent mines, which is some cases will still be 0. As we are modifying an already existing list nothing is to be returned by the function. For example, if passed in the result of reading fiveByFive.txt\nWhich is:\n\n[['X', '0', '0', '0', '0'], \n ['X', '0', '0', '0', '0'], \n ['0', 'X', '0', '0', '0'], \n ['0', '0', '0', '0', 'X'], \n ['X', '0', '0', '0', 'X']]\n\nThe function should modify it to become:\n\n[['X', '2', '0', '0', '0'], \n ['X', '3', '1', '0', '0'], \n ['2', 'X', '1', '1', '1'], \n ['2', '2', '1', '2', 'X'], \n ['X', '1', '0', '2', 'X']]\n\n\n\ndig\nIt handles the actual making of a move.\nTakes in three parameters:\n\nThe first is a 2D list that follows the formatting of the grid returned from update_grid. This 2D list serves as an answer key of sorts that contains what to reveal to the user. As squares are revealed the values are copied from here to the user’s view.\nThe second parameter is a string which is the coordinate to reveal. Not that this is formatted so that the first character is a letter, which is the x position to reveal. The rest of the string is going to be a number which is the y position to reveal. “a0” For example would reveal the bottom left corner of the grid.\nThe third parameter is a 2D list, which is used to show which squares the player has revealed. Initially, this grid will be formatted as the return value from make_empty_grid, however, as the player reveals more squares those corresponding values from the answer key list are going to be moved into this grid we are going to refer to as the user view.\n\nTo actually make a move requires translating the string into two integers which are the corresponding values to use as indices to get the value at that point on the grid. Then, copy the value from that location (using those new values) on the answer key grid into the same spot of the user view grid.\nThe next step is to check all the squares around the given coordinates, revealing only the integers for those squares, keeping the mines hidden.\n\n\ncount_total_moves\nIt returns the number of spots on the grid that have not been revealed by the player and do not contain a mine.\n\n\nprint_grid\nTakes in a 2D list and prints it out to standard output. For example printing the initial user view (remember the user view is the blank grid made from make_empty_grid) of the grid from tenSquare.txt should output:\n10[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n 9[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n 8[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n 7[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n 6[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n 5[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n 4[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n 3[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n 2[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n 1[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n 0[ ][ ][ ][ ][ ][ ][ ][ ][ ][ ][ ]\n   a  b  c  d  e  f  g  h  i  j  k\n\nTake note of how the number labels are right-aligned. For the letter labels you can assume that the width will be at most 26 (One for each lower case letter) and the height will be 100 or less. You may also assume that every element in the 2D list will be only a single character string.\nNote the print_grid function is only used for printing purpose, so it does not return anything. There are 2 spaces after the last letter on the bottom (in this example the letter k). Call this function in the dig function.\n\n\ndetermine_game_status\nThis function should return a boolean which is True if the game should continue or False if the game is over. False is returned if a mine has been revealed or count is 0 meaning there are no squares without mines that are not revealed."
  },
  {
    "objectID": "project-10.html#full-game-win",
    "href": "project-10.html#full-game-win",
    "title": "Programming Project 10",
    "section": "Full game win",
    "text": "Full game win\n\nif __name__ == '__main__':\n    grid = read_file(\"fiveByFive.txt\")\n    user_view = make_empty_grid(grid)\n    update_grid(grid)\n    moves = [\"b0\", \"c2\", \"e4\", \"c4\", \"e2\", \"a2\", \"d0\"]\n    index = 0\n    while determine_game_status(grid, user_view) and index &lt; len(moves):\n        dig(grid, moves[index], user_view)\n        index += 1\n\nShould print to the standard output the following:\n 4[ ][ ][ ][ ][ ]\n 3[ ][ ][ ][ ][ ]\n 2[ ][ ][ ][ ][ ]\n 1[2][2][1][ ][ ]\n 0[ ][1][0][ ][ ]\n   a  b  c  d  e  \n 4[ ][ ][ ][ ][ ]\n 3[ ][3][1][0][ ]\n 2[ ][ ][1][1][ ]\n 1[2][2][1][2][ ]\n 0[ ][1][0][ ][ ]\n   a  b  c  d  e  \n 4[ ][ ][ ][0][0]\n 3[ ][3][1][0][0]\n 2[ ][ ][1][1][ ]\n 1[2][2][1][2][ ]\n 0[ ][1][0][ ][ ]\n   a  b  c  d  e  \n 4[ ][2][0][0][0]\n 3[ ][3][1][0][0]\n 2[ ][ ][1][1][ ]\n 1[2][2][1][2][ ]\n 0[ ][1][0][ ][ ]\n   a  b  c  d  e  \n 4[ ][2][0][0][0]\n 3[ ][3][1][0][0]\n 2[ ][ ][1][1][1]\n 1[2][2][1][2][ ]\n 0[ ][1][0][ ][ ]\n   a  b  c  d  e  \n 4[ ][2][0][0][0]\n 3[ ][3][1][0][0]\n 2[2][ ][1][1][1]\n 1[2][2][1][2][ ]\n 0[ ][1][0][ ][ ]\n   a  b  c  d  e  \n 4[ ][2][0][0][0]\n 3[ ][3][1][0][0]\n 2[2][ ][1][1][1]\n 1[2][2][1][2][ ]\n 0[ ][1][0][2][ ]\n   a  b  c  d  e"
  },
  {
    "objectID": "project-10.html#full-game-lose",
    "href": "project-10.html#full-game-lose",
    "title": "Programming Project 10",
    "section": "Full game lose",
    "text": "Full game lose\n\nif __name__ == '__main__':\n    grid = read_file(\"fiveByFive.txt\")\n    user_view = make_empty_grid(grid)\n    update_grid(grid)\n    moves = [\"b0\", \"c2\", \"e4\", \"b2\", \"e2\", \"a2\", \"d0\"]\n    index = 0\n    while determine_game_status(grid, user_view) and index &lt; len(moves):\n        dig(grid, moves[index], user_view)\n        index += 1\n\nShould output:\n 4[ ][ ][ ][ ][ ]\n 3[ ][ ][ ][ ][ ]\n 2[ ][ ][ ][ ][ ]\n 1[2][2][1][ ][ ]\n 0[ ][1][0][ ][ ]\n   a  b  c  d  e  \n 4[ ][ ][ ][ ][ ]\n 3[ ][3][1][0][ ]\n 2[ ][ ][1][1][ ]\n 1[2][2][1][2][ ]\n 0[ ][1][0][ ][ ]\n   a  b  c  d  e  \n 4[ ][ ][ ][0][0]\n 3[ ][3][1][0][0]\n 2[ ][ ][1][1][ ]\n 1[2][2][1][2][ ]\n 0[ ][1][0][ ][ ]\n   a  b  c  d  e  \n 4[ ][ ][ ][0][0]\n 3[ ][3][1][0][0]\n 2[ ][X][1][1][ ]\n 1[2][2][1][2][ ]\n 0[ ][1][0][ ][ ]\n   a  b  c  d  e"
  },
  {
    "objectID": "slides-14-03.html#write-functions-side-by-side",
    "href": "slides-14-03.html#write-functions-side-by-side",
    "title": "review (class slides)",
    "section": "Write functions side-by-side",
    "text": "Write functions side-by-side\nWrite a function called remove_first that takes in a list of lists (2D list) and removes the first element of each sublist.\nWrite a function called remove_odds that takes in a list of list (2D list) of numbers and removes all values that are odd."
  },
  {
    "objectID": "slides-14-03.html#solutions",
    "href": "slides-14-03.html#solutions",
    "title": "review (class slides)",
    "section": "Solutions",
    "text": "Solutions\n\ndef remove_first(list_of_lists):\n  for sublist in list_of_lists:\n    if len(sublist) &gt; 0:\n      sublist.pop(0)\n  return list_of_lists\n\ndef remove_odds(list_of_lists):\n  for sublist in list_of_lists:\n    for i in range(len(sublist)-1, -1, -1):\n      if sublist[i] % 2 == 1:\n        sublist.pop(i)\n  return list_of_lists\n\nif __name__ == \"__main__\":\n  original_list = [[\"banana\", \"apple\"], [], [\"pear\"]]\n  remove_first(original_list)\n  assert original_list == [[\"apple\"], [], []]\n  \n  numbers = [[1, 1, 1], [0, 0], []]\n  remove_odds(numbers)\n  assert numbers == [[], [0, 0], []]"
  },
  {
    "objectID": "slides-14-03.html#write-functions-side-by-side-1",
    "href": "slides-14-03.html#write-functions-side-by-side-1",
    "title": "review (class slides)",
    "section": "Write functions side-by-side",
    "text": "Write functions side-by-side\nWrite a function called censor_consonants that takes as argument a string and returns the string with the consonants replaced with \"*\".\nWrite a function called replace_consonants that takes as argument a list of characters (strings of length one) and replaces the consonants with a \"*\"."
  },
  {
    "objectID": "slides-14-03.html#solutions-1",
    "href": "slides-14-03.html#solutions-1",
    "title": "review (class slides)",
    "section": "Solutions",
    "text": "Solutions\n\ndef censor_consonants(string):\n  new_string = \"\"\n  for char in string:\n    if char not in \"aeiou\":\n      new_string += \"*\"\n    else:\n      new_string += char\n  return new_string\n\ndef replace_consonants(strings):\n  for i in range(len(strings)):\n    if strings[i] not in \"aeiou\":\n      strings[i] = \"*\"\n  return strings\n\nif __name__ == \"__main__\":\n  assert censor_consonants(\"abcd\") == \"a***\"\n  \n  letters = [\"a\", \"b\", \"c\", \"d\"]\n  replace_consonants(letters)\n  assert letters == [\"a\", \"*\", \"*\", \"*\"]"
  },
  {
    "objectID": "data_structures_sets.html",
    "href": "data_structures_sets.html",
    "title": "Sets (Data Structures)",
    "section": "",
    "text": "Sets are unordered collections of simple objects. These are used when the existence of an object in a collection is more important than the order or how many times it occurs.\nUsing sets, you can test for membership, whether it is a subset of another set, find the intersection between two sets, and so on.\n&gt;&gt;&gt; bri = set(['brazil', 'russia', 'india'])\n&gt;&gt;&gt; 'india' in bri\nTrue\n&gt;&gt;&gt; 'usa' in bri\nFalse\n&gt;&gt;&gt; bric = bri.copy()\n&gt;&gt;&gt; bric.add('china')\n&gt;&gt;&gt; bric.issuperset(bri)\nTrue\n&gt;&gt;&gt; bri.remove('russia')\n&gt;&gt;&gt; bri & bric # OR bri.intersection(bric)\n{'brazil', 'india'}\nHow It Works\nIf you remember basic set theory mathematics from school, then this example is fairly self-explanatory. But if not, you can google “set theory” and “Venn diagram” to better understand our use of sets in Python.\n\n\nWhen you create an object and assign it to a variable, the variable only refers to the object and does not represent the object itself! That is, the variable name points to that part of your computer’s memory where the object is stored. This is called binding the name to the object.\nGenerally, you don’t need to be worried about this, but there is a subtle effect due to references which you need to be aware of:\nExample (save as ds_reference.py):\nExample:\nprint('Simple Assignment')\nshoplist = ['apple', 'mango', 'carrot', 'banana']\n# mylist is just another name pointing to the same object!\nmylist = shoplist\n\n# I purchased the first item, so I remove it from the list\ndel shoplist[0]\n\nprint('shoplist is', shoplist)\nprint('mylist is', mylist)\n# Notice that both shoplist and mylist both print\n# the same list without the 'apple' confirming that\n# they point to the same object\n\nprint('Copy by making a full slice')\n# Make a copy by doing a full slice\nmylist = shoplist[:]\n# Remove first item\ndel mylist[0]\n\nprint('shoplist is', shoplist)\nprint('mylist is', mylist)\n# Notice that now the two lists are different\nOutput:\n\nSimple Assignment\nshoplist is ['mango', 'carrot', 'banana']\nmylist is ['mango', 'carrot', 'banana']\nCopy by making a full slice\nshoplist is ['mango', 'carrot', 'banana']\nmylist is ['carrot', 'banana']\n\nHow It Works\nMost of the explanation is available in the comments.\nRemember that if you want to make a copy of a list or such kinds of sequences or complex objects (not simple objects such as integers), then you have to use the slicing operation to make a copy. If you just assign the variable name to another name, both of them will ‘’refer’’ to the same object and this could be trouble if you are not careful.\n\nNote for Perl programmers\nRemember that an assignment statement for lists does not create a copy. You have to use slicing operation to make a copy of the sequence."
  },
  {
    "objectID": "data_structures_sets.html#references",
    "href": "data_structures_sets.html#references",
    "title": "Sets (Data Structures)",
    "section": "",
    "text": "When you create an object and assign it to a variable, the variable only refers to the object and does not represent the object itself! That is, the variable name points to that part of your computer’s memory where the object is stored. This is called binding the name to the object.\nGenerally, you don’t need to be worried about this, but there is a subtle effect due to references which you need to be aware of:\nExample (save as ds_reference.py):\nExample:\nprint('Simple Assignment')\nshoplist = ['apple', 'mango', 'carrot', 'banana']\n# mylist is just another name pointing to the same object!\nmylist = shoplist\n\n# I purchased the first item, so I remove it from the list\ndel shoplist[0]\n\nprint('shoplist is', shoplist)\nprint('mylist is', mylist)\n# Notice that both shoplist and mylist both print\n# the same list without the 'apple' confirming that\n# they point to the same object\n\nprint('Copy by making a full slice')\n# Make a copy by doing a full slice\nmylist = shoplist[:]\n# Remove first item\ndel mylist[0]\n\nprint('shoplist is', shoplist)\nprint('mylist is', mylist)\n# Notice that now the two lists are different\nOutput:\n\nSimple Assignment\nshoplist is ['mango', 'carrot', 'banana']\nmylist is ['mango', 'carrot', 'banana']\nCopy by making a full slice\nshoplist is ['mango', 'carrot', 'banana']\nmylist is ['carrot', 'banana']\n\nHow It Works\nMost of the explanation is available in the comments.\nRemember that if you want to make a copy of a list or such kinds of sequences or complex objects (not simple objects such as integers), then you have to use the slicing operation to make a copy. If you just assign the variable name to another name, both of them will ‘’refer’’ to the same object and this could be trouble if you are not careful.\n\nNote for Perl programmers\nRemember that an assignment statement for lists does not create a copy. You have to use slicing operation to make a copy of the sequence."
  },
  {
    "objectID": "assignments-05.html",
    "href": "assignments-05.html",
    "title": "Module 5 Assignments",
    "section": "",
    "text": "Due date: Friday, October 04, 2024 at 9pm\nShort Programming projects are submitted during our weekly 45-minute in-person lab sessions. Each lab sessions is guided by two TAs. The instructions for the short project will be available only during the lab sessions. To schedule your lab session go to the weekly lab session spreadsheet in Short Project Dates and Instructions."
  },
  {
    "objectID": "assignments-05.html#programming-problem-9",
    "href": "assignments-05.html#programming-problem-9",
    "title": "Module 5 Assignments",
    "section": "Programming Problem 9",
    "text": "Programming Problem 9\nDue date: Friday, October 04, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is count_vowels\nIt takes one string as argument\nIt counts how many vowels there are in the string using a while loop\nIt returns an integer representing the number of vowels (a, e i, o, u – both lowercase and uppercase) found in the argument\nYou can (and should) use the operator in\nYou are not allowed to use built-in count methods or functions\n\nName the program vowels.py. Make sure that gradescope gives you the points for passing the test cases.\nTest cases for development:\n\ndef main():\n  print( count_vowels(\"\") ) # 0\n  print( count_vowels(\"aaa\") ) # 3\n  print( count_vowels(\"AEIOU\") ) # 5\n  print( count_vowels(\"cysts\") ) # 0\n  \nmain()"
  },
  {
    "objectID": "assignments-05.html#programming-problem-10",
    "href": "assignments-05.html#programming-problem-10",
    "title": "Module 5 Assignments",
    "section": "Programming Problem 10",
    "text": "Programming Problem 10\nDue date: Friday, October 04, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is reverse_string\nIt takes one string as argument\nUsing a while loop, it builds a new string that is the reverse of the original string\nIt returns the reversed string\n\nWrite a Python function that does the following:\n\nIts name is remove_spaces\nIt takes one string as argument\nUsing a while loop to create a string with no spaces\nReturn the news string with no spaces\n\nWrite a Python function that does the following:\n\nIts name is is_palindrome\nIt takes one string as argument\nIt checks whether the string is a palindrome. A Palindrome reads the same backward and forward. For example: madam, and nurses run\nIt returns True if the string is a palindrome, and False otherwise\nUse your remove_spaces function to remove spaces from the argument before you check if the string is a palindrome\nUse your reverse_string function to reverse the string and then compare the result to the original string\n\nName the program palindrome.py. Make sure that gradescope gives you the points for passing the test cases.\n\ndef main():\n  print( reverse_string(\"aeiou\") ) # uoiea\n  print( remove_spaces(\"ae io ua\") ) # aeioua\n  \n  print( is_palindrome(\"noon\") ) # True\n  print( is_palindrome(\"deified\") ) # True\n  print( is_palindrome(\"go deliver a dare vile dog\") ) # True\n  \nmain()"
  },
  {
    "objectID": "assignments-10.html",
    "href": "assignments-10.html",
    "title": "Module 10 Assignments",
    "section": "",
    "text": "Due date: Tuesday, November 05, 2024 at 9pm\nShort Programming projects are submitted during our weekly 45-minute in-person lab sessions. Each lab sessions is guided by two TAs. The instructions for the short project will be available only during the lab sessions. To schedule your lab session go to the weekly lab session spreadsheet in Short Project Dates and Instructions."
  },
  {
    "objectID": "assignments-10.html#programming-problem-19",
    "href": "assignments-10.html#programming-problem-19",
    "title": "Module 10 Assignments",
    "section": "Programming Problem 19",
    "text": "Programming Problem 19\nDue date: Tuesday, November 05, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is zip_lists\nIt takes three arguments: list_1, list_2, list_3 – all of the same length\nIt iterates over all three lists (remember, they have the same length, so you can use the same index for all of them) appending to a new list of tuples of three elements\nIt returns the list of tuples\n\nTest cases:\n\nprint( zip_lists([1, 2], [\"a\", \"b\"], [1.0, 2.0]) ) # [(1, \"a\", 1.0), (2, \"b\", 2.0)]\nprint( zip_lists([], [], []) ) # []\n\nName the program create_tuples.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "assignments-10.html#programming-problem-20",
    "href": "assignments-10.html#programming-problem-20",
    "title": "Module 10 Assignments",
    "section": "Programming Problem 20",
    "text": "Programming Problem 20\nDue date: Tuesday, November 05, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is all_mappings\nIt takes a single dictionary as an argument, which maps strings to lists of integers\nIt returns a list of 2-value tuples, where the first value of the tuples is a key from D, and the second value is an element from its associated list value\n\nTest cases:\n\nprint( all_mappings({\"a\": [7, 3, 1]}) ) # [(\"a\", 7), (\"a\", 3), (\"a\", 1)]\nprint( all_mappings({\"a\": [8], \"b\": [2]}) ) # [(\"a\", 8), (\"b\", 2)]\nprint( all_mappings({\"a\": [], \"b\": [2]}) ) # [(\"b\", 2)]\nprint( all_mappings({}) ) # []\n\nName the program mappings.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "assignments-04.html",
    "href": "assignments-04.html",
    "title": "Module 4 Assignments",
    "section": "",
    "text": "Due date: Tuesday, September 24, 2024 at 9pm\nShort Programming projects are submitted during our weekly 45-minute in-person lab sessions. Each lab sessions is guided by two TAs. The instructions for the short project will be available only during the lab sessions. To schedule your lab session go to the weekly lab session spreadsheet in Short Project Dates and Instructions."
  },
  {
    "objectID": "assignments-04.html#programming-problem-7",
    "href": "assignments-04.html#programming-problem-7",
    "title": "Module 4 Assignments",
    "section": "Programming Problem 7",
    "text": "Programming Problem 7\nDue date: Tuesday, September 24, 2024 at 9pm\nWrite a program to check whether a person is eligible for voting or not.\nYour program should validate the input from the user (although you don’t have to ask for the input, in other words, no need to call input()). So you should write two functions: validate_age and check_eligibility.\nOne of the functions does the following:\n\nIts name is validate_age\nIt takes a string argument, called age\nIt checks if age is valid by checking that: it contains only 0 to 9 digits (in other words, it determines if age can be transformed to an integer), and that the integer is between 0 and 110 (inclusive).\nIt returns True if age is a valid integer, and False otherwise\n\nThe second function does the following:\n\nIts name is check_eligibility\nIt takes an integer argument, called age\nIf the age is greater or equal to 18, return True, otherwise return False\n\nName the program eligible.py. Make sure that gradescope gives you the points for passing the test cases.\nDevelopment test cases:\n\nprint( validate_age(\"20\") ) # True\nprint( validate_age(\"20.5\") ) # False\nprint( validate_age(\"20a\") ) # False\nprint( validate_age(\"300\") ) # False\nprint( check_eligibility(20) ) # True\nprint( check_eligibility(15) ) # False\n\nYou can also download the ready-to-run script to test your solution."
  },
  {
    "objectID": "assignments-04.html#programming-problem-8",
    "href": "assignments-04.html#programming-problem-8",
    "title": "Module 4 Assignments",
    "section": "Programming Problem 8",
    "text": "Programming Problem 8\nDue date: Tuesday, September 24, 2024 at 9pm\nWrite a function that does the following:\n\nIts name is max3.\nIt has 3 parameters, x, y and z.\nIt returns the greatest value of the three.\nDo not use any built-in functions like max.\n\nName the program max_of_three.py. Make sure that gradescope gives you the points for passing the test cases.\nDevelopment test cases:\n\nprint( max3(1, 1, 1) ) # 1\nprint( max3(1, 2, 1) ) # 2\nprint( max3(-1, -1, 0) ) # 0\nprint( max3(100, 0, 0) ) # 100\nprint( max3(19, 19, 0) ) # 19\nprint( max3(2, 0, 2) ) # 2\nprint( max3(-100, 0, 0) ) # 0\n\nYou can also download the ready-to-run script to test your solution."
  },
  {
    "objectID": "control_flow.html",
    "href": "control_flow.html",
    "title": "Control Flow",
    "section": "",
    "text": "In the programs we have seen till now, there has always been a series of statements faithfully executed by Python in exact top-down order. What if you wanted to change the flow of how it works? For example, you want the program to take some decisions and do different things depending on different situations, such as printing ‘Good Morning’ or ‘Good Evening’ depending on the time of the day?\nAs you might have guessed, this is achieved using control flow statements. There are three control flow statements in Python - if, for and while.\n\n\nThe if statement is used to check a condition: if the condition is true, we run a block of statements (called the if-block), else we process another block of statements (called the else-block). The else clause is optional.\nExample (save as if.py):\n\n{% include \"./programs/if.py\" %}\nOutput:\n{% include \"./programs/if.txt\" %}\nHow It Works\nIn this program, we take guesses from the user and check if it is the number that we have. We set the variable number to any integer we want, say 23. Then, we take the user’s guess using the input() function. Functions are just reusable pieces of programs. We’ll read more about them in the next chapter.\nWe supply a string to the built-in input function which prints it to the screen and waits for input from the user. Once we enter something and press kbd:[enter] key, the input() function returns what we entered, as a string. We then convert this string to an integer using int and then store it in the variable guess. Actually, the int is a class but all you need to know right now is that you can use it to convert a string to an integer (assuming the string contains a valid integer in the text).\nNext, we compare the guess of the user with the number we have chosen. If they are equal, we print a success message. Notice that we use indentation levels to tell Python which statements belong to which block. This is why indentation is so important in Python. I hope you are sticking to the “consistent indentation” rule. Are you?\nNotice how the if statement contains a colon at the end - we are indicating to Python that a block of statements follows.\nThen, we check if the guess is less than the number, and if so, we inform the user that they must guess a little higher than that. What we have used here is the elif clause which actually combines two related if else-if else statements into one combined if-elif-else statement. This makes the program easier and reduces the amount of indentation required.\nThe elif and else statements must also have a colon at the end of the logical line followed by their corresponding block of statements (with proper indentation, of course)\nYou can have another if statement inside the if-block of an if statement and so on - this is called a nested if statement.\nRemember that the elif and else parts are optional. A minimal valid if statement is:\nif True:\n    print('Yes, it is true')\nAfter Python has finished executing the complete if statement along with the associated elif and else clauses, it moves on to the next statement in the block containing the if statement. In this case, it is the main block (where execution of the program starts), and the next statement is the print('Done') statement. After this, Python sees the ends of the program and simply finishes up.\nEven though this is a very simple program, I have been pointing out a lot of things that you should notice. All these are pretty straightforward (and surprisingly simple for those of you from C/C++ backgrounds). You will need to become aware of all these things initially, but after some practice you will become comfortable with them, and it will all feel ‘natural’ to you.\n\nNote for C/C++ Programmers\nThere is no switch statement in Python. You can use an if..elif..else statement to do the same thing (and in some cases, use a dictionary to do it quickly)\n\n\n\n\nThe while statement allows you to repeatedly execute a block of statements as long as a condition is true. A while statement is an example of what is called a looping statement. A while statement can have an optional else clause.\nExample (save as while.py):\n{% include \"./programs/while.py\" %}\nOutput:\n{% include \"./programs/while.txt\" %}\nHow It Works\nIn this program, we are still playing the guessing game, but the advantage is that the user is allowed to keep guessing until he guesses correctly - there is no need to repeatedly run the program for each guess, as we have done in the previous section. This aptly demonstrates the use of the while statement.\nWe move the input and if statements to inside the while loop and set the variable running to True before the while loop. First, we check if the variable running is True and then proceed to execute the corresponding while-block. After this block is executed, the condition is again checked which in this case is the running variable. If it is true, we execute the while-block again, else we continue to execute the optional else-block and then continue to the next statement.\nThe else block is executed when the while loop condition becomes False - this may even be the first time that the condition is checked. If there is an else clause for a while loop, it is always executed unless you break out of the loop with a break statement.\nThe True and False are called Boolean types and you can consider them to be equivalent to the value 1 and 0 respectively.\n\nNote for C/C++ Programmers\nRemember that you can have an else clause for the while loop.\n\n\n\n\nThe for..in statement is another looping statement which iterates over a sequence of objects i.e. go through each item in a sequence. We will see more about sequences in detail in later chapters. What you need to know right now is that a sequence is just an ordered collection of items.\nExample (save as for.py):\n{% include \"./programs/for.py\" %}\nOutput:\n{% include \"./programs/for.txt\" %}\nHow It Works\nIn this program, we are printing a sequence of numbers. We generate this sequence of numbers using the built-in range function.\nWhat we do here is supply it two numbers and range returns a sequence of numbers starting from the first number and up to the second number. For example, range(1,5) gives the sequence [1, 2, 3, 4]. By default, range takes a step count of 1. If we supply a third number to range, then that becomes the step count. For example, range(1,5,2) gives [1,3]. Remember that the range extends up to the second number i.e. it does not include the second number.\nNote that range() generates only one number at a time, if you want the full list of numbers, call list() on the range(), for example, list(range(5)) will result in [0, 1, 2, 3, 4]. Lists are explained in the data structures chapter.\nThe for loop then iterates over this range - for i in range(1,5) is equivalent to for i in [1, 2, 3, 4] which is like assigning each number (or object) in the sequence to i, one at a time, and then executing the block of statements for each value of i. In this case, we just print the value in the block of statements.\nRemember that the else part is optional. When included, it is always executed once after the for loop is over unless a break statement is encountered.\nRemember that the for..in loop works for any sequence. Here, we have a list of numbers generated by the built-in range function, but in general we can use any kind of sequence of any kind of objects! We will explore this idea in detail in later chapters.\n\nNote for C/C++/Java/C# Programmers\nThe Python for loop is radically different from the C/C++ for loop. C# programmers will note that the for loop in Python is similar to the foreach loop in C#. Java programmers will note that the same is similar to for (int i : IntArray) in Java 1.5.\nIn C/C++, if you want to write for (int i = 0; i &lt; 5; i++), then in Python you write just for i in range(0,5). As you can see, the for loop is simpler, more expressive and less error prone in Python.\n\n\n\n\nThe break statement is used to break out of a loop statement i.e. stop the execution of a looping statement, even if the loop condition has not become False or the sequence of items has not been completely iterated over.\nAn important note is that if you break out of a for or while loop, any corresponding loop else block is not executed.\nExample (save as break.py):\n{% include \"./programs/break.py\" %}\nOutput:\n{% include \"./programs/break.txt\" %}\nHow It Works\nIn this program, we repeatedly take the user’s input and print the length of each input each time. We are providing a special condition to stop the program by checking if the user input is 'quit'. We stop the program by breaking out of the loop and reach the end of the program.\nThe length of the input string can be found out using the built-in len function.\nRemember that the break statement can be used with the for loop as well.\nSwaroop’s Poetic Python\nThe input I have used here is a mini poem I have written:\nProgramming is fun\nWhen the work is done\nif you wanna make your work also fun:\n    use Python!\n\n\n\nThe continue statement is used to tell Python to skip the rest of the statements in the current loop block and to continue to the next iteration of the loop.\nExample (save as continue.py):\n{% include \"./programs/continue.py\" %}\nOutput:\n{% include \"./programs/continue.txt\" %}\nHow It Works\nIn this program, we accept input from the user, but we process the input string only if it is at least 3 characters long. So, we use the built-in len function to get the length and if the length is less than 3, we skip the rest of the statements in the block by using the continue statement. Otherwise, the rest of the statements in the loop are executed, doing any kind of processing we want to do here.\nNote that the continue statement works with the for loop as well.\n\n\n\nWe have seen how to use the three control flow statements - if, while and for along with their associated break and continue statements. These are some of the most commonly used parts of Python and hence, becoming comfortable with them is essential.\nNext, we will see how to create and use functions."
  },
  {
    "objectID": "control_flow.html#the-if-statement",
    "href": "control_flow.html#the-if-statement",
    "title": "Control Flow",
    "section": "",
    "text": "The if statement is used to check a condition: if the condition is true, we run a block of statements (called the if-block), else we process another block of statements (called the else-block). The else clause is optional.\nExample (save as if.py):\n\n{% include \"./programs/if.py\" %}\nOutput:\n{% include \"./programs/if.txt\" %}\nHow It Works\nIn this program, we take guesses from the user and check if it is the number that we have. We set the variable number to any integer we want, say 23. Then, we take the user’s guess using the input() function. Functions are just reusable pieces of programs. We’ll read more about them in the next chapter.\nWe supply a string to the built-in input function which prints it to the screen and waits for input from the user. Once we enter something and press kbd:[enter] key, the input() function returns what we entered, as a string. We then convert this string to an integer using int and then store it in the variable guess. Actually, the int is a class but all you need to know right now is that you can use it to convert a string to an integer (assuming the string contains a valid integer in the text).\nNext, we compare the guess of the user with the number we have chosen. If they are equal, we print a success message. Notice that we use indentation levels to tell Python which statements belong to which block. This is why indentation is so important in Python. I hope you are sticking to the “consistent indentation” rule. Are you?\nNotice how the if statement contains a colon at the end - we are indicating to Python that a block of statements follows.\nThen, we check if the guess is less than the number, and if so, we inform the user that they must guess a little higher than that. What we have used here is the elif clause which actually combines two related if else-if else statements into one combined if-elif-else statement. This makes the program easier and reduces the amount of indentation required.\nThe elif and else statements must also have a colon at the end of the logical line followed by their corresponding block of statements (with proper indentation, of course)\nYou can have another if statement inside the if-block of an if statement and so on - this is called a nested if statement.\nRemember that the elif and else parts are optional. A minimal valid if statement is:\nif True:\n    print('Yes, it is true')\nAfter Python has finished executing the complete if statement along with the associated elif and else clauses, it moves on to the next statement in the block containing the if statement. In this case, it is the main block (where execution of the program starts), and the next statement is the print('Done') statement. After this, Python sees the ends of the program and simply finishes up.\nEven though this is a very simple program, I have been pointing out a lot of things that you should notice. All these are pretty straightforward (and surprisingly simple for those of you from C/C++ backgrounds). You will need to become aware of all these things initially, but after some practice you will become comfortable with them, and it will all feel ‘natural’ to you.\n\nNote for C/C++ Programmers\nThere is no switch statement in Python. You can use an if..elif..else statement to do the same thing (and in some cases, use a dictionary to do it quickly)"
  },
  {
    "objectID": "control_flow.html#the-while-statement",
    "href": "control_flow.html#the-while-statement",
    "title": "Control Flow",
    "section": "",
    "text": "The while statement allows you to repeatedly execute a block of statements as long as a condition is true. A while statement is an example of what is called a looping statement. A while statement can have an optional else clause.\nExample (save as while.py):\n{% include \"./programs/while.py\" %}\nOutput:\n{% include \"./programs/while.txt\" %}\nHow It Works\nIn this program, we are still playing the guessing game, but the advantage is that the user is allowed to keep guessing until he guesses correctly - there is no need to repeatedly run the program for each guess, as we have done in the previous section. This aptly demonstrates the use of the while statement.\nWe move the input and if statements to inside the while loop and set the variable running to True before the while loop. First, we check if the variable running is True and then proceed to execute the corresponding while-block. After this block is executed, the condition is again checked which in this case is the running variable. If it is true, we execute the while-block again, else we continue to execute the optional else-block and then continue to the next statement.\nThe else block is executed when the while loop condition becomes False - this may even be the first time that the condition is checked. If there is an else clause for a while loop, it is always executed unless you break out of the loop with a break statement.\nThe True and False are called Boolean types and you can consider them to be equivalent to the value 1 and 0 respectively.\n\nNote for C/C++ Programmers\nRemember that you can have an else clause for the while loop."
  },
  {
    "objectID": "control_flow.html#the-for-loop",
    "href": "control_flow.html#the-for-loop",
    "title": "Control Flow",
    "section": "",
    "text": "The for..in statement is another looping statement which iterates over a sequence of objects i.e. go through each item in a sequence. We will see more about sequences in detail in later chapters. What you need to know right now is that a sequence is just an ordered collection of items.\nExample (save as for.py):\n{% include \"./programs/for.py\" %}\nOutput:\n{% include \"./programs/for.txt\" %}\nHow It Works\nIn this program, we are printing a sequence of numbers. We generate this sequence of numbers using the built-in range function.\nWhat we do here is supply it two numbers and range returns a sequence of numbers starting from the first number and up to the second number. For example, range(1,5) gives the sequence [1, 2, 3, 4]. By default, range takes a step count of 1. If we supply a third number to range, then that becomes the step count. For example, range(1,5,2) gives [1,3]. Remember that the range extends up to the second number i.e. it does not include the second number.\nNote that range() generates only one number at a time, if you want the full list of numbers, call list() on the range(), for example, list(range(5)) will result in [0, 1, 2, 3, 4]. Lists are explained in the data structures chapter.\nThe for loop then iterates over this range - for i in range(1,5) is equivalent to for i in [1, 2, 3, 4] which is like assigning each number (or object) in the sequence to i, one at a time, and then executing the block of statements for each value of i. In this case, we just print the value in the block of statements.\nRemember that the else part is optional. When included, it is always executed once after the for loop is over unless a break statement is encountered.\nRemember that the for..in loop works for any sequence. Here, we have a list of numbers generated by the built-in range function, but in general we can use any kind of sequence of any kind of objects! We will explore this idea in detail in later chapters.\n\nNote for C/C++/Java/C# Programmers\nThe Python for loop is radically different from the C/C++ for loop. C# programmers will note that the for loop in Python is similar to the foreach loop in C#. Java programmers will note that the same is similar to for (int i : IntArray) in Java 1.5.\nIn C/C++, if you want to write for (int i = 0; i &lt; 5; i++), then in Python you write just for i in range(0,5). As you can see, the for loop is simpler, more expressive and less error prone in Python."
  },
  {
    "objectID": "control_flow.html#break-statement",
    "href": "control_flow.html#break-statement",
    "title": "Control Flow",
    "section": "",
    "text": "The break statement is used to break out of a loop statement i.e. stop the execution of a looping statement, even if the loop condition has not become False or the sequence of items has not been completely iterated over.\nAn important note is that if you break out of a for or while loop, any corresponding loop else block is not executed.\nExample (save as break.py):\n{% include \"./programs/break.py\" %}\nOutput:\n{% include \"./programs/break.txt\" %}\nHow It Works\nIn this program, we repeatedly take the user’s input and print the length of each input each time. We are providing a special condition to stop the program by checking if the user input is 'quit'. We stop the program by breaking out of the loop and reach the end of the program.\nThe length of the input string can be found out using the built-in len function.\nRemember that the break statement can be used with the for loop as well.\nSwaroop’s Poetic Python\nThe input I have used here is a mini poem I have written:\nProgramming is fun\nWhen the work is done\nif you wanna make your work also fun:\n    use Python!"
  },
  {
    "objectID": "control_flow.html#continue-statement",
    "href": "control_flow.html#continue-statement",
    "title": "Control Flow",
    "section": "",
    "text": "The continue statement is used to tell Python to skip the rest of the statements in the current loop block and to continue to the next iteration of the loop.\nExample (save as continue.py):\n{% include \"./programs/continue.py\" %}\nOutput:\n{% include \"./programs/continue.txt\" %}\nHow It Works\nIn this program, we accept input from the user, but we process the input string only if it is at least 3 characters long. So, we use the built-in len function to get the length and if the length is less than 3, we skip the rest of the statements in the block by using the continue statement. Otherwise, the rest of the statements in the loop are executed, doing any kind of processing we want to do here.\nNote that the continue statement works with the for loop as well."
  },
  {
    "objectID": "control_flow.html#summary",
    "href": "control_flow.html#summary",
    "title": "Control Flow",
    "section": "",
    "text": "We have seen how to use the three control flow statements - if, while and for along with their associated break and continue statements. These are some of the most commonly used parts of Python and hence, becoming comfortable with them is essential.\nNext, we will see how to create and use functions."
  },
  {
    "objectID": "test.html#write-a-function",
    "href": "test.html#write-a-function",
    "title": "Untitled",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is detect_duplicate\nIt takes two lists: list_a and list_b\nIt returns True if the two lists have at least one common item, False otherwise\nUse a for loop (just one) and use the in operator\n\nTest cases:\n\nassert detect_duplicate([], []) == False\nassert detect_duplicate([\"a\", \"b\"], [\"c\", \"d\", \"a\"]) == True\nassert detect_duplicate([0, 3, 2, 1, 2, 4], [5, 6, 0]) == True"
  },
  {
    "objectID": "test.html#write-a-function-solution",
    "href": "test.html#write-a-function-solution",
    "title": "Untitled",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef detect_duplicate(list_a, list_b):\n  # for every index in the second list\n  for index in range(len(list_b)):\n    # check if item at index in second list is in first list\n    if list_b[index] in list_a:\n      return True\n  # for loop ran without returning True\n  return False\n\ndef main():\n  assert detect_duplicate([], []) == False\n  assert detect_duplicate([\"a\", \"b\"], [\"c\", \"d\", \"a\"]) == True\n  assert detect_duplicate([0, 3, 2, 1, 2, 4], [5, 6, 0]) == True\n  \nmain()"
  },
  {
    "objectID": "assignments-06.html",
    "href": "assignments-06.html",
    "title": "Module 6 Assignments",
    "section": "",
    "text": "Due date: Tuesday, October 08, 2024 at 9pm\nShort Programming projects are submitted during our weekly 45-minute in-person lab sessions. Each lab sessions is guided by two TAs. The instructions for the short project will be available only during the lab sessions. To schedule your lab session go to the weekly lab session spreadsheet in Short Project Dates and Instructions."
  },
  {
    "objectID": "assignments-06.html#programming-problem-11",
    "href": "assignments-06.html#programming-problem-11",
    "title": "Module 6 Assignments",
    "section": "Programming Problem 11",
    "text": "Programming Problem 11\nDue date: Tuesday, October 08, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is sum_all\nIt takes a list of numeric values as argument: numbers\nIt returns the sum of all elements in numbers\nUse a while loop (define an index before the loop, use index in the while condition, change the index inside the loop)\n\nName the program sum.py. Make sure that gradescope gives you the points for passing the test cases.\nTest cases:\n\ndef main():\n  value = sum_all([])\n  assert value == 0, f\"expected return value was 0, but function returned {value}\" \n\n  value = sum_all([0, 0, 0, 0, 0])\n  assert value == 0, f\"expected return value was 0, but function returned {value}\" \n\n  value = sum_all([1, -1, 2, -2, 3, -3])\n  assert value == 0, f\"expected return value was 0, but function returned {value}\" \n\n  value = sum_all([1, 2, 3, 4, 5])\n  assert value == 15, f\"expected return value was 15, but function returned {value}\" \n\n  print(\"All tests passed.\")\n\nmain()"
  },
  {
    "objectID": "assignments-06.html#programming-problem-12",
    "href": "assignments-06.html#programming-problem-12",
    "title": "Module 6 Assignments",
    "section": "Programming Problem 12",
    "text": "Programming Problem 12\nDue date: Tuesday, October 08, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is concatenate\nIt takes a list of strings as argument: words\nIt returns a string with all items in words concatenated and separated by spaces\nUse a while loop (define an index before the loop, use index in the while condition, change the index inside the loop) – the last word in the resulting string is not followed by space\n\nName the program concatenate.py. Make sure that gradescope gives you the points for passing the test cases.\nTest cases:\n\ndef main():\n  value = concatenate([])\n  assert value == \"\", \\\n      f\"expected return value was an empty string, but function returned {value}\" \n\n  value = concatenate([\"\", \"\", \"\"])\n  assert value == \"  \", \\\n      f\"expected return value was an \\\"  \\\", but function returned {value}\" \n  \n  value = concatenate([\"Hi\", \"there\"])\n  assert value == \"Hi there\", \\\n      f\"expected return value was an \\\"Hi There\\\", but function returned {value}\" \n\n  print(\"All tests passed.\")\n\nmain()"
  },
  {
    "objectID": "assignments-07.html",
    "href": "assignments-07.html",
    "title": "Module 7 Assignments",
    "section": "",
    "text": "Due date: Tuesday, October 15, 2024 at 9pm\nShort Programming projects are submitted during our weekly 45-minute in-person lab sessions. Each lab sessions is guided by two TAs. The instructions for the short project will be available only during the lab sessions. To schedule your lab session go to the weekly lab session spreadsheet in Short Project Dates and Instructions."
  },
  {
    "objectID": "assignments-07.html#programming-problem-13",
    "href": "assignments-07.html#programming-problem-13",
    "title": "Module 7 Assignments",
    "section": "Programming Problem 13",
    "text": "Programming Problem 13\nDue date: Tuesday, October 15, 2024 at 9pm\nWrite a Python function that does the following:\n1. Its name is stop_ascending.\n2. It takes a list of numbers as argument.\n3. It returns the index of the first value that is not larger than the preceding value.\n4. If the list is entirely ascending, then the function should return the length of the list.\n5. Be very careful to return the correct index.\nName the program ascending.py. Make sure that gradescope gives you the points for passing the test case.\nTest cases:\n\nprint( stop_ascending([]) ) # None\nprint( stop_ascending([1, 2, 3]) ) # 3\nprint( stop_ascending([1, 2, 3, 1, 5]) ) # 3"
  },
  {
    "objectID": "assignments-07.html#programming-problem-14",
    "href": "assignments-07.html#programming-problem-14",
    "title": "Module 7 Assignments",
    "section": "Programming Problem 14",
    "text": "Programming Problem 14\nDue date: Tuesday, October 15, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is combine.\nIt takes two lists as parameter.\nIt combines the two lists into a single list that contains exactly the same values – make sure you add the items from the second list into the first list (the first list needs to be modified)\nDo not use any list methods besides .append.\n\nName the program combine_lists.py. Make sure that gradescope gives you the points for passing the test case.\nTest cases:\n\ntest_list = []\ncombine(test_list, []) \nprint(test_list) # []\n\ntest_list = [1, 2, 3]\ncombine(test_list, [1, 1]) \nprint(test_list) # [1, 2, 3, 1, 1]\n\ntest_list = [1, 2, 3, 1, 5]\ncombine(test_list, [])\nprint(test_list) # [1, 2, 3, 1, 5]"
  },
  {
    "objectID": "assignments-13.html",
    "href": "assignments-13.html",
    "title": "Module 13 Assignments",
    "section": "",
    "text": "Short Programming projects are submitted during our weekly 45-minute in-person lab sessions. Each lab sessions is guided by two TAs. The instructions for the short project will be available only during the lab sessions. To schedule your lab session go to the weekly lab session spreadsheet in Short Project Dates and Instructions."
  },
  {
    "objectID": "assignments-13.html#programming-problem-25",
    "href": "assignments-13.html#programming-problem-25",
    "title": "Module 13 Assignments",
    "section": "Programming Problem 25",
    "text": "Programming Problem 25\nDue date: Tuesday, November 26, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is sum_nums\nIt takes two arguments: a list of list (2D list) of integers and n an integers\nIt iterates through all of the numbers, and sum all of the ones whose value is less than n\nIt returns the sum\n\nTest cases:\n\nprint( sum_nums([[2, 12, 2], [12, 5, 100, 9]], 10) ) # 18\nprint( sum_nums([[2, 12, 2], [10, 5, 10, 9]], 10) ) # 18\nprint( sum_nums([[2, 12, 2], [10, 5, 10, 9]], 0) ) # 0\nprint( sum_nums([], 10) ) # 0\n\nName the program sums.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "assignments-13.html#programming-problem-26",
    "href": "assignments-13.html#programming-problem-26",
    "title": "Module 13 Assignments",
    "section": "Programming Problem 26",
    "text": "Programming Problem 26\nDue date: Tuesday, November 26, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is longest_string\nIt takes one argument: a list of dictionaries\nThe keys in each dictionary could be of various types, but you may assume that the values will be strings\nIt returns the longest string value from all of the dictionaries in the list\n\nTest cases:\n\ndata = [{'a':'horse', 'b':'caterpillar'}, {'a':'camp', 'c':'joker'}]\nprint( longest_string(data) ) # caterpillar\n\ndata = [{1:'abc', 5:'onetwothree'}, {2:'abcd'}, {7:'one two three'}]\nprint( longest_string(data) ) # one two three\n\nName the program longest.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "control_flow_while.html",
    "href": "control_flow_while.html",
    "title": "Control Flow (while)",
    "section": "",
    "text": "The while statement allows you to repeatedly execute a block of statements as long as a condition is true. A while statement is an example of what is called a looping statement. A while statement can have an optional else clause.\nExample:\ndef guessing_game(n):\n  running = True\n  while running:\n      guess = int(input('Enter an integer : '))\n  \n      if guess == number:\n          print('Congratulations, you guessed it.')\n          # this causes the while loop to stop\n          running = False\n      elif guess &lt; number:\n          print('No, it is a little higher than that.')\n      else:\n          print('No, it is a little lower than that.')\n  else:\n      print('The while loop is over.')\n      # Do anything else you want to do here\n\ndef main():\n  number = 23\n  guessing_game(number)\n  print('Done')\n  \nmain()\nOutput:\n\nEnter an integer : 50\nNo, it is a little lower than that.\nEnter an integer : 22\nNo, it is a little higher than that.\nEnter an integer : 23\nCongratulations, you guessed it.\nThe while loop is over.\nDone\n\nHow It Works\nIn this program, we are still playing the guessing game, but the advantage is that the user is allowed to keep guessing until he guesses correctly - there is no need to repeatedly run the program for each guess, as we have done in the previous section. This aptly demonstrates the use of the while statement.\nWe move the input and if statements to inside the while loop and set the variable running to True before the while loop. First, we check if the variable running is True and then proceed to execute the corresponding while-block. After this block is executed, the condition is again checked which in this case is the running variable. If it is true, we execute the while-block again, else we continue to execute the optional else-block and then continue to the next statement.\nThe else block is executed when the while loop condition becomes False - this may even be the first time that the condition is checked. If there is an else clause for a while loop, it is always executed unless you break out of the loop with a break statement.\nThe True and False are called Boolean types and you can consider them to be equivalent to the value 1 and 0 respectively.\n\nNote for C/C++ Programmers\nRemember that you can have an else clause for the while loop.\n\n\n\nWe have seen how to use the while statement. This is commonly used parts of Python and hence, becoming comfortable with them is essential."
  },
  {
    "objectID": "control_flow_while.html#summary",
    "href": "control_flow_while.html#summary",
    "title": "Control Flow (while)",
    "section": "",
    "text": "We have seen how to use the while statement. This is commonly used parts of Python and hence, becoming comfortable with them is essential."
  },
  {
    "objectID": "slides-10-02.html#variable-length-parameter",
    "href": "slides-10-02.html#variable-length-parameter",
    "title": "tuples (class slides)",
    "section": "Variable length parameter",
    "text": "Variable length parameter\nSometimes you want to handle a variable number of parameters (like print does)\n\nprint(1, 2, 3)\n\n1 2 3"
  },
  {
    "objectID": "slides-10-02.html#variable-length-parameter-1",
    "href": "slides-10-02.html#variable-length-parameter-1",
    "title": "tuples (class slides)",
    "section": "Variable length parameter",
    "text": "Variable length parameter\nYou can add a * before your parameter name so that it accepts a variable number of arguments, gathering them into a tuple\n\ndef concatenate(*values):\n  new_string = \"\"\n  for v in values:\n    new_string += str(v) + \" \"\n  return new_string[:-1]\n\ndef main():\n  print( concatenate(\"The\", \"temperature\", \"is\", 82, \"degrees\"))\n  \nmain()\n\nThe temperature is 82 degrees"
  },
  {
    "objectID": "slides-10-02.html#write-a-function",
    "href": "slides-10-02.html#write-a-function",
    "title": "tuples (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is maximum\nIt takes a variable number of arguments: *values\nIt returns the highest value in values\n\n\nassert maximum(1) == 1\nassert maximum(3,1) == 3\nassert maximum(2,4,6) == 6\nassert maximum() == None"
  },
  {
    "objectID": "slides-10-02.html#write-a-function-solution",
    "href": "slides-10-02.html#write-a-function-solution",
    "title": "tuples (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef maximum(*values):\n  result = None\n  for v in values:\n    if result == None or v &gt; result:\n      result = v\n  return result\n\ndef main():\n  assert maximum(1) == 1\n  assert maximum(3,1) == 3\n  assert maximum(2,4,6) == 6\n  assert maximum() == None\n  print(\"Passed all tests\")\n  \nmain()\n\nPassed all tests"
  },
  {
    "objectID": "slides-10-02.html#write-a-function-1",
    "href": "slides-10-02.html#write-a-function-1",
    "title": "tuples (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is min_max\nIt takes a variable number of arguments: *values\nIt returns the highest and lowest values in values\n\n\nassert min_max(1) == (1, 1)\nassert min_max(3,1) == (1, 3)\nassert min_max(2,4,6) == (2, 6)\nassert min_max() == (None, None)"
  },
  {
    "objectID": "slides-10-02.html#write-a-function-solution-1",
    "href": "slides-10-02.html#write-a-function-solution-1",
    "title": "tuples (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef min_max(*values):\n  max = None\n  min = None\n  for v in values:\n    if max == None or v &gt; max:\n      max = v\n    if min == None or v &lt; min:\n      min = v\n  return min, max\n\ndef main():\n  assert min_max(1) == (1, 1)\n  assert min_max(3,1) == (1, 3)\n  assert min_max(2,4,6) == (2, 6)\n  assert min_max() == (None, None)\n  print(\"Passed all tests\")\n  \nmain()\n\nPassed all tests"
  },
  {
    "objectID": "slides-12-03.html#announcements",
    "href": "slides-12-03.html#announcements",
    "title": "sets (class slides)",
    "section": "Announcements",
    "text": "Announcements\n\nIf you submitted your solution to short project 09 before today, check gradescope – there was a special character that was removed for the test file\nGo to lab to work on short projects – I will instruct TAs not to help students with short projects during office hours\nMidterm 3 on April 24 – up to module 14\nFinal exam on May 3, 6pm to 8pm, in ENR2 120N"
  },
  {
    "objectID": "slides-12-03.html#set-methods",
    "href": "slides-12-03.html#set-methods",
    "title": "sets (class slides)",
    "section": "Set methods",
    "text": "Set methods\n\n.add(value) adds an element to the set\n.discard(value) discards the specified value\n.union(set2) returns a set with the all elements in both sets\n.intersection(set2) returns a set with the all elements in common"
  },
  {
    "objectID": "slides-12-03.html#union",
    "href": "slides-12-03.html#union",
    "title": "sets (class slides)",
    "section": "union",
    "text": "union\n\ns1 = {1, 2, 3}\ns2 = {3, 4, 5}\ns1.union(s2)\n\n{1, 2, 3, 4, 5}\n\n\n\nunion"
  },
  {
    "objectID": "slides-12-03.html#intersection",
    "href": "slides-12-03.html#intersection",
    "title": "sets (class slides)",
    "section": "intersection",
    "text": "intersection\n\ns1 = {1, 2, 3}\ns2 = {3, 4, 5}\ns1.intersection(s2)\n\n{3}\n\n\n\nintersection"
  },
  {
    "objectID": "slides-12-03.html#evaluate-the-code",
    "href": "slides-12-03.html#evaluate-the-code",
    "title": "sets (class slides)",
    "section": "Evaluate the code",
    "text": "Evaluate the code\n\npresences = {\"Anna\", \"Beatrice\", \"Claude\"}\nabsences = {\"Elvin\", \"Harley\"}\nabsences.add(\"Becca\")\npresences.union(absences)\n\ntask_1 = {\"Anna\", \"Beatrice\", \"Claude\"}\ntask_2 = {\"Anna\", \"Elvin\", \"Harley\", \"Beatrice\"}\ntask_1.intersection(task_2)\n\ntask_2.discard(\"Anna\")\ntask_1.intersection(task_2)"
  },
  {
    "objectID": "slides-12-03.html#evaluate-the-code-1",
    "href": "slides-12-03.html#evaluate-the-code-1",
    "title": "sets (class slides)",
    "section": "Evaluate the code",
    "text": "Evaluate the code\n\npresences = {\"Anna\", \"Beatrice\", \"Claude\"}\nabsences = {\"Elvin\", \"Harley\"}\nabsences.add(\"Becca\")\npresences.union(absences)\n\n{'Anna', 'Beatrice', 'Becca', 'Claude', 'Elvin', 'Harley'}\n\n\n\ntask_1 = {\"Anna\", \"Beatrice\", \"Claude\"}\ntask_2 = {\"Anna\", \"Elvin\", \"Harley\", \"Beatrice\"}\ntask_1.intersection(task_2)\n\n{'Anna', 'Beatrice'}\n\n\n\ntask_2.discard(\"Anna\")\ntask_1.intersection(task_2)\n\n{'Beatrice'}"
  },
  {
    "objectID": "slides-12-03.html#write-a-function",
    "href": "slides-12-03.html#write-a-function",
    "title": "sets (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nIts name is common_values\nIt takes two sets are arguments\nIt returns False if the sets have no elements in common, True otherwise\n\n\nassert common_values({1, 2, 3}, {3, 4, 5}) == True\nassert common_values({1, 2, 3}, {30, 40, 50}) == False"
  },
  {
    "objectID": "slides-12-03.html#write-a-function-solution",
    "href": "slides-12-03.html#write-a-function-solution",
    "title": "sets (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef common_values(set_1, set_2):\n  return len(set_1.intersection(set_2)) != 0\n\nif __name__ == \"__main__\":\n  assert common_values({1, 2, 3}, {3, 4, 5}) == True\n  assert common_values({1, 2, 3}, {30, 40, 50}) == False\n  print(\"Passed tests.\")\n\nPassed tests."
  },
  {
    "objectID": "slides-12-03.html#write-a-function-1",
    "href": "slides-12-03.html#write-a-function-1",
    "title": "sets (class slides)",
    "section": "Write a function",
    "text": "Write a function\n\nFunction name is discard_elements\nIt takes two sets as argument: set_1 and set_2\nIt mutates the first set (set_1) removing all elements it has in common with set_2\n\n\ntest_set = {1, 2, 3, 4}\ndiscard_elements(test_set, {2})\nassert test_set == {1, 3, 4}"
  },
  {
    "objectID": "slides-12-03.html#write-a-function-solution-1",
    "href": "slides-12-03.html#write-a-function-solution-1",
    "title": "sets (class slides)",
    "section": "Write a function – solution",
    "text": "Write a function – solution\n\ndef discard_elements(set_1, set_2):\n  to_remove = set_1.intersection(set_2)\n  for value in to_remove:\n    set_1.discard(value)\n    \nif __name__ == \"__main__\":\n  test_set = {1, 2, 3, 4}\n  discard_elements(test_set, {2})\n  assert test_set == {1, 3, 4}\n  print(test_set)\n\n{1, 3, 4}"
  },
  {
    "objectID": "assignments-02.html",
    "href": "assignments-02.html",
    "title": "Module 2 Assignments",
    "section": "",
    "text": "Due date: Tuesday, September 10, 2024 at 9pm\nShort Programming projects are submitted during our weekly 45-minute in-person lab sessions. Each lab sessions is guided by two TAs. The instructions for the short project will be available only during the lab sessions. To schedule your lab session go to the weekly lab session spreadsheet in Short Project Dates and Instructions."
  },
  {
    "objectID": "assignments-02.html#programming-problem-3",
    "href": "assignments-02.html#programming-problem-3",
    "title": "Module 2 Assignments",
    "section": "Programming Problem 3",
    "text": "Programming Problem 3\nDue date: Tuesday, September 10, 2024 at 9pm\nWrite two python functions. The first function does the following:\n\nIts name is celsius_to_fahrenheit.\nIt takes a float argument, celsius.\nIt calculates the Fahrenheit temperature based on the given celsius temperature. To do so multiply the Celsius temperature by 1.8 (or 9/5) and add 32.\nIt returns the Fahrenheit temperature with two decimals of precision.\n\nThe other function convert temperatures in degrees from Fahrenheit to Celsius.\n\nIts name is fahrenheit_to_celsius.\nIt takes a float argument, fahrenheit.\nIt calculates the Celsius temperature based on the given Fahrenheit temperature. To do so subtract 32 from the Fahrenheit temperature and multiply the result by 5/9.\nIt returns the Celsius temperature with two decimals of precision.\n\nName the program temperatures.py. Make sure that gradescope gives you the points for passing the test cases.\nDevelopment test cases:\n\nprint( celsius_to_fahrenheit(15) ) # 59.0\nprint( celsius_to_fahrenheit(25) ) # 77.0\nprint( celsius_to_fahrenheit(38) ) # 100.4\nprint( fahrenheit_to_celsius(100) ) # 37.78\nprint( fahrenheit_to_celsius(115) ) # 46.11\nprint( fahrenheit_to_celsius(75) ) # 23.89\n\nYou can also download the ready-to-run script to test your solution."
  },
  {
    "objectID": "assignments-02.html#programming-problem-4",
    "href": "assignments-02.html#programming-problem-4",
    "title": "Module 2 Assignments",
    "section": "Programming Problem 4",
    "text": "Programming Problem 4\nDue date: Tuesday, September 10, 2024 at 9pm\nWrite two python functions. The first function does the following:\n\nIts name is feet_to_inches.\nIt takes a float argument, feet.\nIt converts the feet measurement to inches. As you might already know, an inch is 1/12th of a foot.\nIt returns the measure in inches as a rounded integer.\n\nThe second function does the following:\n\nIts name is feet_to_meters.\nIt takes a float argument, feet.\nIt converts the feet measurement to meter (divide the feet measurement by 3.281)\nIt returns the measure in meters as an rounded to two decimal places.\n\nName the program measures.py. Make sure that gradescope gives you the points for passing the test cases.\nDevelopment test cases:\n\nprint( feet_to_inches(1) ) # 12\nprint( feet_to_inches(2.5) ) # 30\nprint( feet_to_inches(5.4) ) # 65\nprint( feet_to_meters(1) ) # 0.3\nprint( feet_to_meters(5) ) # 1.52\nprint( feet_to_meters(20) ) # 6.1\n\nYou can also download the script to test your solution."
  },
  {
    "objectID": "about_python.html",
    "href": "about_python.html",
    "title": "About Python",
    "section": "",
    "text": "Python is one of those rare languages which can claim to be both simple and powerful. You will find yourself pleasantly surprised to see how easy it is to concentrate on the solution to the problem rather than the syntax and structure of the language you are programming in.\nThe official introduction to Python is:\n\nPython is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.\n\nI will discuss most of these features in more detail in the next section.\n\n\nGuido van Rossum, the creator of the Python language, named the language after the BBC show “Monty Python’s Flying Circus”. He doesn’t particularly like snakes that kill animals for food by winding their long bodies around them and crushing them.\n\n\n\n\n\nPython is a simple and minimalistic language. Reading a good Python program feels almost like reading English, although very strict English! This pseudo-code nature of Python is one of its greatest strengths. It allows you to concentrate on the solution to the problem rather than the language itself.\n\n\n\nAs you will see, Python is extremely easy to get started with. Python has an extraordinarily simple syntax, as already mentioned.\n\n\n\nPython is an example of a FLOSS (Free/Libre and Open Source Software). In simple terms, you can freely distribute copies of this software, read its source code, make changes to it, and use pieces of it in new free programs. FLOSS is based on the concept of a community which shares knowledge. This is one of the reasons why Python is so good - it has been created and is constantly improved by a community who just want to see a better Python.\n\n\n\nWhen you write programs in Python, you never need to bother about the low-level details such as managing the memory used by your program, etc.\n\n\n\nDue to its open-source nature, Python has been ported to (i.e. changed to make it work on) many platforms. All your Python programs can work on any of these platforms without requiring any changes at all if you are careful enough to avoid any system-dependent features.\nYou can use Python on GNU/Linux, Windows, FreeBSD, Macintosh, Solaris, OS/2, Amiga, AROS, AS/400, BeOS, OS/390, z/OS, Palm OS, QNX, VMS, Psion, Acorn RISC OS, VxWorks, PlayStation, Sharp Zaurus, Windows CE and PocketPC!\nYou can even use a platform like Kivy to create games for your computer and for iPhone, iPad, and Android.\n\n\n\nThis requires a bit of explanation.\nA program written in a compiled language like C or C++ is converted from the source language i.e. C or C++ into a language that is spoken by your computer (binary code i.e. 0s and 1s) using a compiler with various flags and options. When you run the program, the linker/loader software copies the program from hard disk to memory and starts running it.\nPython, on the other hand, does not need compilation to binary. You just run the program directly from the source code. Internally, Python converts the source code into an intermediate form called bytecodes and then translates this into the native language of your computer and then runs it. All this, actually, makes using Python much easier since you don’t have to worry about compiling the program, making sure that the proper libraries are linked and loaded, etc. This also makes your Python programs much more portable, since you can just copy your Python program onto another computer and it just works!\n\n\n\nPython supports procedure-oriented programming as well as object-oriented programming (OOP). In procedure-oriented languages, the program is built around procedures or functions which are nothing but reusable pieces of programs. In object-oriented languages, the program is built around objects which combine data and functionality. Python has a very powerful but simplistic way of doing OOP, especially when compared to big languages like C++ or Java.\n\n\n\nIf you need a critical piece of code to run very fast or want to have some piece of algorithm not to be open, you can code that part of your program in C or C++ and then use it from your Python program.\n\n\n\nYou can embed Python within your C/C++ programs to give scripting capabilities for your program’s users.\n\n\n\nThe Python Standard Library is huge indeed. It can help you do various things involving regular expressions,documentation generation, unit testing, threading, databases, web browsers, CGI, FTP, email, XML, XML-RPC, HTML, WAV files, cryptography, GUI (graphical user interfaces), and other system-dependent stuff. Remember, all this is always available wherever Python is installed. This is called the Batteries Included philosophy of Python.\nBesides the standard library, there are various other high-quality libraries which you can find at the Python Package Index.\n\n\n\nPython is indeed an exciting and powerful language. It has the right combination of performance and features that make writing programs in Python both fun and easy.\n\n\n\n\nYou can ignore this section if you’re not interested in the difference between “Python version 2” and “Python version 3”. But please do be aware of which version you are using. This book is written for Python version 3.\nRemember that once you have properly understood and learn to use one version, you can easily learn the differences and use the other one. The hard part is learning programming and understanding the basics of Python language itself. That is our goal in this book, and once you have achieved that goal, you can easily use Python 2 or Python 3 depending on your situation.\nFor details on differences between Python 2 and Python 3, see:\n\nThe future of Python 2\nPorting Python 2 Code to Python 3\nWriting code that runs under both Python2 and 3\nSupporting Python 3: An in-depth guide\n\n\n\n\nYou may find it interesting to read what great hackers like Eric S. Raymond (ESR) have to say about Python:\n\nEric S. Raymond is the author of “The Cathedral and the Bazaar” and is also the person who coined the term Open Source. He says that Python has become his favorite programming language. This article was the real inspiration for my first brush with Python.\nBruce Eckel is the author of the famous ‘Thinking in Java’ and ‘Thinking in C++’ books. He says that no language has made him more productive than Python. He says that Python is perhaps the only language that focuses on making things easier for the programmer. Read the complete interview for more details.\nPeter Norvig is a well-known Lisp author and Director of Search Quality at Google (thanks to Guido van Rossum for pointing that out). He says that writing Python is like writing in pseudocode. He says that Python has always been an integral part of Google. You can actually verify this statement by looking at the Google Jobs page which lists Python knowledge as a requirement for software engineers."
  },
  {
    "objectID": "about_python.html#story-behind-the-name",
    "href": "about_python.html#story-behind-the-name",
    "title": "About Python",
    "section": "",
    "text": "Guido van Rossum, the creator of the Python language, named the language after the BBC show “Monty Python’s Flying Circus”. He doesn’t particularly like snakes that kill animals for food by winding their long bodies around them and crushing them."
  },
  {
    "objectID": "about_python.html#features-of-python",
    "href": "about_python.html#features-of-python",
    "title": "About Python",
    "section": "",
    "text": "Python is a simple and minimalistic language. Reading a good Python program feels almost like reading English, although very strict English! This pseudo-code nature of Python is one of its greatest strengths. It allows you to concentrate on the solution to the problem rather than the language itself.\n\n\n\nAs you will see, Python is extremely easy to get started with. Python has an extraordinarily simple syntax, as already mentioned.\n\n\n\nPython is an example of a FLOSS (Free/Libre and Open Source Software). In simple terms, you can freely distribute copies of this software, read its source code, make changes to it, and use pieces of it in new free programs. FLOSS is based on the concept of a community which shares knowledge. This is one of the reasons why Python is so good - it has been created and is constantly improved by a community who just want to see a better Python.\n\n\n\nWhen you write programs in Python, you never need to bother about the low-level details such as managing the memory used by your program, etc.\n\n\n\nDue to its open-source nature, Python has been ported to (i.e. changed to make it work on) many platforms. All your Python programs can work on any of these platforms without requiring any changes at all if you are careful enough to avoid any system-dependent features.\nYou can use Python on GNU/Linux, Windows, FreeBSD, Macintosh, Solaris, OS/2, Amiga, AROS, AS/400, BeOS, OS/390, z/OS, Palm OS, QNX, VMS, Psion, Acorn RISC OS, VxWorks, PlayStation, Sharp Zaurus, Windows CE and PocketPC!\nYou can even use a platform like Kivy to create games for your computer and for iPhone, iPad, and Android.\n\n\n\nThis requires a bit of explanation.\nA program written in a compiled language like C or C++ is converted from the source language i.e. C or C++ into a language that is spoken by your computer (binary code i.e. 0s and 1s) using a compiler with various flags and options. When you run the program, the linker/loader software copies the program from hard disk to memory and starts running it.\nPython, on the other hand, does not need compilation to binary. You just run the program directly from the source code. Internally, Python converts the source code into an intermediate form called bytecodes and then translates this into the native language of your computer and then runs it. All this, actually, makes using Python much easier since you don’t have to worry about compiling the program, making sure that the proper libraries are linked and loaded, etc. This also makes your Python programs much more portable, since you can just copy your Python program onto another computer and it just works!\n\n\n\nPython supports procedure-oriented programming as well as object-oriented programming (OOP). In procedure-oriented languages, the program is built around procedures or functions which are nothing but reusable pieces of programs. In object-oriented languages, the program is built around objects which combine data and functionality. Python has a very powerful but simplistic way of doing OOP, especially when compared to big languages like C++ or Java.\n\n\n\nIf you need a critical piece of code to run very fast or want to have some piece of algorithm not to be open, you can code that part of your program in C or C++ and then use it from your Python program.\n\n\n\nYou can embed Python within your C/C++ programs to give scripting capabilities for your program’s users.\n\n\n\nThe Python Standard Library is huge indeed. It can help you do various things involving regular expressions,documentation generation, unit testing, threading, databases, web browsers, CGI, FTP, email, XML, XML-RPC, HTML, WAV files, cryptography, GUI (graphical user interfaces), and other system-dependent stuff. Remember, all this is always available wherever Python is installed. This is called the Batteries Included philosophy of Python.\nBesides the standard library, there are various other high-quality libraries which you can find at the Python Package Index.\n\n\n\nPython is indeed an exciting and powerful language. It has the right combination of performance and features that make writing programs in Python both fun and easy."
  },
  {
    "objectID": "about_python.html#python-3-versus-2",
    "href": "about_python.html#python-3-versus-2",
    "title": "About Python",
    "section": "",
    "text": "You can ignore this section if you’re not interested in the difference between “Python version 2” and “Python version 3”. But please do be aware of which version you are using. This book is written for Python version 3.\nRemember that once you have properly understood and learn to use one version, you can easily learn the differences and use the other one. The hard part is learning programming and understanding the basics of Python language itself. That is our goal in this book, and once you have achieved that goal, you can easily use Python 2 or Python 3 depending on your situation.\nFor details on differences between Python 2 and Python 3, see:\n\nThe future of Python 2\nPorting Python 2 Code to Python 3\nWriting code that runs under both Python2 and 3\nSupporting Python 3: An in-depth guide"
  },
  {
    "objectID": "about_python.html#what-programmers-say",
    "href": "about_python.html#what-programmers-say",
    "title": "About Python",
    "section": "",
    "text": "You may find it interesting to read what great hackers like Eric S. Raymond (ESR) have to say about Python:\n\nEric S. Raymond is the author of “The Cathedral and the Bazaar” and is also the person who coined the term Open Source. He says that Python has become his favorite programming language. This article was the real inspiration for my first brush with Python.\nBruce Eckel is the author of the famous ‘Thinking in Java’ and ‘Thinking in C++’ books. He says that no language has made him more productive than Python. He says that Python is perhaps the only language that focuses on making things easier for the programmer. Read the complete interview for more details.\nPeter Norvig is a well-known Lisp author and Director of Search Quality at Google (thanks to Guido van Rossum for pointing that out). He says that writing Python is like writing in pseudocode. He says that Python has always been an integral part of Google. You can actually verify this statement by looking at the Google Jobs page which lists Python knowledge as a requirement for software engineers."
  },
  {
    "objectID": "tbd.html",
    "href": "tbd.html",
    "title": "TBD",
    "section": "",
    "text": "Reading will be posted soon."
  },
  {
    "objectID": "io.html",
    "href": "io.html",
    "title": "Input and Output",
    "section": "",
    "text": "Input and Output\nAnother common type of input/output (besides using the input() function) is dealing with files. The ability to create, read and write files is essential to many programs and we will explore this aspect in this chapter.\nYou can open and use files for reading or writing by creating an object of the file class and using its read, readline or write methods appropriately to read from or write to the file. The ability to read or write to the file depends on the mode you have specified for the file opening. Then finally, when you are finished with the file, you call the close method to tell Python that we are done using the file.\nExample:\npoem = '''\\\nProgramming is fun\nWhen the work is done\nif you wanna make your work also fun:\n    use Python!\n'''\n\n# Open for 'w'riting\nf = open('poem.txt', 'w')\n# Write text to file\nf.write(poem)\n# Close the file\nf.close()\n\n# If no mode is specified,\n# 'r'ead mode is assumed by default\nf = open('poem.txt')\nwhile True:\n    line = f.readline()\n    # Zero length indicates EOF\n    if len(line) == 0:\n        break\n    # The `line` already has a newline\n    # at the end of each line\n    # since it is reading from a file.\n    print(line, end='')\n# close the file\nf.close()\nOutput:\n\nProgramming is fun\nWhen the work is done\nif you wanna make your work also fun:\n    use Python!\n\nHow It Works\nNote that we can create a new file object simply by using the open method. We open (or create it if it doesn’t already exist) this file by using the built-in open function and specifying the name of the file and the mode in which we want to open the file. The mode can be a read mode ('r'), write mode ('w') or append mode ('a'). We can also specify whether we are reading, writing, or appending in text mode ('t') or binary mode ('b'). There are actually many more modes available and help(open) will give you more details about them. By default, open() considers the file to be a ’t’ext file and opens it in ’r’ead mode.\nIn our example, we first open/create the file in write text mode and use the write method of the file object to write our string variable poem to the file and then we finally close the file.\nNext, we open the same file again for reading. We don’t need to specify a mode because ‘read text file’ is the default mode. We read in each line of the file using the readline method in a loop. This method returns a complete line including the newline character at the end of the line. When an empty string is returned, it means that we have reached the end of the file and we ‘break’ out of the loop.\nIn the end, we finally close the file.\nWe can see from our readline output that this program has indeed written to and read from our new poem.txt file."
  },
  {
    "objectID": "hello.html",
    "href": "hello.html",
    "title": "Hello World!",
    "section": "",
    "text": "Before we begin writing Python code, you need to install Python3 in your computer (alternatively you can run your code in the cloud on vscode.dev for example).\n\nGo to https://www.python.org/downloads/ and follow the instructions to install python for your specific Operating System (Mac, Windows, etc.)\nI recommend you use Visual Studio Code for your IDE (Integrated Development Environment). Download and install VS code: https://code.visualstudio.com/download\nIf you are unable to install anything in your machine (you use a Chromebook, for example), you can use a cloud-based IDE such as https://vscode.dev/"
  },
  {
    "objectID": "hello.html#installing-python",
    "href": "hello.html#installing-python",
    "title": "Hello World!",
    "section": "",
    "text": "Before we begin writing Python code, you need to install Python3 in your computer (alternatively you can run your code in the cloud on vscode.dev for example).\n\nGo to https://www.python.org/downloads/ and follow the instructions to install python for your specific Operating System (Mac, Windows, etc.)\nI recommend you use Visual Studio Code for your IDE (Integrated Development Environment). Download and install VS code: https://code.visualstudio.com/download\nIf you are unable to install anything in your machine (you use a Chromebook, for example), you can use a cloud-based IDE such as https://vscode.dev/"
  },
  {
    "objectID": "hello.html#how-to-write-python-programs",
    "href": "hello.html#how-to-write-python-programs",
    "title": "Hello World!",
    "section": "How to write Python programs",
    "text": "How to write Python programs\nTraditionally, the first program you write in any programming language is code to print hello world, which in Python is the following:\nprint('hello world')\nWe will experiment with this one line of code in this lesson.\nThere are a number of ways to set up your coding environment, and with time and experience you will develop your own preferences. Minimally, you need a plain text editor (for example, TextEdit for Macs and Notepad++ for Windows) and a terminal/command prompt to run python.\nIdeally, you will be using an IDE (Integrated Development Environment) which facilitates coding by integrating a text editor, a console and other tools into one window. IDEs offer great tools like autocomplete and debugging.\n\nBasic Steps\n\nOpen your editor of choice.\nType the program code given in the example.\nSave it as a file with the filename mentioned.\nRun the interpreter with the command python program.py to run the program."
  },
  {
    "objectID": "hello.html#videos",
    "href": "hello.html#videos",
    "title": "Hello World!",
    "section": "Videos",
    "text": "Videos\n\n\n\n\nExample: Using Variables And Literal Constants\nType and run the following program:\n# Filename : var.py\ni = 5\nprint(i)\ni = i + 1\nprint(i)\n\ns = '''This is a multi-line string.\nThis is the second line.'''\nprint(s)\nOutput:\n5\n6\nThis is a multi-line string.\nThis is the second line.\nHow It Works\nHere’s how this program works. First, we assign the literal constant value 5 to the variable i using the assignment operator (=). This line is called a statement because it states that something should be done and in this case, we connect the variable name i to the value 5. Next, we print the value of i using the print statement which, unsurprisingly, just prints the value of the variable to the screen.\nThen we add 1 to the value stored in i and store it back. We then print it and expectedly, we get the value 6.\nSimilarly, we assign the literal string to the variable s and then print it.\n\nNote for static language programmers\nVariables are used by just assigning them a value. No declaration or data type definition is needed/used."
  },
  {
    "objectID": "hello.html#logical-and-physical-line",
    "href": "hello.html#logical-and-physical-line",
    "title": "Hello World!",
    "section": "Logical And Physical Line",
    "text": "Logical And Physical Line\nA physical line is what you see when you write the program. A logical line is what Python sees as a single statement. Python implicitly assumes that each physical line corresponds to a logical line.\nAn example of a logical line is a statement like print('hello world') - if this was on a line by itself (as you see it in an editor), then this also corresponds to a physical line.\nImplicitly, Python encourages the use of a single statement per line which makes code more readable.\nIf you want to specify more than one logical line on a single physical line, then you have to explicitly specify this using a semicolon (;) which indicates the end of a logical line/statement. For example:\ni = 5\nprint(i)\nis effectively same as\ni = 5;\nprint(i);\nwhich is also same as\ni = 5; print(i);\nand same as\ni = 5; print(i)\nHowever, I strongly recommend that you stick to writing a maximum of a single logical line on each single physical line. The idea is that you should never use the semicolon. In fact, I have never used or even seen a semicolon in a Python program.\nThere is one kind of situation where this concept is really useful: if you have a long line of code, you can break it into multiple physical lines by using the backslash. This is referred to as explicit line joining:\ns = 'This is a string. \\\nThis continues the string.'\nprint(s)\nOutput:\nThis is a string. This continues the string.\nSimilarly,\ni = \\\n5\nis the same as\ni = 5\nSometimes, there is an implicit assumption where you don’t need to use a backslash. This is the case where the logical line has a starting parentheses, starting square brackets or a starting curly braces but not an ending one. This is called implicit line joining."
  },
  {
    "objectID": "hello.html#indentation",
    "href": "hello.html#indentation",
    "title": "Hello World!",
    "section": "Indentation",
    "text": "Indentation\nWhitespace is important in Python. Actually, whitespace at the beginning of the line is important. This is called indentation. Leading whitespace (spaces and tabs) at the beginning of the logical line is used to determine the indentation level of the logical line, which in turn is used to determine the grouping of statements.\nThis means that statements which go together must have the same indentation. Each such set of statements is called a block. We will see examples of how blocks are important in later chapters.\nOne thing you should remember is that wrong indentation can give rise to errors. For example:\ni = 5\n# Error below! Notice a single space at the start of the line\n print('Value is', i)\nprint('I repeat, the value is', i)\nWhen you run this, you get the following error:\n  File \"whitespace.py\", line 3\n    print('Value is', i)\n    ^\nIndentationError: unexpected indent\nNotice that there is a single space at the beginning of the second line. The error indicated by Python tells us that the syntax of the program is invalid i.e. the program was not properly written. What this means to you is that you cannot arbitrarily start new blocks of statements (except for the default main block which you have been using all along, of course). Cases where you can use new blocks will be detailed in later chapters such as the control flow.\n\nHow to indent\nUse four spaces for indentation. This is the official Python language recommendation. Good editors will automatically do this for you. Make sure you use a consistent number of spaces for indentation, otherwise your program will not run or will have unexpected behavior.\n\n\n\nNote to static language programmers\nPython will always use indentation for blocks and will never use braces."
  },
  {
    "objectID": "hello.html#video",
    "href": "hello.html#video",
    "title": "Hello World!",
    "section": "Video",
    "text": "Video"
  },
  {
    "objectID": "assignments-14.html",
    "href": "assignments-14.html",
    "title": "Module 14 Assignments",
    "section": "",
    "text": "Programming Problems should be submitted to gradescope.\n\n\nDue date: Tuesday, December 10, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is swap\nIt takes two arguments: a dictionary and a set\nIt swaps the key and value for all of the keys that exist in the dictionary that also exist in the set\nIt does not return anything\n\nTest cases:\n\ndict_data = {'a':'b', 'c':'d', 'e':'f'}\nset_data = {'c', 'e'}\nswap(dict_data, set_data)\nprint(dict_data) # {'a': 'b', 'd': 'c', 'f': 'e'}\n\ndict_data = {23:24, 110:120, 50:45, 70:50, 57:1}\nset_data = {23, 110, 57}\nswap(dict_data, set_data)\nprint(dict_data) # {50: 45, 70: 50, 24: 23, 120: 110, 1: 57}\n\ndict_data = {23:24, 110:120, 50:45, 70:50, 57:1}\nset_data = {100}\nswap(dict_data, set_data)\nprint(dict_data) # {23:24, 110:120, 50:45, 70:50, 57:1}\n\nName the program swap_structures.py. Make sure that gradescope gives you the points for passing the test case.\n\n\n\nDue date: Tuesday, December 10, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is get_elements\nIt two arguments: a dictionary with strings as keys and integers as values, and an integer n\nIt returns a list containing all of the values who fall into at least one of these three categories:\n\nThe corresponding key starts with an upper-case letter\nThe corresponding key ends with an upper-case letter\nThe value is greater than or equal to the second parameter integer\n\n\nTest cases:\n\ndata = {'Alpha':10, 'bravo':25, 'charliE':15, 'dELTa':2}\nprint( get_elements(data, 12) ) # [10, 25, 15]\n\nName the program get_specific.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "assignments-14.html#programming-problem-27",
    "href": "assignments-14.html#programming-problem-27",
    "title": "Module 14 Assignments",
    "section": "",
    "text": "Due date: Tuesday, December 10, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is swap\nIt takes two arguments: a dictionary and a set\nIt swaps the key and value for all of the keys that exist in the dictionary that also exist in the set\nIt does not return anything\n\nTest cases:\n\ndict_data = {'a':'b', 'c':'d', 'e':'f'}\nset_data = {'c', 'e'}\nswap(dict_data, set_data)\nprint(dict_data) # {'a': 'b', 'd': 'c', 'f': 'e'}\n\ndict_data = {23:24, 110:120, 50:45, 70:50, 57:1}\nset_data = {23, 110, 57}\nswap(dict_data, set_data)\nprint(dict_data) # {50: 45, 70: 50, 24: 23, 120: 110, 1: 57}\n\ndict_data = {23:24, 110:120, 50:45, 70:50, 57:1}\nset_data = {100}\nswap(dict_data, set_data)\nprint(dict_data) # {23:24, 110:120, 50:45, 70:50, 57:1}\n\nName the program swap_structures.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "assignments-14.html#programming-problem-28",
    "href": "assignments-14.html#programming-problem-28",
    "title": "Module 14 Assignments",
    "section": "",
    "text": "Due date: Tuesday, December 10, 2024 at 9pm\nWrite a Python function that does the following:\n\nIts name is get_elements\nIt two arguments: a dictionary with strings as keys and integers as values, and an integer n\nIt returns a list containing all of the values who fall into at least one of these three categories:\n\nThe corresponding key starts with an upper-case letter\nThe corresponding key ends with an upper-case letter\nThe value is greater than or equal to the second parameter integer\n\n\nTest cases:\n\ndata = {'Alpha':10, 'bravo':25, 'charliE':15, 'dELTa':2}\nprint( get_elements(data, 12) ) # [10, 25, 15]\n\nName the program get_specific.py. Make sure that gradescope gives you the points for passing the test case."
  },
  {
    "objectID": "assignments-01.html",
    "href": "assignments-01.html",
    "title": "Module 1 Assignments",
    "section": "",
    "text": "Programming Problems should be submitted to gradescope.\nIf you need instructions on how to submit your .py files to gradescope, watch the video at the end of this page.\n\nProgramming Problem 1\nDue date: Tuesday, September 03, 2024 at 9pm\nWrite a python program that prints out the string “Hello World!”. Be careful with capitalization and punctuation. Remember to write code inside a function called main().\nThe exact output of the program should be:\nHello World!\n\nName the program hello.py. Make sure that gradescope gives you the points for passing the test case.\n\n\nProgramming Problem 2\nDue date: Tuesday, September 03, 2024 at 9pm\nWrite a python program that prints out the following excerpt from Amanda Gorman’s poem, “The Hill We Climb”:\nWhen day comes, we ask ourselves, where can we find light in this never-ending shade?\n\nThe loss we carry. A sea we must wade.\nWe braved the belly of the beast.\n\nWe've learned that quiet isn't always peace, \nand the norms and notions of what \"just\" is isn't always justice.\n\nAnd yet the dawn is ours before we knew it.\n\nSomehow we do it.\n\nName the program poem.py. Remember to write code inside a function called main(). Make sure that gradescope gives you the points for passing the test case. You can submit your solution to gradescope as many times as you want before the deadline.\nHINT: print() has a parameter called end which is set as end=\"\\n\" by default – change that to end=\"\" to remove the last newline character.\nMake sure you do the reading for this module, especially the section on Escape Sequences\n\n\nHow to submit to gradescope video"
  }
]