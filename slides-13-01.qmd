---
title: "mutating lists (class slides)"
format: revealjs
slide-number: true
df-print: kable
---

# CSc 110 - mutating lists


## Lists are mutable

* changes to a list in a function will remain after the function finishes running
* changes to individual list elements do not change the list itself

## Changing a list in a loop

Changes to individual list elements do not change the list itself

```{python}
#| echo: true
#| eval: true
numbers = [1, 2, 1, 4, 5]
for n in numbers:
  n += 1
numbers
```

Use a `for i in range` loop instead:

```{python}
#| echo: true
#| eval: true
numbers = [1, 2, 1, 4, 5]
for i in range(len(numbers)):
  numbers[i] += 1
numbers
```

## Write a function

1. Its name is `total_mean`
1. It takes a 2D list of integers as argument with at least one inner list
1. It **mutates** the list, replace each inner list with a tuple. The tuple is the total and mean of that inner list.

```{python}
#| echo: true
#| eval: false
test_list = [[2, 4, 6, 8], [], [2, 3, 4]]
total_mean(test_list)
assert test_list == [(20, 5.0), (None, None), (9, 3.0)]
assert total_mean([[2, 4, 6, 8], [], [2, 3, 4]]) == [(20, 5.0), (None, None), (9, 3.0)]
```


## Write a function -- solution

```{python}
#| echo: true
#| eval: true
def total_mean(lists):
    for i in range(len(lists)): #must use for i in range(len(lists))
        total = None
        mean = None
        if len(lists[i]) > 0: 
            total = 0
            for j in range(len(lists[i])): #can also use for n in lists[i]
                total += lists[i][j]
            mean = total/len(lists[i])
        lists[i] = total, mean #need to use i to mutate lists
    return lists
    
def main():
  test_list = [[2, 4, 6, 8], [], [2, 3, 4]]
  total_mean(test_list)
  assert test_list == [(20, 5.0), (None, None), (9, 3.0)]
  assert total_mean([[2, 4, 6, 8], [], [2, 3, 4]]) == [(20, 5.0), (None, None), (9, 3.0)]
  
main()
```


## Removing elements from a list in a `loop`

Using a `for i in range` when removing items in a list throws an error

```{python}
#| echo: true
#| eval: false
numbers = [1, 2, 1, 4, 5]
for i in range(len(numbers)):
  numbers.pop(i)
numbers
```

ERROR

## Removing elements from a list in a `loop`

Use a `while` loop instead (remember to adjust `i` if doing conditional removal)

```{python}
#| echo: true
#| eval: true
numbers = [1, 2, 1, 4, 5]
i = 0
while i < len(numbers):
  numbers.pop(i)
numbers
```

Or go backwards


```{python}
#| echo: true
#| eval: true
numbers = [1, 2, 1, 4, 5]
for i in range(len(numbers)-1, -1, -1):
  numbers.pop(i)
numbers
```

## Write a function

1. Its name is `remove_names`
1. It takes one argument: a list of strings
1. It `mutates` and `returns` the argument list removing all strings that end in vowel

Name your file as `delete_from_list.py` and submit to Gradescope.

```{python}
#| echo: true
#| eval: false
names = ["Beatrice", "ASA", "Philip", "Anna", "Peter"]
remove_names(names)
assert names == ["Philip", "Peter"]
```

## Write a function -- solution 1

```{python}
#| echo: true
#| eval: true
def remove_names(string_list):
  i = 0
  while i < len(string_list):
    if string_list[i][-1].lower() in "aeiou":
      string_list.pop(i)
    else:
      i += 1
  return string_list
      
def main():
  names = ["Beatrice", "ASA", "Philip", "Anna", "Peter"]
  remove_names(names)
  assert names == ["Philip", "Peter"]

main()
```

## Write a function -- solution 2

```{python}
#| echo: true
#| eval: true
def remove_names(string_list):
  for i in range(len(string_list)-1, -1, -1):
    if string_list[i][-1].lower() in "aeiou":
      string_list.pop(i)
  return string_list
      
def main():
  names = ["Beatrice", "Philip", "Anna", "Peter"]
  remove_names(names)
  assert names == ["Philip", "Peter"]
  print(names) # ["Philip", "Peter"]

main()
```

## Removing elements from inner lists in 2D lists

```{python}
#| echo: true
#| eval: true
lists_of_numbers = [ [2, 3, 1, 2], [4, 5, 2, 1] ]
for inner_list in lists_of_numbers:
  for i in range(len(inner_list)-1, -1, -1):
    inner_list.pop(i)
    
print(lists_of_numbers)
```

## Write a function

1. Its name is `remove_odds`
1. It takes a list of lists of integers as argument
1. It **mutates** the inner list, removing odd numbers

```{python}
#| eval: false
#| echo: true
lists_of_numbers = [ [2, 3, 1, 2], [4, 5, 2, 1] ]
remove_odds(lists_of_numbers)
assert lists_of_numbers == [ [2, 2], [4, 2] ]
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def remove_odds(lists_of_numbers):
  for inner_list in lists_of_numbers:
    for i in range(len(inner_list)-1, -1, -1):
      if inner_list[i] % 2 != 0:
        inner_list.pop(i)
  return lists_of_numbers

def main():
  test_list = [ [2, 3, 1, 2], [4, 5, 2, 1] ]
  remove_odds(test_list)
  assert test_list == [ [2, 2], [4, 2] ]
  print(test_list) # [ [2, 2], [4, 2] ]
  
main()
```

