---
title: "intro to sets (class slides)"
format: revealjs
slide-number: true
df-print: kable
---

# CSc 110 - Intro to Sets

## Data Structures in Python

-   lists (mutable)
-   dictionaries (mutable)
-   tuples (immutable)
-   sets (mutable)

## Lists

-   store:
    -   ordered items (it keeps the original order)
    -   elements of different types
    -   repeated elements
-   use square brackets (`[]`) syntax for creating a list
-   allow indexing (integers starting at `0`) with square brackets (`[]`) as well
-   are **mutable**

## Tuples

-   store:
    -   ordered items  (it keeps the original order)
    -   elements of different types
    -   repeated elements
-   use parentheses (`()`) syntax for creating a tuple
-   allow indexing (integers starting at `0`) with square brackets (`[]`)
-   are **immutable**

## Dictionaries

-   store pairs of items `key: value`
-   keys have to be unique (no repeated keys allowed)
-   use curly brackets (`{}`) with key and value separated by colon (`:`)
-   allow value retrieval through key with square brackets (`[]`)
-   are **mutable**

## Sets

-   A **set** is (another) data structure

-   Helpful ways of thinking about it

    -   A dictionary without the values

    -   A "bag" of elements

## Sets

-   Do not store items in the order you created them

-   Do not allow repeated items to be stored

-   **Cannot** use square brackets to retrieve an item

-   Use `set()` to initiate an empty set

-   Use `for x in set` to iterate over the elements in a set



## Set methods

* `.add(value)` adds an element to the set
* `.discard(value)` discards the specified value

You can also use the operator `in` and the function `len()` with sets 

Use the function `set()` to convert a list to a set, and `list()` to convert a set into a list

## Evaluate the code

```{python}
#| eval: false
#| echo: true
numbers = {5, 7, 10, 5, 3, 5, 9, 8, 20, 5}
numbers  # evaluate what this set holds at this point

numbers.add(30)
numbers  # evaluate what this set holds at this point

numbers.discard(10)
numbers  # evaluate what this set holds at this point
```



## Evaluate the code

```{python}
#| eval: true
#| echo: true
numbers = {5, 7, 10, 5, 3, 5, 9, 8, 20, 5}
numbers
```

```{python}
#| eval: true
#| echo: true
numbers.add(30)
numbers
```


```{python}
#| eval: true
#| echo: true
numbers.discard(10)
numbers
```

## Evaluate the code

```{python}
#| eval: false
#| echo: true
numbers_list = [2, 1, 2, 1, 3, 4, 1]
numbers_list # evaluate this line

numbers_set = set(numbers_list)
numbers_set # evaluate this line

numbers_set.add(1)
numbers_set.add(2)
numbers_set # evaluate this line

numbers_set.add(5)
numbers_set # evaluate this line

numbers_set.discard(6)
numbers_set.discard(1)
numbers_set # evaluate this line
```

## Evaluate the code

```{python}
#| eval: true
#| echo: true
numbers_list = [2, 1, 2, 1, 3, 4, 1]
numbers_list # evaluate this line
```


```{python}
#| eval: true
#| echo: true
numbers_set = set(numbers_list)
numbers_set # evaluate this line
```


```{python}
#| eval: true
#| echo: true
numbers_set.add(1)
numbers_set.add(2)
numbers_set # evaluate this line
```


```{python}
#| eval: true
#| echo: true
numbers_set.add(5)
numbers_set # evaluate this line
```


```{python}
#| eval: true
#| echo: true
numbers_set.discard(6)
numbers_set.discard(1)
numbers_set # evaluate this line
```

## Write a function

1.  Its name is `count_names`
2.  It opens in read mode [a file that contains a name per line](data/names.txt), with repeated names
3.  It counts how many unique names there are in the file
4.  It returns an **integer** with the count
5.  Use a **set** for this

```{python}
#| eval: false
#| echo: true
assert count_names("names.txt") == 11
```

## Write a function -- solution

```{python}
#| eval: false
#| echo: true
def count_names(file_name):
  f = open(file_name, "r")
  name_set = set()
  for line in f:
    name_set.add(line.strip())
  f.close()
  return len(name_set)

def main():
  assert count_names("names.txt") == 11
  
main()
```

# Submit code for attendance

Submit your `count_names` functions to Gradescope for attendance.

Name your file `set_names.py`


## Write a function

1. Its name is `has_duplicates`
1. It takes a variable number of arguments: `*values`
1. It returns `True` if there are repeated elements in `*values`, `False` otherwise

```{python}
#| eval: false
#| echo: true
assert has_duplicates(3, 2, 1, 2, 3) == True
assert has_duplicates(3, 20, 1, 2, 13) == False
```


## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def has_duplicates(*values):
  values_set = set(values)
  return not len(values) == len(values_set)

def main():
  assert has_duplicates(3, 2, 1, 2, 3) == True
  assert has_duplicates(3, 20, 1, 2, 13) == False
  
main()
```