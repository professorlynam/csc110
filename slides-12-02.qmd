---
title: "nested for loops (slides)"
format: revealjs
slide-number: true
df-print: kable
---

# CSc 110 - nested for loops

## 2D lists

```{python}
#| eval: true
#| echo: true
people = [["Ana", 34, "B"],
          ["Peter", 23, "A"]]
```

How to retrieve first name `"Ana"`?

How to retrieve first name `"Peter"`?

How to retrieve integer `23`?

## 2D lists

```{python}
#| eval: true
#| echo: true
people = [["Ana", 34, "B"],
          ["Peter", 23, "A"]]
```

How to retrieve first name `"Ana"`?

```{python}
#| eval: true
#| echo: true
people[0][0]
```

How to retrieve first name `"Peter"`?

```{python}
#| eval: true
#| echo: true
people[1][0]
```

How to retrieve integer `23`?

```{python}
#| eval: true
#| echo: true
people[1][1]
```

## Nested `for` loops

```{python}
#| eval: true
#| echo: true
people = [["Ana", 34, "B"],
          ["Peter", 23, "A"]]
          
for i in range(len(people)):
  for j in range(len(people[i])):
    print(people[i][j])
```

## Write a function

It returns the highest value among all the numbers in the list.

Test cases
```{python}
#| eval: false
#| echo: true
assert nested_max([[], []]) == None
assert nested_max([[1, 2, 3, 2, 1],
                   [2, 3, 2, 1, 5],
                   [0, 1]]) == 5
```

## Write a function -- solution
```{python}
#| eval: true
#| echo: true
def nested_max(lists):
  max = None
  for i in range(len(lists)):
    for j in range(len(lists[i])):
      if max == None or lists[i][j] > max:
        max = lists[i][j]
  return max

def main():
  assert nested_max([[], []]) == None
  assert nested_max([[1, 2, 3, 2, 1],
                     [2, 3, 2, 1, 5],
                     [0, 1]]) == 5
  print("Passed all tests")
main()
```


## Loop Table

```{python}
#| eval: false
#| echo: true
def nested_max(lists):
  max = None
  for i in range(len(lists)):
    for j in range(len(lists[i])):
      if max == None or lists[i][j] > max:
        max = lists[i][j]
  return max

max_nested([[], [], [2, 1], [0, 5])
```

Draw a loop table with:

* values of `i`, `j`,`len(lists[i])`, `lists[i][j]`, and `max` for each nested loop iteration
* Hint: both values of `j` and `lists[i][j]` are `"-"` if an inner list is empty 

## Loop Table -- solution


```{python}
#| eval: false
#| echo: true
max_nested([[], [], [2, 1], [0, 5])
```

```{r}
#| eval: true
#| echo: false
#| warning: false
#| message: false
library(knitr)
library(tidyverse)
library(huxtable)
df <- data.frame(a = c("0", "1", "2", "2", "3", "3"),
           b = c("-", "-", "0", "1", "0", "1"),
           c = c("0", "0", "2", "2", "2", "2"),
           d = c("-", "-", "2", "1", "0", "5"),
           e = c("None", "None", "2", "2", "2", "5"))

colnames(df) <-  c("i", "j", "len(lists[i])", "lists[i][j]", "max")

as_hux(df, add_colnames = TRUE) %>%
      set_right_border(1:7, everywhere, 0.4) %>%
      set_left_border(1:7, everywhere, 0.4) %>%
      set_top_border(1:7, everywhere, 0.4) %>% 
      set_bottom_border(1:7, everywhere, 0.4)
```

## Read solution: correct or not?

```{python}
#| eval: false
#| echo: true
def max_list(numbers):
  max = None
  for n in numbers:
    if max == None or n > max:
      max = n
  return max

def nested_max(lists):
  max = None
  for i in range(len(lists)):
    max_of_sublist = max_list(lists[i])
    if max == None or  max_of_sublist > max:
      max = max_of_sublist
  return max

def main():
  assert nested_max([[1, 2, 3, 2, 1],
                     [],
                     [5, 1]]) == 5

main()
```

## Write a function

It returns the lowest number in all inner lists.

Test cases:
```{python}
#| eval: false
#| echo: true
assert nested_min([[], []]) == None
assert nested_min([[1, 2, 3, 2, 1],
                   [2, 3, 2, 1, 5],
                   [0, 1]]) == 0
```

## Write a function -- solution


```{python}
#| eval: true
#| echo: true
def nested_min(lists):
  min = None
  for i in range(len(lists)):
    for j in range(len(lists[i])):
      if min == None or lists[i][j] < min:
        min = lists[i][j]
  return min

def main():
  assert nested_min([[], []]) == None
  assert nested_min([[1, 2, 3, 2, 1],
                     [2, 3, 2, 1, 5],
                     [0, 1]]) == 0
  print("Passed all tests")
main()
```

## Quiz 09

<center>
<div class="cleanslate w24tz-current-time w24tz-large" style="display: inline-block !important; visibility: hidden !important; min-width:300px !important; min-height:145px !important;"><a href="//24timezones.com/Tucson/time" style="text-decoration: none" class="clock24" id="tz24-1695057604-c1393-eyJob3VydHlwZSI6IjEyIiwic2hvd2RhdGUiOiIwIiwic2hvd3NlY29uZHMiOiIwIiwiY29udGFpbmVyX2lkIjoiY2xvY2tfYmxvY2tfY2I2NTA4ODZjNDg0OWVlIiwidHlwZSI6ImRiIiwibGFuZyI6ImVuIn0=" title="World Time :: Tucson" target="_blank" rel="nofollow"></a>current time<div id="clock_block_cb650886c4849ee"></div></div>
<script type="text/javascript" src="//w.24timezones.com/l.js" async></script>
</center>

You have 10 minutes to complete the quiz.


## Mutate nested lists

In addition to retrieving a value from nested lists, we can also mutate a value in a sublist.

```{python}
#| eval: true
#| echo: true
people = [["Ana", 24, "B"],
          ["Peter", 23, "A"]]
people
```


```{python}
#| eval: true
#| echo: true
people[0][1] = 54
people
```

## Write a function

It mutates the sublist items by multiplying each number in each sublist by 2 and returns the argument list.

Test cases
```{python}
#| eval: false
#| echo: true
assert double_nested([[], []]) == [[], []]
assert double_nested([[1, 2, 3, 2, 1],
                     [0, 1]]) == [[2, 4, 6, 4, 2],
                                  [0, 2]]
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def double_nested(lists):
  for i in range(len(lists)):
    for j in range(len(lists[i])):
      lists[i][j] *= 2
  return lists

def main():
  assert double_nested([[], []]) == [[], []]
  assert double_nested([[1, 2, 3, 2, 1],
                        [0, 1]]) == [[2, 4, 6, 4, 2],
                                     [0, 2]]
  print("Passed all tests")
main()
```


## Write a function

It mutates the sublist items by reversing each string (use `string[::-1]` to reverse it) and returns the argument list.

Name file `reverse_strings.py` and submit your attendance.

Test cases:

```{python}
#| eval: false
#| echo: true
assert reverse_strings_nested([["desserts", "raw", "live"],
                               ["smart", "knits"]]) == [["stressed", "war", "evil"],
                                                        ["trams", "stink"]]
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def reverse_strings_nested(strings):
  for i in range(len(strings)):
    for j in range(len(strings[i])):
      strings[i][j] = strings[i][j][::-1]
  return strings

def main():
  original_strings = [["desserts", "raw", "live"],
                      ["smart", "knits"]]
  reverse_strings_nested(original_strings)   
  assert  original_strings == [["stressed", "war", "evil"],
                               ["trams", "stink"]]
  
  print(original_strings)
  
main()
```

