---
title: "for loops -- iterating over items (class slides)"
format: revealjs
slide-number: true
df-print: kable
---

# CSc 110 - the other type of `for` loop

## Review of `for in range():`

```{python}
#| echo: true
#| eval: true
for n in range(5):
  print(n)
```

```{python}
#| echo: true
#| eval: true
numbers = [2, 1, 4, 6, 23, 2]
for i in range(len(numbers)):
  print(numbers[i])
```

## Introducing `for x in list:`

```{python}
#| echo: true
#| eval: true
numbers = [2, 1, 4, 6, 23, 2]
for n in numbers:
  print(n)
```

## Write a function

1.  Its name is `count_vowels`
2.  It takes a `string` argument
3.  It creates a `dictionary`
4.  It returns the `dictionary` with the count of every lowercase vowel in `string`

```{python}
#| eval: false
#| echo: true
assert count_vowels("") == {"a": 0, "e": 0, "i": 0, "o": 0, "u": 0}
assert count_vowels("banana") == {"a": 3, "e": 0, "i": 0, "o": 0, "u": 0}
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def count_vowels(string):
  counts = {"a": 0, "e": 0, "i": 0, "o": 0, "u": 0}
  for char in string:
    if char in counts:
      counts[char] += 1
  return counts

def main():
  assert count_vowels("") == {"a": 0, "e": 0, "i": 0, "o": 0, "u": 0}
  assert count_vowels("banana") == {"a": 3, "e": 0, "i": 0, "o": 0, "u": 0}
  print("Passed all tests.")
  
main()
    
```

## Write a function

1.  Its name is `count_chars`
2.  It takes a `string` argument
3.  It creates a `dictionary`
4.  It returns the `dictionary` with the count of every characters in `string`

```{python}
#| eval: false
#| echo: true
assert count_chars("") == {}
assert count_chars("banana") == {"b": 1, "a": 3, "n": 2}
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def count_chars(string):
  counts = {}
  for char in string:
    if char in counts:
      counts[char] += 1
    else:
      counts[char] = 1
      
  return counts

def main():
  assert count_chars("") == {}
  assert count_chars("banana") == {"b": 1, "a": 3, "n": 2}
  print("Passed all tests.")

main()
```

## Write a function

1. Its name is `tally_negatives`
1. It takes a list of `numbers` as argument
1. It returns a dictionary that maps each negative value in `numbers` to its frequency in `numbers`

Test cases:

```{python}
#| eval: false
#| echo: true
assert  tally_negatives([1, -2, 0, -4, -2]) == {-2: 2, -4: 1}
assert tally_negatives([]) == {}
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def tally_negatives(numbers):
  tally = {}
  for n in numbers:
    if n < 0:
      if n not in tally:
        tally[n] = 0
      tally[n] += 1
  return tally

def main():
  assert  tally_negatives([1, -2, 0, -4, -2]) == {-2: 2, -4: 1}
  assert tally_negatives([]) == {}
  print("Passed all tests.")
  
main()
```

## What happens when we do `for k in dictionary:`

```{python}
#| eval: true
#| echo: true
scores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}
for key in scores:
  print(key)
```

## Methods for dictionaries

We can use `.values()` to get only the values in a dictionary:

```{python}
#| eval: true
#| echo: true
scores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}
scores.values()
```

We can use `.keys()` to get only the keys in a dictionary:

```{python}
#| eval: true
#| echo: true
scores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}
scores.keys()
```

We can use `.items()` to get tuples for keys and values:

```{python}
#| eval: true
#| echo: true
scores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}
scores.items()
```

## `for x in list`

```{python}
#| eval: true
#| echo: true
scores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}
for value in scores.values():
  print(value)
```


```{python}
#| eval: true
#| echo: true
scores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}
for key in scores.keys():
  print(key)
```

## `for key, value in dictionary.items()`

```{python}
#| eval: true
#| echo: true
scores = {'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}
for key, value in scores.items():
  print(key, value)
```


## Write a function

1. Its name is `keys_and_values`
1. It takes a `dictionary` as argument
1. It returns a list with all the keys and values in the `dictionary`

Test cases:

```{python}
#| eval: false
#| echo: true
assert keys_and_values({'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}) == \
    ['A', 10, 'B', 25, 'C', 27, 'D', 10, 'E', 5]
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def keys_and_values(dictionary):
  new_list = []
  for key, value in dictionary.items():
    new_list.append(key)
    new_list.append(value)
  return new_list

def main():
  assert keys_and_values({'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}) == ['A', 10, 'B', 25, 'C', 27, 'D', 10, 'E', 5]
  
main()
```

## Write a function

1. Its name is `merge_dictionaries`
1. It takes two arguments: `dict_1` and `dict_2`
1. It mutates `dict_1`, by adding to it all key-values pairs in `dict_2`
1. If a key is in both dictionaries, the values are added
1. Don't use `.update()`

Test cases:

```{python}
#| echo: true
#| eval: false
dict_1 = {"a": 20, "e": 5}
dict_2 = {"e": 10, "i": 2}
assert merge_dictionaries(dict_1, dict_2) == {"a": 20, "e": 15, "i": 2}
```

## Write a function -- solution

```{python}
#| echo: true
#| eval: true
def merge_dictionaries(dict_1, dict_2):
  for key, value in dict_2.items():
    if key in dict_1:
      dict_1[key] += value
    else:
      dict_1[key] = value
  return dict_1
      
def main():
  dict_1 = {"a": 20, "e": 5}
  dict_2 = {"e": 10, "i": 2}
  assert merge_dictionaries(dict_1, dict_2) == {"a": 20, "e": 15, "i": 2}
  
main()
```

# Submit code for attendance

Submit your `merge_dictionaries` functions to Gradescope for attendance.

Name your file `two_dictionaries.py`
