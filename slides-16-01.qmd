---
title: "final exam review (slides)"
format: revealjs
slide-number: true
df-print: kable
---


# CSC -- Final exam review


## Announcements

Final exam 

-   Time: this Friday Dec 13, **6:00 - 8:00pm** 

-   Location: **S SCI 100**

-   Bring your photo ID


# Review of strings

## string methods

-   string is not mutable, means every string method will return a new string

-   indexing a string

```{python}
#| eval: true
#| echo: true
("Jimmy42"[0], "Jimmy42"[-1])
```

-   slicing a string

```{python}
#| eval: true
#| echo: true
("Jimmy42"[:2], "Jimmy42"[1:3])
```
## string methods

-   `.isnumeric()` returns True if all the chars are numeric (0-9)

```{python}
#| eval: true
#| echo: true
("Jimmy42".isnumeric(), "42".isnumeric())
```

-   `.lower()` returns a string with all lowercase chars

-   `.strip()` removing chars in the beginning or end

```{python}
#| eval: true
#| echo: true
"Jimmy42".strip('42')
```

-   `.split()` return a list by splitting strings by char

```{python}
#| eval: true
#| echo: true
"Jimmy42Jimmy42Jimmy".split('42')
```

## string: concatenation

-   [age_milestones()](slides-04-02.html#/write-a-function-1)

-   [four_letter_anagram()](slides-05-02.html#/write-a-function)

-   [remove_vowels_string()](slides-07-01.html#/write-two-functions)

-   [every_two_together()](slides-07-02.html#/write-a-function-2)

-   [write_word_count()](slides-09-02.html#/write-two-functions)

-   [concatenate()](slides-10-02.html#/variable-length-parameter-2)

-   [censor_consonants()](slides-14-01.html#/write-functions-side-by-side-1)


## int() 

`int` on "110":
```{python}
#| eval: true
#| echo: true
int("110") # 110
```

`int` on "CSC110":
```{python}
#| eval: false
#| echo: true
int("CSC110") # Error
```

Use case: use `int()` to convert `"2"` to `2` when reading and summing the number 2 from a .txt file.

## string.isnumeric()

`.isnumeric()` on "110":
```{python}
#| eval: true
#| echo: true
"110".isnumeric() 
```

`.isnumeric()` on "CSC110":
```{python}
#| eval: true
#| echo: true
"csc110".isnumeric() 
```

## Evaluate code

Evaluate last line:
```{python}
#| eval: false
#| echo: true
numbers = (1000, 1, 2, 3)
numbers.add(4)
print(numbers[0]) 
```

## Evaluate code - answer

Evaluate last line:
```{python}
#| eval: false
#| echo: true
numbers = (1000, 1, 2, 3)
numbers.add(4)
print(numbers[0]) # Error
```

Correct: `Error` (code won't proceed to last line)

Incorrect: `1000` 

## Write to file - compare difference

version 1:
```{python}
#| eval: false
#| echo: true
words = ['quick', 'brown', 'fox']
output = open("result.txt", "w")
for w in words:
  output.write(w + ' ')
output.close()
```

version 2:
```{python}
#| eval: false
#| echo: true
words = ['quick', 'brown', 'fox']
output = open("result.txt", "w")
for w in words:
  output.write(w + '\n')
output.close()
```

## write a function

Write a python function that does the following:

1. Its name is `create_list`

2. It takes two arguments, a set of strings and an integer n

3. It returns a list that contains each string from the set repeated n times

```{python}
#| eval: false
#| echo: true
items = {"banana", "apple", "pear"}
print(create_list(items, 2)) 
# order does not matter
# ['banana', 'banana', 'apple', 'apple', 'pear', 'pear']
```

## write a function - solution

```{python}
#| eval: true
#| echo: true
def create_list(items, n):
  new_list = [ ]
  for value in items:
    new_list.extend([value] * n)
  return new_list

def main():
  items = {"banana", "apple", "pear"}
  print(create_list(items, 2))  
  
main()
```

## write a function

1.  Its name is `maximum`
2.  It takes a variable number of arguments: `*values`
3.  It returns the highest value in `values`

```{python}
#| eval: false
#| echo: true
assert maximum(1) == 1
assert maximum(2,4,6) == 6
assert maximum() == None
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def maximum(*values):
  max = None
  for v in values:
    if max == None or v > max:
      max = v
  return max

def main():
  assert maximum(1) == 1
  assert maximum(2,4,6) == 6
  assert maximum() == None

main()
```

Can we change the order of `max == None` and `v > max`? 

No we CANNOT. Try it on your own laptop.

## More concepts

-   loop table (1D and 2D lists)

-   sorting (number of sweeps and swaps)

-   string methods

    * iterate string

-   data structures and their mutability

    * iterate data structures
  
    * if conditions
    
-   reading, aggregating or writing to files   




