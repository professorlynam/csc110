---
title: "final exam review (slides)"
format: revealjs
slide-number: true
df-print: kable
---


# CSC -- Final exam review


## Announcements

Final exam 

-   1pm: Monday May 12, **1:00 - 3:00pm**,  **GITT 129B**

-   2pm: Friday May 09, **1:00 - 3:00pm**,  **GITT 129B**

-   Bring your photo ID


# Review of strings

## string methods

-   string is not mutable, means every string method will return a new string

-   indexing a string

```{python}
#| eval: true
#| echo: true
("Jimmy42"[0], "Jimmy42"[-1])
```

-   slicing a string

```{python}
#| eval: true
#| echo: true
("Jimmy42"[:2], "Jimmy42"[1:3])
```

## string methods

-   `.isnumeric()` returns True if all the chars are numeric (0-9)

```{python}
#| eval: true
#| echo: true
("Jimmy42".isnumeric(), "42".isnumeric())
```

-   `.lower()` returns a string with all lowercase chars

-   `.strip()` removing chars in the beginning or end

```{python}
#| eval: true
#| echo: true
"Jimmy42".strip('42')
```

-   `.split()` return a list by splitting strings by char

```{python}
#| eval: true
#| echo: true
"Jimmy42Jimmy42Jimmy".split('42')
```

## string: concatenation

-   [age_milestones](slides-04-02.html#/write-a-function-1)

-   [four_letter_anagram](slides-05-02.html#/write-a-function)

-   [remove_vowels_string](slides-07-01.html#/write-two-functions)

-   [every_two_together](slides-07-02.html#/write-a-function-2)

-   [write_word_count](slides-09-02.html#/write-two-functions)

-   [concatenate](slides-10-02.html#/variable-length-parameter-2)

-   [censor_consonants](slides-14-01.html#/write-functions-side-by-side-1)


## string: iteration

-   [is_numeric](slides-05-02.html#/write-a-function-1)

-   [count_vowels](slides-05-03.html#/write-a-function-1)

-   [vowels_only](slides-05-03.html#/write-a-function-4)

-   [remove_vowels_string](slides-07-01.html#/write-two-functions)

-   [indices_of_vowels](slides-07-01.html#/write-a-function-1)

-   [count_chars](slides-08-01.html#/write-a-function-1)

-   [censor_consonants](slides-14-01.html#/write-functions-side-by-side-1)

# Review of lists

## list methods

-   `list[index] = value` mutate a list value using index

-   `.append(value)` append an item to the end of a list

-   `.insert(index, value)` insert a value at index

-   `.pop(index)` remove an item at index

-   `.remove(value)` remove a value

-   `list[index_a:index_b]` [list slicing](slides-06-01.html?q=slici#/slicing-lists)

-    2D lists

## list: iterate with mutation

-   [double](slides-06-01.html#/write-a-function-1)

-   [make_even](slides-07-01.html#/write-a-function)

-   [make_all_even](slides-07-02.html#/write-a-function-solution)

-   [max_list](slides-08-02.html#/write-a-function-4)

-   [total_mean](slides-13-01.html#/write-a-function)

-   [remove_names](slides-13-01.html#/write-a-function-1)

-   [remove_odds](slides-13-01.html#/write-a-function-2)

-   [replace_consonants](slides-14-01.html#/write-functions-side-by-side-1)

## list: iterate without mutation


-   [max_list](slides-06-01.html#/max-of-list-solution)

-   [sum_all](slides-06-01.html?q=sum_all#/write-a-function)

-   [every_two_together](slides-07-02.html#/write-a-function-2)

-   [every_two](slides-07-02.html#/write-a-function-3)

-   [count_words](slides-09-01.html#/write-a-function-2)

-   [descr_stats](slides-10-01.html#/write-a-function)

-   [flatten](slides-11-01.html#/write-a-function)

-   [get_highest_average](slides-11-01.html#/write-a-function-1)


# Review of dictionaries

## dictionary methods

-   `dict[key] = value` mutate a value using key

-   `dict[key] = value` add a new key-value pair

-   `dict.pop(key)` remove a key-value pair using key

-   `for k in dict:` iterate only the keys

-   `for v in dict.values():` iterate only the values

-   `for k, v in dict.items():` iterate both

## dictionary: iterate with mutation

## dictionary: iterate with mutation

## write a function

Write a python function that does the following:

1. Its name is `create_list`

2. It takes two arguments, a set of strings and an integer n

3. It returns a list that contains each string from the set repeated n times

```{python}
#| eval: false
#| echo: true
items = {"banana", "apple", "pear"}
print(create_list(items, 2)) 
# order does not matter
# ['banana', 'banana', 'apple', 'apple', 'pear', 'pear']
```

## write a function - solution

```{python}
#| eval: true
#| echo: true
def create_list(items, n):
  new_list = [ ]
  for value in items:
    new_list.extend([value] * n)
  return new_list

def main():
  items = {"banana", "apple", "pear"}
  print(create_list(items, 2))  
  
main()
```

## write a function

1.  Its name is `maximum`
2.  It takes a variable number of arguments: `*values`
3.  It returns the highest value in `values`

```{python}
#| eval: false
#| echo: true
assert maximum(1) == 1
assert maximum(2,4,6) == 6
assert maximum() == None
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def maximum(*values):
  max = None
  for v in values:
    if max == None or v > max:
      max = v
  return max

def main():
  assert maximum(1) == 1
  assert maximum(2,4,6) == 6
  assert maximum() == None

main()
```

Can we change the order of `max == None` and `v > max`? 

No we CANNOT. Try it on your own laptop.

## More concepts

-   loop table (1D and 2D lists)

-   sorting (number of sweeps and swaps)

-   string methods

    * iterate string

-   data structures and their mutability

    * iterate data structures
  
    * if conditions
    
-   reading, aggregating or writing to files   




