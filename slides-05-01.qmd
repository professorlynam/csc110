---
title: "string manipulation (class slides)"
format: revealjs
slide-number: true
---

# CSc 110 - String Manipulation

## Announcements

* Midterm grades will be published Monday morning
* Project 2 due Wednesday (September 27)
* Quiz 05 is about Module 4

![Midterm 1 Bonus Question](images/midterm1bonus.gif)

## String indexing

-   Strings are sequences in Python
-   We can retrieve values in a sequence using `[ ]`

```{python}
#| echo: true
#| eval: true
name = "Adriana"
name[0]
```

Note that the first index in a sequence is always `zero`.

## String indexing

Since the first index of a sequence is `zero`, the last index is going to be the length of the string `minus 1`

```{python}
#| echo: true
#| eval: true
name = "Adriana"
len(name)
```

```{python}
#| echo: true
#| eval: true
name = "Adriana"
name[6]
```

```{python}
#| echo: true
#| eval: false
name = "Adriana"
name[7] # this will throw an error
```

## Evaluate expressions

```{python}
#| echo: true
#| eval: false
my_str = "Clint Eastwood"
my_str[11] + my_str[1] + my_str[13]

my_str = "cider"
my_str[0] + my_str[4] + my_str[1] + my_str[3] + my_str[2]

my_str = "dusty"
my_str[2] + my_str[3] + my_str[1] + my_str[0] + my_str[4]
```

## Evaluate expressions

```{python}
#| echo: true
#| eval: true
my_str = "Clint Eastwood"
my_str[11] + my_str[1] + my_str[13]
```

```{python}
#| echo: true
#| eval: true
my_str = "cider"
my_str[0] + my_str[4] + my_str[1] + my_str[3] + my_str[2]
```

```{python}
#| echo: true
#| eval: true
my_str = "dusty"
my_str[2] + my_str[3] + my_str[1] + my_str[0] + my_str[4]
```

## Write a function

1.  Its name is `four_letter_anagram`
2.  Its parameters are a `string`, and four integers `a`, `b`, `c` and `d`
3.  It returns the anagram of the string according to the indices `a`, `b`, `c` and `d` -- concatenate the individual characters
4.  Test case: `four_letter_anagram("balm", 2, 1, 3, 0)` should return `lamb`

## Write a function - solution + add to it

Add the following test cases to the code below:

-   `loin` returns `lion`
-   `lugs` returns `slug`
-   `reap` returns `pear`


```{python}
#| echo: true
#| eval: true
def four_letter_anagram(word, a, b, c, d):
  return word[a] + word[b] + word[c] + word[d]

def main():
  print( four_letter_anagram("balm", 2, 1, 3, 0) )

main()
```

# Submit code for attendance


Submit your `four_letter_anagram` function to Gradescope for attendance.

Name your file `anagram.py`

## `in` operator

The `in` operator determines whether a given value is a constituent element of a sequence (such as a string)

```{python}
#| eval: true
#| echo: true
"a" in "Adriana"
```

```{python}
#| eval: true
#| echo: true
"ana" in "Adriana"
```

```{python}
#| eval: true
#| echo: true
"i" in "aeiou"
```

## Evaluate the expressions

```{python}
#| eval: false
#| echo: true
"a" in "aeiou"
"b" in "aeiou"
not "b" in "aeiou"
"0" in "0987654321."
"10.0" in  "0987654321."
```

## Evaluate the expressions

```{python}
#| eval: true
#| echo: true
"a" in "aeiou"
```


```{python}
#| eval: true
#| echo: true
"b" in "aeiou"
```


```{python}
#| eval: true
#| echo: true
not "b" in "aeiou"
```


```{python}
#| eval: true
#| echo: true
"0" in "0987654321."
```


```{python}
#| eval: true
#| echo: true
"10.0" in  "0987654321."
```
