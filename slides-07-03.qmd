---
title: "random (class slides)"
format: revealjs
slide-number: true
df-print: kable
---

# CSC 110 -- Generating Random Numbers and Other Important Functions and Methods

## Announcements


## random module

Remember to `import` the module `random`

What do the functions `.random()` and `.randint()` return?

```{python}
#| echo: true
import random

n = random.random()
print(n)

n = random.randint(0, 9)
print(n)
```

## Write a function

1. Function name is `pick_winner`
1. It takes a list as argument
1. It generates a random index, and returns the item at that position

```{python}
#| eval: false
#| echo: true
winner = pick_winner(["Peter", "Joan", "Mary", "June"])
print(winner)
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
import random

def pick_winner(names):
  index = random.randint(0, len(names) - 1)
  return names[index]

if __name__ == "__main__":
  winner = pick_winner(["Peter", "Joan", "Mary", "June"])
  print(winner)
```

## Setting a seed 

What happens when you run `pick_winner` multiple times?

To get always the same result (for autograding purposes, for example) we can set a seed.

```{python}
#| eval: true
#| echo: true
import random

def pick_winner(names):
  index = random.randint(0, len(names) - 1)
  return names[index]

if __name__ == "__main__":
  random.seed(42)
  winner = pick_winner(["Peter", "Joan", "Mary", "June"])
  print(winner)
```

## Write a function

1. Function name is `pick_winners`
1. It takes a list as argument
1. It generates `n-2` random indices, and returns a new list with the items at those positions in the original argument list -- make sure to remove names that have already been selected

```{python}
#| eval: false
#| echo: true
winner = pick_winners(["Peter", "Joan", "Mary", "June"])
print(winner) # it prints out a list of two items
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
import random

def pick_winners(names):
  new_list = []
  for i in range(len(names)-2): # note how i here just controls how many iterations
    index = random.randint(0, len(names) - 1)
    new_list.append(names[index])
    names.pop(index)
  return new_list

if __name__ == "__main__":
  random.seed(42)
  winners = pick_winners(["Peter", "Joan", "Mary", "June"])
  print(winners)
```

## ASCII

ASCII stands for American Standard Code for Information Interchange, and it represents all characters in English. Nowadays we usually use `UTF-8` encoding instead os ASCII because we use more characters (emojis, for example).

Check the [ascii table](ascii-table.html) that contains the main characters in English.

## `ord()` function

You can use the `ord()` function with a single character (that is, a string of length 1) to get the decimal value of that character. Check the [ascii table](ascii-table.html) that contains the main characters in English.

 
```{python}
#| echo: true
#| eval: true
ord("A")
```

## Write a function

1. Function name is `pick_winners`
1. It takes a list as argument
1. It generates `n-2` random indices, and returns a new list with the items at those positions in the original argument list -- make sure to remove names that have already been selected
1. It only selects names that start with a lowercase character (use the built-in function `ord()`).

```{python}
#| eval: false
#| echo: true
winner = pick_winners(["peter", "Joan", "mary", "June", "john"])
print(winner) # it prints out a list of two items
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
import random

def pick_winners(names):
  new_list = []
  while len(new_list) < 2 and len(names) > 0:
    index = random.randint(0, len(names) - 1)
    if 97 <= ord(names[index][0]) <= 122:
      new_list.append(names[index])
    names.pop(index)
  return new_list

if __name__ == "__main__":
  random.seed(42)
  winners = pick_winners(["peter", "Joan", "mary", "June", "john"])
  print(winners)
```

## `.isupper()` and `.islower()` string methods

`.isupper()` is a string method that returns `True` if all the characters in the string are in upper case, otherwise it returns `False`.

`.islower()` is checks for lowercase
