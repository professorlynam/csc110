---
title: "while loops (class slides)"
format: revealjs
slide-number: true
---

# CSc 110 - while loops

## Announcements

* Midterm grades are posted on Gradescope and D2L
* Meet 1:1 with TA to review your midterm and ask questions (check-in) -- a TA will be contacting you by email (0.5 extra credit to meet with your TA)
* Due dates for next two prog problems pushed to Oct 5
* Our next midterm is on October 25
* The final exam will take place in [ENR2](https://maps.app.goo.gl/RiDaC9Np7M8LVPYZ7) N120 on December 14, 6-8pm


## Quiz 05

You have 10 minutes to complete the quiz

* No need for comments
* No need for a `main()`
* No need to print test cases
* Just write your function and what's inside the function

Built-in functions you can use: `round()`, `input()`, `float()`, `str()`, `int()` — you don’t have to use these at all

## Before we proceed, a refresher ...

Remember the string method`.isnumeric()`?

```{python}
#| eval: true
#| echo: true
user_input = "paul"
user_input.isnumeric()
```

```{python}
#| eval: true
#| echo: true
user_input = "12"
user_input.isnumeric()
```

```{python}
#| eval: true
#| echo: true
user_input = "12.5"
user_input.isnumeric()
```

## Write your own `is numeric` for one character

Write a Python function that does the following:

1.  Its name is `is_numeric_one_char`
2.  It takes one `string` argument of length of 1 (check if argument is valid with `len()`)
3.  It returns `True` if the argument is a digit (0-9), `False` otherwise (use the `in` operator)

```{python}
#| echo: true
#| eval: false
print( is_numeric_one_char("0") ) # True
print( is_numeric_one_char("000") ) # False
print( is_numeric_one_char("9") ) # True
print( is_numeric_one_char("a") ) # False
```

## Write a function -- solution

```{python}
#| echo: true
#| eval: true
def is_numeric_one_char(char):
  if len(char) > 1:
    return False
  
  return char in "0123456789"

def main():
  print( is_numeric_one_char("0") ) # True
  print( is_numeric_one_char("000") ) # False
  print( is_numeric_one_char("9") ) # True
  print( is_numeric_one_char("a") ) # False
  
main()
```


## Write a `is_numeric()` for any string length

1.  Its name is `is_numeric`
2.  It takes one `string` argument of any length
3.  It returns `True` if the **first character** of the argument is a digit (0-9), `False` otherwise (remember to use `[ ]` to index the string and the `in` operator)

Test cases:

```{python}
#| echo: true
#| eval: false
print( is_numeric("0") ) # True
print( is_numeric("000") ) # True
print( is_numeric("9") ) # True
print( is_numeric("a") ) # False
```

## Write a function -- solution

```{python}
#| echo: true
#| eval: true
def is_numeric(char):
  return char[0] in "0123456789"

def main():
  print( is_numeric("0") ) # True
  print( is_numeric("000") ) # True
  print( is_numeric("9") ) # True
  print( is_numeric("a") ) # False
  
main()
```

## Improving on `is_numeric()`

What if we want to check every character in a string of any length?

What if the string is of length `2` or `5` or `45`?

## While loops

-   A **while** loop allows a programmer to repeat code
-   You can think of it as an if-statement with the potential to repeat

```{python}
#| eval: false
#| echo: true
statements . . .

while conditionA:
    statementA
    statementB
    . . .
    statementN

statements . . .
```

## What will happen?

```{python}
#| eval: false
#| echo: true
number = 15
while number < 50:
    print('number is less than 50')
```

## While loops

-   What if the condition never evaluates to `False`?
    -   Infinite loop!
-   There are two ways around this:
    -   Break (do not use in this class!)
    -   Designing the code such that the condition will eventually become `False`

## What will happen?

To ensure our condition (`number < 50`) will eventually be evaluated as `False`, we need to updated `number` inside our loop:

```{python}
#| eval: false
#| echo: true
number = 15
while number < 50:
    print('number is less than 50')
    number += 1
```

## While loops -- visualization

Go to [Python Tutor](https://pythontutor.com/visualize.html#mode=edit) to visualize how the `while` loop runs.

## While loops -- using an index

-   One technique that can be used to control the number of loop iterations is using an index variable
-   For while loops, an index variable is:
    -   Defined before the loop
    -   Used in the condition of the loop
    -   Incremented within the loop

## While loops -- using an index

```{python}
#| eval: true
#| echo: true
index = 0
while index < 5:
    print('Print ' + str(index))
    # Can add other lines here too
    index = index + 1
```

```{python}
#| eval: true
#| echo: true
index = 5
while index > 0:
    print('Print ' + str(index))
    # Can add other lines here too
    index = index - 1
```

## Improve on your `is_numeric()`

1.  Its name is `is_numeric`
2.  It takes one `string` argument of any length
3.  It returns `True` if every character in the argument is a digit (0-9), `False` otherwise
4.  Remember to use `[ ]` to index the string, use a while loop with a  `len()` condition, and an index -- something like `string[index]` with index being updated inside a `while` loop

```{python}
#| echo: true
#| eval: false
print( is_numeric("0") ) # True
print( is_numeric("1090") ) # True
print( is_numeric("95") ) # True
print( is_numeric("10a") ) # False
```

## `is_numeric()` solution


```{python}
#| eval: true
#| echo: true
def is_numeric(my_string):
  index = 0
  while index < len(my_string):
    if my_string[index] not in "0123456789":
      return False
    index += 1
  return True

def main():
  print( is_numeric("234") ) # True
  print( is_numeric("abc") ) # False
  print( is_numeric("12c") ) # False
  print( is_numeric("12.3") ) # False
  
main()
```


## `is_numeric()` solution

How do we change our function so that the last test case ("12.3") returns `True` instead?

```{python}
#| eval: true
#| echo: true
def is_numeric(my_string):
  index = 0
  while index < len(my_string):
    if my_string[index] not in "0123456789":
      return False
    index += 1
  return True

def main():
  print( is_numeric("234") ) # True
  print( is_numeric("abc") ) # False
  print( is_numeric("12c") ) # False
  print( is_numeric("12.3") ) # False
  
main()
```

## `is_numeric()` solution

How do we change our function so that the last test case ("12.3") returns `True` instead?

```{python}
#| eval: true
#| echo: true
def is_numeric(my_string):
  index = 0
  while index < len(my_string):
    if my_string[index] not in "0123456789.":
      return False
    index += 1
  return True

def main():
  print( is_numeric("234") ) # True
  print( is_numeric("abc") ) # False
  print( is_numeric("12c") ) # False
  print( is_numeric("12.3") ) # True
  print( is_numeric("1.2.3") ) # True
  
main()
```

# Submit code for attendance

Submit your `is_numeric` function to Gradescope for attendance.

Name your file `is_numeric.py`

## `is_numeric()` solution

```{python}
#| eval: true
#| echo: true
def is_numeric(my_string):
  # create control variable for one decimal point
  decimal_point = False
  # create index variable
  index = 0
  while index < len(my_string):
    # first check, can character be found in a number?
    if my_string[index] not in "0123456789.":
      return False
    # second check, if a period, has a period been found before?
    if my_string[index] == ".":
      if decimal_point: # a previous period was detected
        return False
      else: # first period detected
        decimal_point = True
    # increment index  
    index += 1
  # while loop executed without returning False
  # that means every character is valid, so return True
  return True

def main():
  print( is_numeric("234") ) # True
  print( is_numeric("abc") ) # False
  print( is_numeric("12c") ) # False
  print( is_numeric("12.3") ) # True
  print( is_numeric("1.2.3") ) # False
  
main()
```
