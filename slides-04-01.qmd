---
title: "built-in functions (slides)"
format: revealjs
slide-number: true
---

# CSC 110 Python Functions

## Write a function

Write a Python function called `tell_story` that takes three arguments: `hero` and `villain`, representing the names of two characters, and `repetition`, representing the number of times to tell the story. The function should print out the following bedtime story:

"`hero` set out to slay the evil `villain`!

But he set his sword variable to global.

So `villain` accessed his sword and set it to None.

Use local variables next time, `hero`!"

Write the main function, and call the 'tell_story' with the following test case: tell_story("CSc 110 student", "Professor", 2)

## Write a function -- Part 2


-   Make sure all variables are local within the program.

-   Call the test case once with literals (tell_story("CSc 110 student", "Professor", 2)), and once by passing in those values with local variables defined in main

-   Finally, add function comments for main and 'tell_story'


## Write a function

```{python}
#| eval: False
#| echo: true
def tell_story_a(hero, villain, repetition):
  '''
  This function prints a bedtime story a specified number of times
  Args:
    hero: string representing the name of the hero
    villain: string representing the name of the villain
    repetition: integer dictating how many times to repeat printing the story
  Returns:
    None
  '''
  story_string = ""
  story_string = hero + " set out to slay the evil " + villain + "!\n"
  story_string = story_string + "But he set his sword variable to global.\n"
  story_string = story_string + "So " + villain + " accessed his sword and set it to None.\n"
  story_string = story_string + "Use local variables next time, " + hero + "!\n"
  story_string = story_string * repetition
  print(story_string, end='')
  
def tell_story_b(hero, villain, repetition):
  '''
  This function prints a bedtime story a specified number of times
  Args:
    hero: string representing the name of the hero
    villain: string representing the name of the villain
    repetition: integer dictating how many times to repeat printing the story
  Returns:
    None
  '''
  for i in range(repetition):
    print(hero + " set out to slay the evil " + villain + "!")
    print("But he set his sword variable to global.")
    print("So " + villain + " accessed his sword and set it to None.")
    print("Use local variables next time, " + hero + "!")

def main():
  '''
  This function calls both tell_story functions to test them out,
  once with local variables and once with literals
  '''
  tell_story_a("CSc 110 student", "Professor", 2)
  parameter_variable_a = "CSc 110 student"
  parameter_variable_b = "Professor"
  parameter_variable_c = 2
  tell_story_b(parameter_variable_a, parameter_variable_b, parameter_variable_c)
  
main()
```

## Built-in Functions

-   `print()` 
-   `round()`
-   `type()`
-   `input()`
-   `len()`
-   `int()`
-   `float()`

## Write a function

Write a Python function that does the following:

1.  Its name is `greeting`
2.  It takes two arguments, `first_name` and `last_name`
3.  It returns a string with a greeting using `first_name` and `last_name`

```{python}
#| echo: true
#| eval: false
print( greeting("Mickey", "Mouse") ) # Hello, Mickey Mouse!
```

## `input()` function

-   The `input()` function prompts the user to input text in the standard output
-   Whatever is inside the parentheses in `input()` will be written to the standard output (without a trailing newline, which you can add using `\n`).
-   The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that
-   `input()` always returns a string

```{python}
#| echo: true
#| eval: false
input("What's your name?\n")
```

## Write a function

Write a Python function that does the following:

1.  Its name is `greeting_again` with no parameters
2.  It first prompts you to enter your first name
3.  It again prompts you to enter your last name
3.  It returns a string with the same greeting as `greeting` but replace with your first and last name

```{python}
#| echo: true
#| eval: false
print( greeting_again() ) 
```

## Write a function

```{python}
#| echo: true
#| eval: false
def greeting(first, last):
    message = "Hello, " + first + " " + last + "!"
    return message

def greeting_again():
    first = input("Enter your first name:\n")
    last = input("Enter your last name:\n")
    message = "Hello, " + first + " " + last + "!"
    return message

def main():
    print(greeting("Mickey", "Mouse"))
    print(greeting_again())

main()
```

## `len()` function

-   The `len()` function can be used with many types -- we will be using it with `string` for now
-   It returns the number of characters in a string

```{python}
#| echo: true
#| eval: true
character_count = len("Mickey")
print(character_count)
```

## Write a function

Write a Python function that does the following:

1.  Its name is `count_characters`
2.  It takes three string arguments, `a`, `b` and `c`
3.  It returns the total number of characters for all three strings


```{python}
#| echo: true
#| eval: false
print( count_characters("hel", "lo", "world") ) # 10
print( count_characters("", "", "") ) # 0
print( count_characters(" ", " ", " ") ) # 3
print( count_characters("10", "2", "3") ) # 4
```

## Write a function
```{python}
#| echo: true
#| eval: true
def count_characters(a, b, c):
    return len(a) + len(b) + len(c)

def main():
    print( count_characters("hel", "lo", "world") ) # 10
    print( count_characters("", "", "") ) # 0
    print( count_characters(" ", " ", " ") ) # 3
    print( count_characters("10", "2", "3") ) # 4

main()
```



## `int()` function

-   The `int()` function can be used to convert a string to an integer type
-   It only works if the string only contains digits

```{python}
#| echo: true
#| eval: true
age = '35'
age_int = int(age)
print(type(age), type(age_int))
```

## `float()` function

-   The `float()` function can be used to convert a string to a float type
-   It only works if the string only contains digits and optionally a decimal point

```{python}
#| echo: true
#| eval: true
age = '35'
age_float = float(age)
print(type(age), type(age_float))
```


## Write a function

Write a Python function `calculate_year_born` with no parameters. It prompts user to enter their age `input()`. 

It converts user's `age` to integer and calculates (imperfectly) the year a person of `age` was born by subtracting `age` from `2025`. 

It returns an integer representing the approximate year person of `age` was born.


```{python}
#| echo: true
#| eval: false
print( calculate_year_born() ) # user enters 60, function returns 1965
```


## Write a function

```{python}
#| echo: true
#| eval: false
def calculate_year_born():
    str_age = input("what's your age?\n")
    age = int(str_age)
    year_born = 2025 - age
    return year_born

def main():
    print(calculate_year_born())

main()
```
