---
title: "Functions (class slides)"
format: revealjs
slide-number: true
---

# CSc 110 Functions <br> <small> Adriana Picoral </small>

## Announcements

-   Check your D2L gradebook
-   Access your submissions and original grading on Gradescope

## Functions

-   Functions are named operations that are available to do tasks
-   Some functions are *built-in* functions that Python provides
-   Programmers can also define their own functions
-   Functions are **called** (or **invoked**)

## Function definitions

```{python}
#| echo: true
#| eval: false
def two():
  return 2
```

This function definition has many parts:

-   `two` is the name of the function
-   `()` is the **parameter** list (Here, it is empty)
-   the body (or content) of the function is indented
-   `return 2` is a statement that causes the function to cease and produce the value 2

## Example of a simple function

```{python}
#| echo: true
#| eval: false
def add_one(n):
  return n + 1
```

-   `add_one` is the name of the function
-   `(n)` is the **parameter** list
-   the body (or content) of the function is indented
-   `return n + 1` is a statement that causes the function to cease and produce the value n + 1

## Submit simple function to Gradescope

-   Name your python script with the `add_one` function `first_function.py`
-   Go to [Gradescope](https://www.gradescope.com/courses/568720/assignments/3184749/configure_autograder) and submit your `.py` file
-   You can resubmit as many times as you need (up to the deadline)
-   You can look at your `Submission History` and activate a previous submission

## Function to calculate area of a circle

Remember this from the last set of slides?

```{python}
#| echo: true
#| eval: false
# assign a radius value
radius = 3
# compute the area of a circle
area = 3.1415 * radius ** 2
```

<br />

Calculating the `area` of a circle is an `abstraction`.

In the code above, that is done by a variable *assignment* with a variable named `area`.

Let's create a function called `area`, that given a `radius` parameter, it returns the `area` of the circle.

## Function to calculate the volume of a cylinder

Write a function that does the following:

1.  Its name is `volume`
2.  It takes two integer arguments: `radius` and `height`
3.  It calculates the volume of a cylinder, based on `radius` and `height`. Volume is area multiplied by height.
4.  It returns the float value for calculated volume.

## Function to calculate the volume of a cylinder

```{python}
#| echo: true
#| eval: false
def volume(radius, height):
  # calculate the area first
  area = 3.1415 * radius ** 2
  
  # multiply area by height
  vol = area * height
  
  # return calculated volume
  return vol


print(volume(1, 2)) # 6.283
print(volume(6, 10)) # 1130.94
print(volume(5, 5)) # 392.68750000000006
```

# Order of Operations

## PEMDAS

-   What does PEMDAS stand for?
-   The operator precedence:
    -   **P**arentheses
    -   **E**xponentiation
    -   **M**ultiplication and **D**ivision (including // and %)
    -   **A**ddition and **S**ubtraction

## PEMDAS

What value will each of these variables take on? No computers!

```{=html}
<pre>
a1 = 5 /  5 * 10  * 5
a2 = 5 / (5 * 10) * 5

b1 = 5 *  10 - 2
b2 = 5 * (10 - 2)

c = (3 // (4 // 5)) + 1
</pre>
```
## PEMDAS -- answer

```{python}
#| echo: true
#| eval: true
a1 = 5 /  5 * 10  * 5
a2 = 5 / (5 * 10) * 5

b1 = 5 *  10 - 2
b2 = 5 * (10 - 2)

# c = (3 // (4 // 5)) + 1 ERROR -- Zero Division

print(a1)
print(a2)
print(b1)
print(b2)
```

Note that the division operator returns a float even when both numerator and denominator are integers
