---
title: "handling exceptions (class slides)"
format: revealjs
slide-number: true
df-print: kable
---


# CSC -- handling errors (or exceptions)

## `try:` and `except:`

* Can be used to catch errors in a program without it having to crash!
* The programmer can provide more information and/or context as to what happened
* Can make debugging easier if you provide clear error messages

## `try:` and `except:`

```{python}
#| echo: true
#| eval: true
ages = [35, 35, 23, 18, 45, 18, 72]
try:
    print(ages[0] + ages[4])
except:
    print('Failed to print the sum of two ages')
```

```{python}
#| echo: true
#| eval: true
ages = [35, 35, 23, 18, 45, 18, 72]
try:
    print(ages[0] + ages[7])
except:
    print('Failed to print the sum of two ages')
```

## `try:` and `except:`

```{python}
#| echo: true
#| eval: true
ages = [35, 35, 23, 18, 45, 18, 72]
try:
    print(ages[0] + ages[7])
except:
    print('Failed to print the sum of two ages')
    print('Tried to get a value from an index that does not exist in the list')
```

```{python}
#| echo: true
#| eval: false
ages = [35, 35, 23, 18, 45, 18, 72]
print(ages[0] + ages[7])
```

IndexError: list index out of range

## Write a function

1. Its name is `read_numbers`
1. It takes a string for a file name
1. It opens the file in read mode, it splits the lines by space
1. It returns a list with all float numbers in the file
1. [Download test file](data/weather.txt)

```{python}
#| echo: true
#| eval: false
print( read_numbers("weather.txt") ) # [89.5, 50.2, 93.4, 69.0]
```

## Write a function -- solution


```{python}
#| echo: true
#| eval: true
def read_numbers(file_name):
  floats = []
  not_floats = []
  f = open(file_name, "r")
  for line in f:
    words = line.strip().split(" ")
    for w in words:
      try:
        floats.append(float(w))
      except:
        not_floats.append(w)
  f.close()
  return floats

def main():
  print( read_numbers("weather.txt") ) # [89.5, 50.2, 93.4, 69.0]
  
main()
```

