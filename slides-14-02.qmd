---
title: "mutating dictionaries (slides)"
format: revealjs
slide-number: true
df-print: kable
---

# CSc 110 - mutating dictionaries


## Dictionaries are mutable

-   changes to a dictionary in a function will remain after the function finishes running
-   you can change dictionary values using keys

## Changing values in a dictionary

You can change dictionary values using keys

```{python}
#| eval: true
#| echo: true
names_ages = {"Paul": 32, "Patricia": 44, "Eduardo": 27}
for key in names_ages:
  names_ages[key] += 1
names_ages
```

## Write a function

It **mutates** the dictionary, multiplying each value by 0.056 and rounding the result to two decimals

Name file as `sales_tax.py` and submit to Gradescope

```{python}
#| eval: false
#| echo: true
groceries = {"banana": 2.50, "milk": 4.25, "bread": 3.68}
sales_tax(groceries)
assert groceries == {'banana': 0.14, 'milk': 0.24, 'bread': 0.21}
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def sales_tax(dictionary):
  for key in dictionary:
    dictionary[key] = round(dictionary[key] * 0.056, 2)
  return dictionary

def main():
  groceries = {"banana": 2.50, "milk": 4.25, "bread": 3.68}
  sales_tax(groceries)
  assert groceries == {'banana': 0.14, 'milk': 0.24, 'bread': 0.21}
  print(groceries)
  
main()
    
```


## Removing dictionary `key: value`

Cannot iterate over a dictionary and change its size:

```{python}
#| eval: false
#| echo: true
counts = {"a": 10, "e": 4, "i": 3}
for key in counts:
  counts.pop(key)
```

RuntimeError: dictionary changed size during iteration

## Removing dictionary `key: value`

-   Step 1: use another data structure (like a set) instead
-   Step 2: iterate that data structure

```{python}
#| eval: true
#| echo: true
counts = {"a": 10, "e": 4, "i": 3}
keys = set(counts)
for k in keys:
  counts.pop(k)
counts
```

## Write a function

It takes a dictionary as argument, with string keys. It **mutates** and returns the dictionary argument removing keys that start and end with the same character

```{python}
#| eval: false
#| echo: true
students = {"Anna": "A", "Peter": "B", "Bob": "D", "Cedric": "A"}
remove_records(students)
assert students == {"Peter": "B"}
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def remove_records(dictionary):
  for k in set(dictionary):
    if len(k) > 0 and k[0].lower() == k[-1].lower():
      dictionary.pop(k)
  return dictionary
      
def main():
  students = {"Anna": "A", "Peter": "B", "Bob": "D", "Cedric": "A"}
  remove_records(students)
  assert students == {"Peter": "B"}
  
main()
```

## Create a list with duplicate items

Create a list with a total of five `'a'`:
```{python}
#| eval: true
#| echo: true
new_list = ['a'] * 5
new_list
```

Create a list with a total of three `1`:
```{python}
#| eval: true
#| echo: true
new_list = [1] * 3
new_list
```

## Write a function

It takes a dictionary as argument, with strings as keys and integers as values (assume all values are positive). It **mutates** and returns the dictionary, replacing each value with a list of the key repeated by the value.

```{python}
#| eval: false
#| echo: true
test_dictionary = {"a": 5, "b": 2, "c": 3}
repetition(test_dictionary)
assert test_dictionary == {"a": ["a", "a", "a", "a", "a"], 
                           "b": ["b", "b"], "c": ["c", "c", "c"] }
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def repetition(dictionary):
  for key, value in dictionary.items():
    dictionary[key] = [key] * value
  return dictionary

def main():
  test_dictionary = {"a": 5, "b": 2, "c": 3}
  repetition(test_dictionary)
  assert test_dictionary == {"a": ["a", "a", "a", "a", "a"], 
                           "b": ["b", "b"], "c": ["c", "c", "c"] }
  
main()
```

## Write a function

It has two parameters: a `dictionary` that maps one-letter strings to lists of strings, and a `string`.  It returns a list with strings (names) from the lists in the dictionary that include the second parameter (`string`) as a substring (this search is not case sensitive)

Test case:

```{python}
#| eval: false
#| echo: true
names = {"R": ["Randy", "Roger"], "S": ["Steve", "Sally"], "T": ["Tanner"]}
assert get_names(names, "er") == ["Roger", "Tanner"]
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def get_names(dictionary, string):
  new_list = []
  for name_list in dictionary.values():
    for name in name_list:
      if string.lower() in name.lower():
        new_list.append(name)
  return new_list

def main():
  names = { "R": ["Randy", "Roger"], 
            "S": ["Steve", "Sally"], 
            "T": ["Tanner"] }
  print( get_names(names, "er") ) # ["Roger", "Tanner"]
  
main()
```

## Quiz 11

<center>
<div class="cleanslate w24tz-current-time w24tz-large" style="display: inline-block !important; visibility: hidden !important; min-width:300px !important; min-height:145px !important;"><a href="//24timezones.com/Tucson/time" style="text-decoration: none" class="clock24" id="tz24-1695057604-c1393-eyJob3VydHlwZSI6IjEyIiwic2hvd2RhdGUiOiIwIiwic2hvd3NlY29uZHMiOiIwIiwiY29udGFpbmVyX2lkIjoiY2xvY2tfYmxvY2tfY2I2NTA4ODZjNDg0OWVlIiwidHlwZSI6ImRiIiwibGFuZyI6ImVuIn0=" title="World Time :: Tucson" target="_blank" rel="nofollow"></a>current time<div id="clock_block_cb650886c4849ee"></div></div>
<script type="text/javascript" src="//w.24timezones.com/l.js" async></script>
</center>

You have 10 minutes to complete the quiz.