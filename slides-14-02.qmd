---
title: "sorting (class slides)"
format: revealjs
slide-number: true
df-print: kable
---

# CSC 110 -- Sorting


## Sorting

-   A number of reasons to want sorted data
    -   For doing binary search!
    -   Finding a median value
    -   Finding the min and max
    -   Others?

## What is a sorted list?

-   A **sorting algorithm** is an algorithm that puts elements of a list in a certain order
-   There are different types of "ordering":
    
```{python}
#| echo: true
#| eval: true
# ascending numeric order 
numbers = [1, 2, 3, 4, 8, 10]

# descending numeric order
numbers = [20, 17, 5, 3, 1]

# lexicographic
letters = ['a', 'b', 'c', 'e']
```

## Sorting

Two built-in functions, compare their difference:

-   `list_var.sort()`   
```{python}
#| echo: true
#| eval: true
items = [5, 10, 20, 6, 7, 9, 43, 10, 12]
items.sort()
items
```

-   `sorted(list_var)`
```{python}
#| echo: true
#| eval: true
items = [5, 10, 20, 6, 7, 9, 43, 10, 12]
sorted(items)
items
```

## Discuss

`[5, 10, 1, 20, 7, 3, 9]`

-   Come up with a sorting algorithm and discuss your ideas 

-   Depict your algorithm with drawings/diagrams or with pseudocode

-   Can't use built-in methods

## In-place and out-of-place

-   **In-place sorting:** does not require a secondary data structure

-   **Out-of-place sorting:** may require a secondary data structure

## Selection sort

**Selection sort is a very simple sorting algorithm**

1.  Scan the list and find the smallest element

2.  Swap this element with the beginning element

3.  Continue these steps for the remaining list, not including the element just swapped

4.  Repeat

## Selection sort

-   Visualizing sorting algorithms with graphics can give one a better understanding

-   <https://visualgo.net/en/sorting>

## Write selection sort - step 1

1.  Function name is `find_min_index`
2.  It takes a list of numbers as argument
3.  It iterates over the list, scanning the list to find the smallest number
4.  Return the index of the smallest number

```{python}
#| eval: false
#| echo: true
assert find_min_index([]) == None
assert find_min_index([5, 10, 1, 20, 7, 3, 9]) == 2
```

## Write selection sort -- step 1 solution

```{python}
#| eval: true
#| echo: true
def find_min_index(items):
  min_index = None
  for i in range(len(items)):
    if min_index == None or items[min_index] > items[i]:
      min_index = i
  return min_index
    
def main():
  test_list = [5, 10, 1, 20, 7, 3, 9]
  assert find_min_index(test_list) == 2
  
main()
```

## Write selection sort - step 1 continue

Now you found the index of smallest number, let's make one swap: swap the items at index `0` and `min_index`.

```{python}
#| eval: false
#| echo: true
items = [5, 10, 1, 20, 7, 3, 9]

begin_index = 0
min_index = find_min_index(items) # min_index is 2

# swap items at index 0 and 2
items[begin_index], items[min_index] = items[min_index], items[begin_index]

assert items = [1, 10, 5, 20, 7, 3, 9]
```

## Write selection sort - step 2

How to find the `min_index` starting from `begin_index`? You can call `find_min_index` function.

```{python}
#| eval: false
#| echo: true
begin_index = 1
items = [1, 10, 5, 20, 7, 3, 9]

# write your code here

assert min_index == 5  
```

## Write selection sort - step 2 solution

How to find the `min_index` starting from `begin_index`? You can call `find_min_index` function.

```{python}
#| eval: false
#| echo: true
begin_index = 1
items = [1, 10, 5, 20, 7, 3, 9]

assert items[begin_index:] == [10, 5, 20, 7, 3, 9] 

# index of 3 in the sublist is 4
assert find_min_index(items[begin_index:]) == 4  

# index of 3 in the list is 5
min_index = find_min_index(items[begin_index:]) + begin_index 
assert min_index == 5  
```

## Write selection sort - step 2 continue

Now you found the index of smallest number starting from `begin_index`, let's make another swap:

```{python}
#| eval: false
#| echo: true
items = [1, 10, 5, 20, 7, 3, 9]

begin_index = 1
min_index = find_min_index(items[begin_index:]) + begin_index 

# swap items at index 1 and 5
items[begin_index], items[min_index] = items[min_index], items[begin_index]

assert items = [1, 3, 5, 20, 7, 10, 9]
```

## Write selection sort - step 3

1.  Function name is `selection_sort` that **mutates** the list argument and sort it
1.  It iterates over the list, call `find_min_index` to find the index of smallest element
1.  It swaps the smallest element found in each iteration with the beginning element 
1.  Set a `begin_index` before while loop, in each iteration add 1 to `begin_index`

## Write selection sort -- solution

```{python}
#| eval: true
#| echo: true
def find_min_index(items):
  min_index = None
  for i in range(len(items)):
    if min_index == None or items[min_index] > items[i]:
      min_index = i
  return min_index

def selection_sort(items):
  begin_index = 0
  while begin_index < len(items)-1:
    # get min of sublist, add begin_index to shift it
    min_index = find_min_index(items[begin_index:]) + begin_index
    items[begin_index], items[min_index] = items[min_index], items[begin_index]
    begin_index += 1
    
def main():
  test_list = [5, 10, 20, 6, 7, 9, 43, 10, 12]
  selection_sort(test_list)
  assert test_list == [5, 6, 7, 9, 10, 10, 12, 20, 43]
  
main()
    
```

## How many total sweeps and swaps to sort this list?

```{python}
#| eval: true
#| echo: true
numbers = [ 3, 1, 7, 2, 4 ]
```

## How many total sweeps and swaps to sort this list?

\[**3**, **1**, 7, 2, 4\] sweep

\[1, **3**, 7, **2**, 4\] swap and sweep

\[1, 2, **7**, **3**, 4\] swap and sweep

\[1, 2, 3, **7**, **4**\] swap and sweep

\[1, 2, 3, 4, 7\] swap

4 sweeps

4 swaps (worst case scenario)

## How many total sweeps and swaps to sort this list?

```{python}
#| eval: true
#| echo: true
numbers = [ 3, 0, 7, 2, 4, 8 ]
```


## How many total sweeps and swaps to sort this list?

\[ **3**, **0**, 7, 2, 4, 8 \] sweep

\[ 0, **3**, 7, **2**, 4, 8\] swap and sweep

\[ 0, 2, **7**, **3**, 4, 8 \] swap and sweep

\[ 0, 2, 3, **7**, **4**, 8 \] swap and sweep

\[ 0, 2, 3, 4, 7, 8 \] swap and sweep


5 sweeps, 4 swaps

## Quiz 11

<center>
<div class="cleanslate w24tz-current-time w24tz-large" style="display: inline-block !important; visibility: hidden !important; min-width:300px !important; min-height:145px !important;"><a href="//24timezones.com/Tucson/time" style="text-decoration: none" class="clock24" id="tz24-1695057604-c1393-eyJob3VydHlwZSI6IjEyIiwic2hvd2RhdGUiOiIwIiwic2hvd3NlY29uZHMiOiIwIiwiY29udGFpbmVyX2lkIjoiY2xvY2tfYmxvY2tfY2I2NTA4ODZjNDg0OWVlIiwidHlwZSI6ImRiIiwibGFuZyI6ImVuIn0=" title="World Time :: Tucson" target="_blank" rel="nofollow"></a>current time<div id="clock_block_cb650886c4849ee"></div></div>
<script type="text/javascript" src="//w.24timezones.com/l.js" async></script>
</center>

You have 10 minutes to complete the quiz.

No need to write `main()` function.

## Bubble sort

-   **Bubble Sort:** another sorting algorithm

    1.  Scan through each element in the list, comparing the current element with the next one

    2.  If the next one is smaller, swap the elements

    3.  Continue these iterations until the whole list is sorted

-   This causes the large elements to "bubble up" to the top

## Write bubble sort - step 1

1.  Function name is `single_sweep_swap`
2.  It takes a list as argument
3.  It **mutates** the list, sorting it
4.  It iterates over the list, comparing each element with the next one, if the next one is smaller, swap elements
5.  It sweeps the list only once

```{python}
#| echo: true
#| eval: false
assert single_sweep_swap([8, 3, 5, 7, 1]) == [3, 5, 7, 1, 8]
```

## Write bubble sort -- step 1 solution

```{python}
#| eval: true
#| echo: true
def single_sweep_swap(numbers):
    end = len(numbers) - 1
    for i in range(end):
        if numbers[i] > numbers[i+1]:
            numbers[i], numbers[i+1] = numbers[i+1], numbers[i]
    return numbers

def main():
    assert single_sweep_swap([8, 3, 5, 7, 1]) == [3, 5, 7, 1, 8]
    assert single_sweep_swap([3, 5, 7, 1, 9]) == [3, 5, 1, 7, 9]
    
main()
```

## Write bubble sort - step 2

1.  Function name is `bubble_sort` that sweeps the list, comparing elements 
3.  If it is sorted, return the list. Otherwise, swap elements
4.  It sweeps the list in a iteration. The `end` starts at `len(items)-1`
5.  In each iteration, subtract 1 from the `end` index 

```{python}
#| echo: true
#| eval: false
assert bubble_sort([8, 3, 5, 7, 1]) == [1, 3, 5, 7, 8]
```

## Write bubble sort -- solution

```{python}
#| eval: true
#| echo: true
def bubble_sort(items):
  is_sorted = False
  end = len(items)-1
  while not is_sorted:
    is_sorted = True
    for i in range(end):
      if items[i] > items[i+1]:
        items[i], items[i+1] = items[i+1], items[i]
        is_sorted = False
    end -= 1
      
def main():
  test_list = [5, 10, 20, 6, 7, 9, 43, 10, 12]
  bubble_sort(test_list)
  print(test_list)
  
main()
```


## How many total sweeps and swaps to sort this list?

```{python}
#| eval: true
#| echo: true
numbers = [ 3, 1, 7, 2, 4 ]
```

## How many total sweeps and swaps to sort this list?

> \[ 3, 1, 7, 2, 4 \] first sweep

\[ **1**, **3**, 7, 2, 4 \] swap

\[ 1, 3, **2**, **7**, 4 \] swap

\[ 1, 3, 2, **4**, **7** \] swap

> \[ 1, 3, 2, 4, 7 \] second sweep

\[ 1, **2**, **3**, 4, 7 \] swap

> \[ 1, 2, 3, 4, 7 \] third sweep

## How many total sweeps and swaps?

Go to gradescope and answer today's attendance question:
```{python}
#| eval: true
#| echo: true
numbers = [ 3, 1, 7, 2, 4, 8, 5 ]
```

## How many sweeps, swaps? (part 1)

> \[ 3, 1, 7, 2, 4, 8, 5 \] first sweep

\[ **1**, **3**, 7, 2, 4, 8, 5 \] swap

\[ 1, 3, **2**, **7**, 4, 8, 5 \] swap

\[ 1, 3, 2, **4**, **7**, 8, 5 \] swap

\[ 1, 3, 2, 4, 7, **5**, **8** \] swap


## How many sweeps, swaps? (part 2)

> \[ 1, 3, 2, 4, 7, 5, 8 \] second sweep

\[ 1, **2**, **3**, 4, 7, 5, 8 \] swap

\[ 1, 2, 3, 4, **5**, **7**, 8 \] swap

> \[ 1, 2, 3, 4, 5, 7, 8 \] third sweep


## Lots of algorithms

-   There are many sorting algorithms

    -   **Bogo sort**

    -   **Selection sort**

    -   **Bubble sort**

    -   **Insertion sort**

    -   **Merge sort**

    -   **Quick sort**

    -   \...more\...

## Visualization

<span style="color:red">Flash Warning</span>: the following video contains flashing lights.
<https://www.youtube.com/watch?v=kPRA0W1kECg>
