---
title: "more on decomposition (slides)"
format: revealjs
slide-number: true
---

# CSC 110 more on decomposition

## Quiz 03

<center>
<div class="cleanslate w24tz-current-time w24tz-large" style="display: inline-block !important; visibility: hidden !important; min-width:300px !important; min-height:145px !important;"><a href="//24timezones.com/Tucson/time" style="text-decoration: none" class="clock24" id="tz24-1695057604-c1393-eyJob3VydHlwZSI6IjEyIiwic2hvd2RhdGUiOiIwIiwic2hvd3NlY29uZHMiOiIwIiwiY29udGFpbmVyX2lkIjoiY2xvY2tfYmxvY2tfY2I2NTA4ODZjNDg0OWVlIiwidHlwZSI6ImRiIiwibGFuZyI6ImVuIn0=" title="World Time :: Tucson" target="_blank" rel="nofollow"></a>current time<div id="clock_block_cb650886c4849ee"></div></div>
<script type="text/javascript" src="//w.24timezones.com/l.js" async></script>
</center>

You have 10 minutes to complete the quiz.

Your formula in your function should be Python code (in other words, do not just copy the formula in the instructions, make it so it uses **actual symbols for Python operators**)

## Class activity one

Read the code, discuss and answer the question in 1-2 sentences using natural language:

-   What problem does the code solve?


## Rubik’s Cubes

```{python}
#| echo: true
#| eval: false
cube_len = int(input("Cube length? "))
box_w = int(input("Box width? "))
box_h = int(input("Box height? "))
box_l = int(input("Box length? "))

fit_w = box_w // cube_len
fit_h = box_h // cube_len
fit_l = box_l // cube_len

print(str(fit_w) + " Rubik's cubes will fit width-wise.")
print(str(fit_h) + " Rubik's cubes will fit height-wise.")
print(str(fit_l) + " Rubik's cubes will fit length-wise.")

res = fit_w * fit_h * fit_l
print(str(res)+" Rubik's cubes will fit in that container.")
```

## Activity two

Read the code and write the questions:

-   which lines of code are similar?

-   which lines of code are unique?

-   which lines can be grouped together into a function? what does the function do?


## Rubik’s Cubes

```{python}
#| echo: true
#| eval: false
cube_len = int(input("Cube length? "))
box_w = int(input("Box width? ")) 
box_h = int(input("Box height? "))
box_l = int(input("Box length? "))

fit_w = box_w // cube_len
fit_h = box_h // cube_len
fit_l = box_l // cube_len

print(str(fit_w) + " Rubik's cubes will fit width-wise.")
print(str(fit_h) + " Rubik's cubes will fit height-wise.")
print(str(fit_l) + " Rubik's cubes will fit length-wise.")

res = fit_w * fit_h * fit_l
print(str(res)+" Rubik's cubes will fit in that container.")
```

## Activity two -- answers

Read the code and write the questions:

-   which lines of code are similar? 

    -   line 2-4, line 6-8, line 10-12

-   which lines of code are unique? 

    -   line 1, line 14-15

## Activity two -- continued

Which lines can be grouped together into a function?

- line 2, 6, 10:

```{python}
#| echo: true
#| eval: false
box_w = int(input("Box width? ")) 

fit_w = box_w // cube_len

print(str(fit_w) + " Rubik's cubes will fit width-wise.")
```

What are the parameters of this function? In other words, what information must be known beforehand?

## Activity two -- answers continued

Given the length of a cube and the name of a box side:

-   It prompts you to the enter the length of the side

-   It calculates the number of cube that can fit in the side

-   It print the message and return the number.


## Write a function

Write function `get_fit` that takes the length of a `cube` (integer) and the name of a `side` (string)

-   It prompts you to the enter the length of the `side`

-   It calculates the number of `cube` that can fit in the `side`

-   It print the message and return the number.

Name your file as `cubes.py` and submit to Gradescope.

```{python}
#| echo: true
#| eval: false
def main():
    cube_len = int(input("Cube length? "))
    fit_w = get_fit(cube_len, 'width')
    fit_h = get_fit(cube_len, 'height')
    fit_l = get_fit(cube_len, 'length')
    result = fit_w * fit_h * fit_l
    print(str(result) + " Rubik's cubes will fit in that container.")
```

## Write a function -- answer

```{python}
#| echo: true
#| eval: false
def get_fit(cube, side):
    large = int(input("Box {}? ".format(side)))
    fit = large // cube
    print("{} Rubik's cubes will fit {}-wise.".format(fit, side))
    return fit

def main():
    cube_len = int(input("Cube length? "))
    fit_w = get_fit(cube_len, 'width')
    fit_h = get_fit(cube_len, 'height')
    fit_l = get_fit(cube_len, 'length')
    result = fit_w * fit_h * fit_l
    print(str(result) + " Rubik's cubes will fit in that container.")

main()
```

