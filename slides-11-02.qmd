---
title: "nested for loops (class slides)"
format: revealjs
slide-number: true
df-print: kable
---

# CSc 110 - nested for loops

## 2D lists

```{python}
#| eval: true
#| echo: true
people = [["Ana", 34, "B"],
          ["Peter", 23, "A"]]
```

How to retrieve first name `"Ana"`?

How to retrieve first name `"Peter"`?

How to retrieve integer `23`?

## 2D lists

```{python}
#| eval: true
#| echo: true
people = [["Ana", 34, "B"],
          ["Peter", 23, "A"]]
```

How to retrieve first name `"Ana"`?

```{python}
#| eval: true
#| echo: true
people[0][0]
```

How to retrieve first name `"Peter"`?

```{python}
#| eval: true
#| echo: true
people[1][0]
```

How to retrieve integer `23`?

```{python}
#| eval: true
#| echo: true
people[1][1]
```

## Nested `for` loops

```{python}
#| eval: true
#| echo: true
people = [["Ana", 34, "B"],
          ["Peter", 23, "A"]]
          
for i in range(len(people)):
  for j in range(len(people[i])):
    print(people[i][j])
```

## Write a function

1. Function name is `nested_max`
1. It takes a 2D list of numbers as argument
1. It iterates over every item in each sublist to find the highest number
1. It returns the highest number in all lists

Test cases
```{python}
#| eval: false
#| echo: true
assert nested_max([[], []]) == None
assert nested_max([[1, 2, 3, 2, 1],
                   [2, 3, 2, 1, 5],
                   [0, 1]]) == 5
```

## Write a function -- solution 1


```{python}
#| eval: true
#| echo: true
def nested_max(lists):
  max = None
  for i in range(len(lists)):
    for j in range(len(lists[i])):
      if max == None or lists[i][j] > max:
        max = lists[i][j]
  return max

def main():
  assert nested_max([[], []]) == None
  assert nested_max([[1, 2, 3, 2, 1],
                     [2, 3, 2, 1, 5],
                     [0, 1]]) == 5
  print("Passed all tests")
main()
```

## Write a function -- solution 2


```{python}
#| eval: true
#| echo: true
def max_list(numbers):
  max = None
  for i in range(len(numbers)):
    if max == None or numbers[i] > max:
      max = numbers[i]
  return max

def nested_max(lists):
  max = None
  for i in range(len(lists)):
    max_of_sublist = max_list(lists[i])
    if max == None or  max_of_sublist> max:
      max = max_of_sublist
  return max

def main():
  assert nested_max([[], []]) == None
  assert nested_max([[1, 2, 3, 2, 1],
                     [2, 3, 2, 1, 5],
                     [0, 1]]) == 5
  print("Passed all tests")
main()
```

# Submit code for attendance

Submit your `nested_max` functions to Gradescope for attendance.

Name your file `nested_max.py`

## Write a function

1. Function name is `nested_min`
1. It takes a 2D list of numbers as argument
1. It iterates over every item in each sublist to find the lowest number
1. It returns the lowest number in all lists

Test cases
```{python}
#| eval: false
#| echo: true
assert nested_min([[], []]) == None
assert nested_min([[1, 2, 3, 2, 1],
                   [2, 3, 2, 1, 5],
                   [0, 1]]) == 0
```

## Write a function -- solution


```{python}
#| eval: true
#| echo: true
def nested_min(lists):
  min = None
  for i in range(len(lists)):
    for j in range(len(lists[i])):
      if min == None or lists[i][j] < min:
        min = lists[i][j]
  return min

def main():
  assert nested_min([[], []]) == None
  assert nested_min([[1, 2, 3, 2, 1],
                     [2, 3, 2, 1, 5],
                     [0, 1]]) == 0
  print("Passed all tests")
main()
```

## Mutate nested lists

In addition to retrieving a value from nested lists, we can also mutate a value in a sublist.

```{python}
#| eval: true
#| echo: true
people = [["Ana", 34, "B"],
          ["Peter", 23, "A"]]
people
```


```{python}
#| eval: true
#| echo: true
people[0][1] = 24
people
```

## Write a function

1. Function name is `double_nested`
1. It takes a 2D list of numbers as argument
1. It mutates the sublist items by multiplying each number in each sublist by 2
1. It returns the argument list

Test cases
```{python}
#| eval: false
#| echo: true
assert double_nested([[], []]) == [[], []]
assert double_nested([[1, 2, 3, 2, 1],
                     [0, 1]]) == [[2, 4, 6, 4, 2],
                                  [0, 2]]
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def double_nested(lists):
  for i in range(len(lists)):
    for j in range(len(lists[i])):
      lists[i][j] *= 2
  return lists

def main():
  assert double_nested([[], []]) == [[], []]
  assert double_nested([[1, 2, 3, 2, 1],
                        [0, 1]]) == [[2, 4, 6, 4, 2],
                                     [0, 2]]
  print("Passed all tests")
main()
```


## Write a function

1. Function name is `len_strings_nested`
1. It takes a 2D list of strings as argument
1. It mutates the sublist items by replacing each string with its length
1. It returns the argument list

Test cases:

```{python}
#| eval: false
#| echo: true
assert len_strings_nested([["desserts", "raw", "live"],
                            ["smart", "knits"]]) == [[8, 3, 4], [5, 5]]
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def len_strings_nested(strings):
  for i in range(len(strings)):
    for j in range(len(strings[i])):
      strings[i][j] = len(strings[i][j])
  return strings

def main():
  original_list = [["desserts", "raw", "live"],
                               ["smart", "knits"]]
  assert len_strings_nested(original_list) == [[8, 3, 4], [5, 5]]
  print(original_list)
  
main()
```

## Write a function

1. Function name is `reverse_strings_nested`
1. It takes a 2D list of strings as argument
1. It mutates the sublist items by reversing each string (you can use `string[::-1]` to reverse it)
1. It returns the argument list

Test cases:

```{python}
#| eval: false
#| echo: true
assert reverse_strings_nested([["desserts", "raw", "live"],
                               ["smart", "knits"]]) == [["stressed", "war", "evil"],
                                                        ["trams", "stink"]]
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def reverse_strings_nested(strings):
  for i in range(len(strings)):
    for j in range(len(strings[i])):
      strings[i][j] = strings[i][j][::-1]
  return strings

def main():
  original_strings = [["desserts", "raw", "live"],
                      ["smart", "knits"]]
  reverse_strings_nested(original_strings)   
  assert  original_strings == [["stressed", "war", "evil"],
                               ["trams", "stink"]]
  
  print(original_strings)
  print("Passed test")
  
main()
```

## Extra Activity -- Loop Table

```{python}
#| eval: false
#| echo: true
def nested_max(lists):
  max = None
  for i in range(len(lists)):
    for j in range(len(lists[i])):
      if max == None or lists[i][j] > max:
        max = lists[i][j]
  return max

max_nested([[], [], [2, 1], [0, 5, 2], [3]])
```

Draw a loop table with:

* value of `max` before loop, and in each iteration of the nested loops
* values of `i`, `j`, and `lists[i][j]` for each nested loop iteration

## Loop table -- solution part 1

```{r}
#| eval: true
#| echo: false
#| warning: false
#| message: false
library(knitr)
library(tidyverse)
library(huxtable)
df <- data.frame(a = c("0", "1", "2", "2", "3", "3", "3"),
           b = c("-", "-", "0", "1", "0", "1", "2"),
           c = c("0", "0", "2", "2", "3", "3", "3"),
           d = c("-", "-", "2", "1", "0", "5", "2"),
           e = c("None", "None", "2", "2", "2", "5", "5"))

colnames(df) <-  c("i", "j", "len(lists[i])", "lists[i][j]", "max")

as_hux(df, add_colnames = TRUE) %>%
      set_right_border(1:8, everywhere, 0.4) %>%
      set_left_border(1:8, everywhere, 0.4) %>%
      set_top_border(1:8, everywhere, 0.4) %>% 
      set_bottom_border(1:8, everywhere, 0.4)
```

## Loop table -- solution part 2

```{r}
#| eval: true
#| echo: false
#| warning: false
#| message: false
library(knitr)
library(tidyverse)
library(huxtable)
df <- data.frame(a = c("4"),
           b = c("0"),
           c = c("1"),
           d = c("3"),
           e = c("5"))

colnames(df) <-  c("i", "j", "len(lists[i])", "lists[i][j]", "max")

as_hux(df, add_colnames = TRUE) %>%
      set_right_border(1:2, everywhere, 0.4) %>%
      set_left_border(1:2, everywhere, 0.4) %>%
      set_top_border(1:2, everywhere, 0.4) %>% 
      set_bottom_border(1:2, everywhere, 0.4)
```
